// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ampy/fx/v1/fx.proto
// Protobuf C++ Version: 6.32.0

#include "ampy/fx/v1/fx.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ampy {
namespace fx {
namespace v1 {

inline constexpr Pair::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        base_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        quote_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR Pair::Pair(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Pair_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PairDefaultTypeInternal() {}
  union {
    Pair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PairDefaultTypeInternal _Pair_default_instance_;

inline constexpr FxRate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pair_{nullptr},
        bid_{nullptr},
        ask_{nullptr},
        mid_{nullptr},
        as_of_{nullptr},
        meta_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR FxRate::FxRate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(FxRate_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FxRateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FxRateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FxRateDefaultTypeInternal() {}
  union {
    FxRate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FxRateDefaultTypeInternal _FxRate_default_instance_;

inline constexpr FxRateBatch::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rates_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FxRateBatch::FxRateBatch(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(FxRateBatch_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FxRateBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FxRateBatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FxRateBatchDefaultTypeInternal() {}
  union {
    FxRateBatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FxRateBatchDefaultTypeInternal _FxRateBatch_default_instance_;
}  // namespace v1
}  // namespace fx
}  // namespace ampy
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_ampy_2ffx_2fv1_2ffx_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_ampy_2ffx_2fv1_2ffx_2eproto = nullptr;
const ::uint32_t
    TableStruct_ampy_2ffx_2fv1_2ffx_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::fx::v1::Pair, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ampy::fx::v1::Pair, _impl_.base_),
        PROTOBUF_FIELD_OFFSET(::ampy::fx::v1::Pair, _impl_.quote_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::fx::v1::FxRate, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ampy::fx::v1::FxRate, _impl_.pair_),
        PROTOBUF_FIELD_OFFSET(::ampy::fx::v1::FxRate, _impl_.bid_),
        PROTOBUF_FIELD_OFFSET(::ampy::fx::v1::FxRate, _impl_.ask_),
        PROTOBUF_FIELD_OFFSET(::ampy::fx::v1::FxRate, _impl_.mid_),
        PROTOBUF_FIELD_OFFSET(::ampy::fx::v1::FxRate, _impl_.as_of_),
        PROTOBUF_FIELD_OFFSET(::ampy::fx::v1::FxRate, _impl_.meta_),
        0,
        1,
        2,
        3,
        4,
        5,
        0x000, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::fx::v1::FxRateBatch, _impl_.rates_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::ampy::fx::v1::Pair)},
        {7, sizeof(::ampy::fx::v1::FxRate)},
        {22, sizeof(::ampy::fx::v1::FxRateBatch)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::ampy::fx::v1::_Pair_default_instance_._instance,
    &::ampy::fx::v1::_FxRate_default_instance_._instance,
    &::ampy::fx::v1::_FxRateBatch_default_instance_._instance,
};
const char descriptor_table_protodef_ampy_2ffx_2fv1_2ffx_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\023ampy/fx/v1/fx.proto\022\nampy.fx.v1\032\037googl"
    "e/protobuf/timestamp.proto\032\033ampy/common/"
    "v1/common.proto\"0\n\004Pair\022\022\n\004base\030\001 \001(\tR\004b"
    "ase\022\024\n\005quote\030\002 \001(\tR\005quote\"\212\002\n\006FxRate\022$\n\004"
    "pair\030\001 \001(\0132\020.ampy.fx.v1.PairR\004pair\022)\n\003bi"
    "d\030\002 \001(\0132\027.ampy.common.v1.DecimalR\003bid\022)\n"
    "\003ask\030\003 \001(\0132\027.ampy.common.v1.DecimalR\003ask"
    "\022)\n\003mid\030\004 \001(\0132\027.ampy.common.v1.DecimalR\003"
    "mid\022/\n\005as_of\030\005 \001(\0132\032.google.protobuf.Tim"
    "estampR\004asOf\022(\n\004meta\030\006 \001(\0132\024.ampy.common"
    ".v1.MetaR\004meta\"7\n\013FxRateBatch\022(\n\005rates\030\001"
    " \003(\0132\022.ampy.fx.v1.FxRateR\005ratesB\235\001\n\016com."
    "ampy.fx.v1B\007FxProtoP\001Z8github.com/yeonho"
    "lee50/ampy-proto/gen/go/ampy/fx/v1;fxv1\242"
    "\002\003AFX\252\002\nAmpy.Fx.V1\312\002\nAmpy\\Fx\\V1\342\002\026Ampy\\F"
    "x\\V1\\GPBMetadata\352\002\014Ampy::Fx::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_ampy_2ffx_2fv1_2ffx_2eproto_deps[2] = {
        &::descriptor_table_ampy_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_ampy_2ffx_2fv1_2ffx_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ampy_2ffx_2fv1_2ffx_2eproto = {
    false,
    false,
    639,
    descriptor_table_protodef_ampy_2ffx_2fv1_2ffx_2eproto,
    "ampy/fx/v1/fx.proto",
    &descriptor_table_ampy_2ffx_2fv1_2ffx_2eproto_once,
    descriptor_table_ampy_2ffx_2fv1_2ffx_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_ampy_2ffx_2fv1_2ffx_2eproto::offsets,
    file_level_enum_descriptors_ampy_2ffx_2fv1_2ffx_2eproto,
    file_level_service_descriptors_ampy_2ffx_2fv1_2ffx_2eproto,
};
namespace ampy {
namespace fx {
namespace v1 {
// ===================================================================

class Pair::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Pair>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Pair, _impl_._has_bits_);
};

Pair::Pair(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Pair_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.fx.v1.Pair)
}
PROTOBUF_NDEBUG_INLINE Pair::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::fx::v1::Pair& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        base_(arena, from.base_),
        quote_(arena, from.quote_) {}

Pair::Pair(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Pair& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Pair_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Pair* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:ampy.fx.v1.Pair)
}
PROTOBUF_NDEBUG_INLINE Pair::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        base_(arena),
        quote_(arena) {}

inline void Pair::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Pair::~Pair() {
  // @@protoc_insertion_point(destructor:ampy.fx.v1.Pair)
  SharedDtor(*this);
}
inline void Pair::SharedDtor(MessageLite& self) {
  Pair& this_ = static_cast<Pair&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.base_.Destroy();
  this_._impl_.quote_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Pair::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Pair(arena);
}
constexpr auto Pair::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Pair),
                                            alignof(Pair));
}
constexpr auto Pair::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Pair_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Pair::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Pair>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Pair::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Pair>(), &Pair::ByteSizeLong,
              &Pair::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Pair, _impl_._cached_size_),
          false,
      },
      &Pair::kDescriptorMethods,
      &descriptor_table_ampy_2ffx_2fv1_2ffx_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Pair_class_data_ =
        Pair::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Pair::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Pair_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Pair_class_data_.tc_table);
  return Pair_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 33, 2>
Pair::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Pair, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Pair_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::fx::v1::Pair>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string quote = 2 [json_name = "quote"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Pair, _impl_.quote_)}},
    // string base = 1 [json_name = "base"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Pair, _impl_.base_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string base = 1 [json_name = "base"];
    {PROTOBUF_FIELD_OFFSET(Pair, _impl_.base_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string quote = 2 [json_name = "quote"];
    {PROTOBUF_FIELD_OFFSET(Pair, _impl_.quote_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\17\4\5\0\0\0\0\0"
    "ampy.fx.v1.Pair"
    "base"
    "quote"
  }},
};
PROTOBUF_NOINLINE void Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.fx.v1.Pair)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.base_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.quote_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Pair::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Pair& this_ = static_cast<const Pair&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Pair::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Pair& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.fx.v1.Pair)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string base = 1 [json_name = "base"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_base().empty()) {
      const ::std::string& _s = this_._internal_base();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ampy.fx.v1.Pair.base");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string quote = 2 [json_name = "quote"];
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_quote().empty()) {
      const ::std::string& _s = this_._internal_quote();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ampy.fx.v1.Pair.quote");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.fx.v1.Pair)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Pair::ByteSizeLong(const MessageLite& base) {
  const Pair& this_ = static_cast<const Pair&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Pair::ByteSizeLong() const {
  const Pair& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.fx.v1.Pair)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    // string base = 1 [json_name = "base"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_base().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_base());
      }
    }
    // string quote = 2 [json_name = "quote"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_quote().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_quote());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Pair::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Pair*>(&to_msg);
  auto& from = static_cast<const Pair&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.fx.v1.Pair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_base().empty()) {
        _this->_internal_set_base(from._internal_base());
      } else {
        if (_this->_impl_.base_.IsDefault()) {
          _this->_internal_set_base("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_quote().empty()) {
        _this->_internal_set_quote(from._internal_quote());
      } else {
        if (_this->_impl_.quote_.IsDefault()) {
          _this->_internal_set_quote("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Pair::CopyFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.fx.v1.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Pair::InternalSwap(Pair* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_, &other->_impl_.base_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_, &other->_impl_.quote_, arena);
}

::google::protobuf::Metadata Pair::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FxRate::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<FxRate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FxRate, _impl_._has_bits_);
};

void FxRate::clear_bid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bid_ != nullptr) _impl_.bid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
void FxRate::clear_ask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ask_ != nullptr) _impl_.ask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
void FxRate::clear_mid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mid_ != nullptr) _impl_.mid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008U;
}
void FxRate::clear_as_of() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.as_of_ != nullptr) _impl_.as_of_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010U;
}
void FxRate::clear_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020U;
}
FxRate::FxRate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FxRate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.fx.v1.FxRate)
}
PROTOBUF_NDEBUG_INLINE FxRate::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::fx::v1::FxRate& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

FxRate::FxRate(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const FxRate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FxRate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FxRate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pair_ = ((cached_has_bits & 0x00000001U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.pair_)
                : nullptr;
  _impl_.bid_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.bid_)
                : nullptr;
  _impl_.ask_ = ((cached_has_bits & 0x00000004U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ask_)
                : nullptr;
  _impl_.mid_ = ((cached_has_bits & 0x00000008U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mid_)
                : nullptr;
  _impl_.as_of_ = ((cached_has_bits & 0x00000010U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.as_of_)
                : nullptr;
  _impl_.meta_ = ((cached_has_bits & 0x00000020U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:ampy.fx.v1.FxRate)
}
PROTOBUF_NDEBUG_INLINE FxRate::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void FxRate::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pair_),
           0,
           offsetof(Impl_, meta_) -
               offsetof(Impl_, pair_) +
               sizeof(Impl_::meta_));
}
FxRate::~FxRate() {
  // @@protoc_insertion_point(destructor:ampy.fx.v1.FxRate)
  SharedDtor(*this);
}
inline void FxRate::SharedDtor(MessageLite& self) {
  FxRate& this_ = static_cast<FxRate&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.pair_;
  delete this_._impl_.bid_;
  delete this_._impl_.ask_;
  delete this_._impl_.mid_;
  delete this_._impl_.as_of_;
  delete this_._impl_.meta_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL FxRate::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) FxRate(arena);
}
constexpr auto FxRate::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(FxRate),
                                            alignof(FxRate));
}
constexpr auto FxRate::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_FxRate_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &FxRate::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<FxRate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &FxRate::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<FxRate>(), &FxRate::ByteSizeLong,
              &FxRate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(FxRate, _impl_._cached_size_),
          false,
      },
      &FxRate::kDescriptorMethods,
      &descriptor_table_ampy_2ffx_2fv1_2ffx_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull FxRate_class_data_ =
        FxRate::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
FxRate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&FxRate_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(FxRate_class_data_.tc_table);
  return FxRate_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 6, 0, 2>
FxRate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FxRate, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    FxRate_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::fx::v1::FxRate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .ampy.fx.v1.Pair pair = 1 [json_name = "pair"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FxRate, _impl_.pair_)}},
    // .ampy.common.v1.Decimal bid = 2 [json_name = "bid"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(FxRate, _impl_.bid_)}},
    // .ampy.common.v1.Decimal ask = 3 [json_name = "ask"];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(FxRate, _impl_.ask_)}},
    // .ampy.common.v1.Decimal mid = 4 [json_name = "mid"];
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(FxRate, _impl_.mid_)}},
    // .google.protobuf.Timestamp as_of = 5 [json_name = "asOf"];
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(FxRate, _impl_.as_of_)}},
    // .ampy.common.v1.Meta meta = 6 [json_name = "meta"];
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(FxRate, _impl_.meta_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .ampy.fx.v1.Pair pair = 1 [json_name = "pair"];
    {PROTOBUF_FIELD_OFFSET(FxRate, _impl_.pair_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Decimal bid = 2 [json_name = "bid"];
    {PROTOBUF_FIELD_OFFSET(FxRate, _impl_.bid_), _Internal::kHasBitsOffset + 1, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Decimal ask = 3 [json_name = "ask"];
    {PROTOBUF_FIELD_OFFSET(FxRate, _impl_.ask_), _Internal::kHasBitsOffset + 2, 2, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Decimal mid = 4 [json_name = "mid"];
    {PROTOBUF_FIELD_OFFSET(FxRate, _impl_.mid_), _Internal::kHasBitsOffset + 3, 3, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp as_of = 5 [json_name = "asOf"];
    {PROTOBUF_FIELD_OFFSET(FxRate, _impl_.as_of_), _Internal::kHasBitsOffset + 4, 4, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Meta meta = 6 [json_name = "meta"];
    {PROTOBUF_FIELD_OFFSET(FxRate, _impl_.meta_), _Internal::kHasBitsOffset + 5, 5, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::fx::v1::Pair>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Decimal>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Decimal>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Decimal>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Meta>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void FxRate::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.fx.v1.FxRate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      ABSL_DCHECK(_impl_.pair_ != nullptr);
      _impl_.pair_->Clear();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.bid_ != nullptr);
      _impl_.bid_->Clear();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(_impl_.ask_ != nullptr);
      _impl_.ask_->Clear();
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(_impl_.mid_ != nullptr);
      _impl_.mid_->Clear();
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      ABSL_DCHECK(_impl_.as_of_ != nullptr);
      _impl_.as_of_->Clear();
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      ABSL_DCHECK(_impl_.meta_ != nullptr);
      _impl_.meta_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL FxRate::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const FxRate& this_ = static_cast<const FxRate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL FxRate::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const FxRate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.fx.v1.FxRate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .ampy.fx.v1.Pair pair = 1 [json_name = "pair"];
  if ((cached_has_bits & 0x00000001U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.pair_, this_._impl_.pair_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Decimal bid = 2 [json_name = "bid"];
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.bid_, this_._impl_.bid_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Decimal ask = 3 [json_name = "ask"];
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.ask_, this_._impl_.ask_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Decimal mid = 4 [json_name = "mid"];
  if ((cached_has_bits & 0x00000008U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.mid_, this_._impl_.mid_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Timestamp as_of = 5 [json_name = "asOf"];
  if ((cached_has_bits & 0x00000010U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.as_of_, this_._impl_.as_of_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Meta meta = 6 [json_name = "meta"];
  if ((cached_has_bits & 0x00000020U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.meta_, this_._impl_.meta_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.fx.v1.FxRate)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t FxRate::ByteSizeLong(const MessageLite& base) {
  const FxRate& this_ = static_cast<const FxRate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t FxRate::ByteSizeLong() const {
  const FxRate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.fx.v1.FxRate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    // .ampy.fx.v1.Pair pair = 1 [json_name = "pair"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pair_);
    }
    // .ampy.common.v1.Decimal bid = 2 [json_name = "bid"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.bid_);
    }
    // .ampy.common.v1.Decimal ask = 3 [json_name = "ask"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ask_);
    }
    // .ampy.common.v1.Decimal mid = 4 [json_name = "mid"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mid_);
    }
    // .google.protobuf.Timestamp as_of = 5 [json_name = "asOf"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.as_of_);
    }
    // .ampy.common.v1.Meta meta = 6 [json_name = "meta"];
    if ((cached_has_bits & 0x00000020U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.meta_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void FxRate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FxRate*>(&to_msg);
  auto& from = static_cast<const FxRate&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.fx.v1.FxRate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      ABSL_DCHECK(from._impl_.pair_ != nullptr);
      if (_this->_impl_.pair_ == nullptr) {
        _this->_impl_.pair_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.pair_);
      } else {
        _this->_impl_.pair_->MergeFrom(*from._impl_.pair_);
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.bid_ != nullptr);
      if (_this->_impl_.bid_ == nullptr) {
        _this->_impl_.bid_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.bid_);
      } else {
        _this->_impl_.bid_->MergeFrom(*from._impl_.bid_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(from._impl_.ask_ != nullptr);
      if (_this->_impl_.ask_ == nullptr) {
        _this->_impl_.ask_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ask_);
      } else {
        _this->_impl_.ask_->MergeFrom(*from._impl_.ask_);
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(from._impl_.mid_ != nullptr);
      if (_this->_impl_.mid_ == nullptr) {
        _this->_impl_.mid_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mid_);
      } else {
        _this->_impl_.mid_->MergeFrom(*from._impl_.mid_);
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      ABSL_DCHECK(from._impl_.as_of_ != nullptr);
      if (_this->_impl_.as_of_ == nullptr) {
        _this->_impl_.as_of_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.as_of_);
      } else {
        _this->_impl_.as_of_->MergeFrom(*from._impl_.as_of_);
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      ABSL_DCHECK(from._impl_.meta_ != nullptr);
      if (_this->_impl_.meta_ == nullptr) {
        _this->_impl_.meta_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_);
      } else {
        _this->_impl_.meta_->MergeFrom(*from._impl_.meta_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FxRate::CopyFrom(const FxRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.fx.v1.FxRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FxRate::InternalSwap(FxRate* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FxRate, _impl_.meta_)
      + sizeof(FxRate::_impl_.meta_)
      - PROTOBUF_FIELD_OFFSET(FxRate, _impl_.pair_)>(
          reinterpret_cast<char*>(&_impl_.pair_),
          reinterpret_cast<char*>(&other->_impl_.pair_));
}

::google::protobuf::Metadata FxRate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FxRateBatch::_Internal {
 public:
};

FxRateBatch::FxRateBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FxRateBatch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.fx.v1.FxRateBatch)
}
PROTOBUF_NDEBUG_INLINE FxRateBatch::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::fx::v1::FxRateBatch& from_msg)
      : rates_{visibility, arena, from.rates_},
        _cached_size_{0} {}

FxRateBatch::FxRateBatch(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const FxRateBatch& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FxRateBatch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FxRateBatch* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:ampy.fx.v1.FxRateBatch)
}
PROTOBUF_NDEBUG_INLINE FxRateBatch::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : rates_{visibility, arena},
        _cached_size_{0} {}

inline void FxRateBatch::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FxRateBatch::~FxRateBatch() {
  // @@protoc_insertion_point(destructor:ampy.fx.v1.FxRateBatch)
  SharedDtor(*this);
}
inline void FxRateBatch::SharedDtor(MessageLite& self) {
  FxRateBatch& this_ = static_cast<FxRateBatch&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL FxRateBatch::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) FxRateBatch(arena);
}
constexpr auto FxRateBatch::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(FxRateBatch, _impl_.rates_) +
          decltype(FxRateBatch::_impl_.rates_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(FxRateBatch), alignof(FxRateBatch), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&FxRateBatch::PlacementNew_,
                                 sizeof(FxRateBatch),
                                 alignof(FxRateBatch));
  }
}
constexpr auto FxRateBatch::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_FxRateBatch_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &FxRateBatch::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<FxRateBatch>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &FxRateBatch::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<FxRateBatch>(), &FxRateBatch::ByteSizeLong,
              &FxRateBatch::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(FxRateBatch, _impl_._cached_size_),
          false,
      },
      &FxRateBatch::kDescriptorMethods,
      &descriptor_table_ampy_2ffx_2fv1_2ffx_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull FxRateBatch_class_data_ =
        FxRateBatch::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
FxRateBatch::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&FxRateBatch_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(FxRateBatch_class_data_.tc_table);
  return FxRateBatch_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
FxRateBatch::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    FxRateBatch_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::fx::v1::FxRateBatch>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .ampy.fx.v1.FxRate rates = 1 [json_name = "rates"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FxRateBatch, _impl_.rates_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .ampy.fx.v1.FxRate rates = 1 [json_name = "rates"];
    {PROTOBUF_FIELD_OFFSET(FxRateBatch, _impl_.rates_), 0, 0, (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::fx::v1::FxRate>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void FxRateBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.fx.v1.FxRateBatch)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rates_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL FxRateBatch::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const FxRateBatch& this_ = static_cast<const FxRateBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL FxRateBatch::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const FxRateBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.fx.v1.FxRateBatch)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .ampy.fx.v1.FxRate rates = 1 [json_name = "rates"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_rates_size());
       i < n; i++) {
    const auto& repfield = this_._internal_rates().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.fx.v1.FxRateBatch)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t FxRateBatch::ByteSizeLong(const MessageLite& base) {
  const FxRateBatch& this_ = static_cast<const FxRateBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t FxRateBatch::ByteSizeLong() const {
  const FxRateBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.fx.v1.FxRateBatch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .ampy.fx.v1.FxRate rates = 1 [json_name = "rates"];
    {
      total_size += 1UL * this_._internal_rates_size();
      for (const auto& msg : this_._internal_rates()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void FxRateBatch::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FxRateBatch*>(&to_msg);
  auto& from = static_cast<const FxRateBatch&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.fx.v1.FxRateBatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rates()->MergeFrom(
      from._internal_rates());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FxRateBatch::CopyFrom(const FxRateBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.fx.v1.FxRateBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FxRateBatch::InternalSwap(FxRateBatch* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rates_.InternalSwap(&other->_impl_.rates_);
}

::google::protobuf::Metadata FxRateBatch::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace fx
}  // namespace ampy
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_ampy_2ffx_2fv1_2ffx_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
