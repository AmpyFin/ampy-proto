// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: ampy/signals/v1/signals.proto

package signalsv1

import (
	v1 "github.com/AmpyFin/ampy-proto/v2/gen/go/ampy/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Security    *v1.SecurityId         `protobuf:"bytes,1,opt,name=security,proto3" json:"security,omitempty"`
	Type        v1.SignalType          `protobuf:"varint,2,opt,name=type,proto3,enum=ampy.common.v1.SignalType" json:"type,omitempty"`
	ModelId     string                 `protobuf:"bytes,3,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"` // e.g., "hyper@2025-09-05"
	Horizon     string                 `protobuf:"bytes,4,opt,name=horizon,proto3" json:"horizon,omitempty"`                // e.g., "5d"
	GeneratedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=generated_at,json=generatedAt,proto3" json:"generated_at,omitempty"`
	ExpiresAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Payload
	//
	// Types that are assignable to Value:
	//
	//	*Signal_Score
	//	*Signal_Action
	Value isSignal_Value `protobuf_oneof:"value"`
	Meta  *v1.Meta       `protobuf:"bytes,9,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *Signal) Reset() {
	*x = Signal{}
	mi := &file_ampy_signals_v1_signals_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_signals_v1_signals_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_ampy_signals_v1_signals_proto_rawDescGZIP(), []int{0}
}

func (x *Signal) GetSecurity() *v1.SecurityId {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *Signal) GetType() v1.SignalType {
	if x != nil {
		return x.Type
	}
	return v1.SignalType(0)
}

func (x *Signal) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *Signal) GetHorizon() string {
	if x != nil {
		return x.Horizon
	}
	return ""
}

func (x *Signal) GetGeneratedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.GeneratedAt
	}
	return nil
}

func (x *Signal) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (m *Signal) GetValue() isSignal_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Signal) GetScore() *v1.Decimal {
	if x, ok := x.GetValue().(*Signal_Score); ok {
		return x.Score
	}
	return nil
}

func (x *Signal) GetAction() v1.ActionType {
	if x, ok := x.GetValue().(*Signal_Action); ok {
		return x.Action
	}
	return v1.ActionType(0)
}

func (x *Signal) GetMeta() *v1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type isSignal_Value interface {
	isSignal_Value()
}

type Signal_Score struct {
	Score *v1.Decimal `protobuf:"bytes,7,opt,name=score,proto3,oneof"` // type = ALPHA
}

type Signal_Action struct {
	Action v1.ActionType `protobuf:"varint,8,opt,name=action,proto3,enum=ampy.common.v1.ActionType,oneof"` // type = ACTION
}

func (*Signal_Score) isSignal_Value() {}

func (*Signal_Action) isSignal_Value() {}

type SignalBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signals []*Signal `protobuf:"bytes,1,rep,name=signals,proto3" json:"signals,omitempty"`
}

func (x *SignalBatch) Reset() {
	*x = SignalBatch{}
	mi := &file_ampy_signals_v1_signals_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalBatch) ProtoMessage() {}

func (x *SignalBatch) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_signals_v1_signals_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalBatch.ProtoReflect.Descriptor instead.
func (*SignalBatch) Descriptor() ([]byte, []int) {
	return file_ampy_signals_v1_signals_proto_rawDescGZIP(), []int{1}
}

func (x *SignalBatch) GetSignals() []*Signal {
	if x != nil {
		return x.Signals
	}
	return nil
}

var File_ampy_signals_v1_signals_proto protoreflect.FileDescriptor

var file_ampy_signals_v1_signals_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x6d, 0x70, 0x79, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x61, 0x6d, 0x70, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9,
	0x03, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d,
	0x70, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74,
	0x12, 0x2f, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x40, 0x0a, 0x0b, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6d, 0x70,
	0x79, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x42, 0xc4, 0x01, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x41, 0x6d, 0x70, 0x79, 0x46, 0x69, 0x6e, 0x2f, 0x61, 0x6d, 0x70, 0x79, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x6d,
	0x70, 0x79, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x53, 0x58, 0xaa, 0x02, 0x0f,
	0x41, 0x6d, 0x70, 0x79, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x0f, 0x41, 0x6d, 0x70, 0x79, 0x5c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x1b, 0x41, 0x6d, 0x70, 0x79, 0x5c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x11, 0x41, 0x6d, 0x70, 0x79, 0x3a, 0x3a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ampy_signals_v1_signals_proto_rawDescOnce sync.Once
	file_ampy_signals_v1_signals_proto_rawDescData = file_ampy_signals_v1_signals_proto_rawDesc
)

func file_ampy_signals_v1_signals_proto_rawDescGZIP() []byte {
	file_ampy_signals_v1_signals_proto_rawDescOnce.Do(func() {
		file_ampy_signals_v1_signals_proto_rawDescData = protoimpl.X.CompressGZIP(file_ampy_signals_v1_signals_proto_rawDescData)
	})
	return file_ampy_signals_v1_signals_proto_rawDescData
}

var file_ampy_signals_v1_signals_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ampy_signals_v1_signals_proto_goTypes = []any{
	(*Signal)(nil),                // 0: ampy.signals.v1.Signal
	(*SignalBatch)(nil),           // 1: ampy.signals.v1.SignalBatch
	(*v1.SecurityId)(nil),         // 2: ampy.common.v1.SecurityId
	(v1.SignalType)(0),            // 3: ampy.common.v1.SignalType
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*v1.Decimal)(nil),            // 5: ampy.common.v1.Decimal
	(v1.ActionType)(0),            // 6: ampy.common.v1.ActionType
	(*v1.Meta)(nil),               // 7: ampy.common.v1.Meta
}
var file_ampy_signals_v1_signals_proto_depIdxs = []int32{
	2, // 0: ampy.signals.v1.Signal.security:type_name -> ampy.common.v1.SecurityId
	3, // 1: ampy.signals.v1.Signal.type:type_name -> ampy.common.v1.SignalType
	4, // 2: ampy.signals.v1.Signal.generated_at:type_name -> google.protobuf.Timestamp
	4, // 3: ampy.signals.v1.Signal.expires_at:type_name -> google.protobuf.Timestamp
	5, // 4: ampy.signals.v1.Signal.score:type_name -> ampy.common.v1.Decimal
	6, // 5: ampy.signals.v1.Signal.action:type_name -> ampy.common.v1.ActionType
	7, // 6: ampy.signals.v1.Signal.meta:type_name -> ampy.common.v1.Meta
	0, // 7: ampy.signals.v1.SignalBatch.signals:type_name -> ampy.signals.v1.Signal
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_ampy_signals_v1_signals_proto_init() }
func file_ampy_signals_v1_signals_proto_init() {
	if File_ampy_signals_v1_signals_proto != nil {
		return
	}
	file_ampy_signals_v1_signals_proto_msgTypes[0].OneofWrappers = []any{
		(*Signal_Score)(nil),
		(*Signal_Action)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ampy_signals_v1_signals_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ampy_signals_v1_signals_proto_goTypes,
		DependencyIndexes: file_ampy_signals_v1_signals_proto_depIdxs,
		MessageInfos:      file_ampy_signals_v1_signals_proto_msgTypes,
	}.Build()
	File_ampy_signals_v1_signals_proto = out.File
	file_ampy_signals_v1_signals_proto_rawDesc = nil
	file_ampy_signals_v1_signals_proto_goTypes = nil
	file_ampy_signals_v1_signals_proto_depIdxs = nil
}
