// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ampy/ticks/v1/ticks.proto
// Protobuf C++ Version: 6.32.0

#ifndef ampy_2fticks_2fv1_2fticks_2eproto_2epb_2eh
#define ampy_2fticks_2fv1_2fticks_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6032000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "ampy/common/v1/common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ampy_2fticks_2fv1_2fticks_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ampy_2fticks_2fv1_2fticks_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_ampy_2fticks_2fv1_2fticks_2eproto;
}  // extern "C"
namespace ampy {
namespace ticks {
namespace v1 {
class QuoteTick;
struct QuoteTickDefaultTypeInternal;
extern QuoteTickDefaultTypeInternal _QuoteTick_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull QuoteTick_class_data_;
class Tick;
struct TickDefaultTypeInternal;
extern TickDefaultTypeInternal _Tick_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Tick_class_data_;
class TickBatch;
struct TickBatchDefaultTypeInternal;
extern TickBatchDefaultTypeInternal _TickBatch_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TickBatch_class_data_;
class TradeTick;
struct TradeTickDefaultTypeInternal;
extern TradeTickDefaultTypeInternal _TradeTick_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TradeTick_class_data_;
}  // namespace v1
}  // namespace ticks
}  // namespace ampy
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ampy {
namespace ticks {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class TradeTick final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ampy.ticks.v1.TradeTick) */ {
 public:
  inline TradeTick() : TradeTick(nullptr) {}
  ~TradeTick() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TradeTick* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TradeTick));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TradeTick(::google::protobuf::internal::ConstantInitialized);

  inline TradeTick(const TradeTick& from) : TradeTick(nullptr, from) {}
  inline TradeTick(TradeTick&& from) noexcept
      : TradeTick(nullptr, ::std::move(from)) {}
  inline TradeTick& operator=(const TradeTick& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeTick& operator=(TradeTick&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradeTick& default_instance() {
    return *reinterpret_cast<const TradeTick*>(
        &_TradeTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TradeTick& a, TradeTick& b) { a.Swap(&b); }
  inline void Swap(TradeTick* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeTick* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradeTick* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TradeTick>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradeTick& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TradeTick& from) { TradeTick::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TradeTick* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ampy.ticks.v1.TradeTick"; }

 protected:
  explicit TradeTick(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TradeTick(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TradeTick& from);
  TradeTick(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TradeTick&& from) noexcept
      : TradeTick(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVenueFieldNumber = 4,
    kSecurityFieldNumber = 1,
    kPriceFieldNumber = 2,
    kEventTimeFieldNumber = 5,
    kIngestTimeFieldNumber = 6,
    kMetaFieldNumber = 7,
    kSizeFieldNumber = 3,
  };
  // string venue = 4 [json_name = "venue"];
  void clear_venue() ;
  const ::std::string& venue() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_venue(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_venue();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_venue();
  void set_allocated_venue(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_venue() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_venue(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_venue();

  public:
  // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
  bool has_security() const;
  void clear_security() ;
  const ::ampy::common::v1::SecurityId& security() const;
  [[nodiscard]] ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE release_security();
  ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL mutable_security();
  void set_allocated_security(::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_security(::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE unsafe_arena_release_security();

  private:
  const ::ampy::common::v1::SecurityId& _internal_security() const;
  ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL _internal_mutable_security();

  public:
  // .ampy.common.v1.Decimal price = 2 [json_name = "price"];
  bool has_price() const;
  void clear_price() ;
  const ::ampy::common::v1::Decimal& price() const;
  [[nodiscard]] ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE release_price();
  ::ampy::common::v1::Decimal* PROTOBUF_NONNULL mutable_price();
  void set_allocated_price(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_price(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE unsafe_arena_release_price();

  private:
  const ::ampy::common::v1::Decimal& _internal_price() const;
  ::ampy::common::v1::Decimal* PROTOBUF_NONNULL _internal_mutable_price();

  public:
  // .google.protobuf.Timestamp event_time = 5 [json_name = "eventTime"];
  bool has_event_time() const;
  void clear_event_time() ;
  const ::google::protobuf::Timestamp& event_time() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_event_time();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_event_time();
  void set_allocated_event_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_event_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_event_time();

  private:
  const ::google::protobuf::Timestamp& _internal_event_time() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_event_time();

  public:
  // .google.protobuf.Timestamp ingest_time = 6 [json_name = "ingestTime"];
  bool has_ingest_time() const;
  void clear_ingest_time() ;
  const ::google::protobuf::Timestamp& ingest_time() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_ingest_time();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_ingest_time();
  void set_allocated_ingest_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_ingest_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_ingest_time();

  private:
  const ::google::protobuf::Timestamp& _internal_ingest_time() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_ingest_time();

  public:
  // .ampy.common.v1.Meta meta = 7 [json_name = "meta"];
  bool has_meta() const;
  void clear_meta() ;
  const ::ampy::common::v1::Meta& meta() const;
  [[nodiscard]] ::ampy::common::v1::Meta* PROTOBUF_NULLABLE release_meta();
  ::ampy::common::v1::Meta* PROTOBUF_NONNULL mutable_meta();
  void set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::Meta* PROTOBUF_NULLABLE unsafe_arena_release_meta();

  private:
  const ::ampy::common::v1::Meta& _internal_meta() const;
  ::ampy::common::v1::Meta* PROTOBUF_NONNULL _internal_mutable_meta();

  public:
  // int64 size = 3 [json_name = "size"];
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ampy.ticks.v1.TradeTick)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7,
                                   5, 37,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TradeTick& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr venue_;
    ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE security_;
    ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE price_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE event_time_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE ingest_time_;
    ::ampy::common::v1::Meta* PROTOBUF_NULLABLE meta_;
    ::int64_t size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ampy_2fticks_2fv1_2fticks_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TradeTick_class_data_;
// -------------------------------------------------------------------

class QuoteTick final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ampy.ticks.v1.QuoteTick) */ {
 public:
  inline QuoteTick() : QuoteTick(nullptr) {}
  ~QuoteTick() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QuoteTick* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QuoteTick));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QuoteTick(::google::protobuf::internal::ConstantInitialized);

  inline QuoteTick(const QuoteTick& from) : QuoteTick(nullptr, from) {}
  inline QuoteTick(QuoteTick&& from) noexcept
      : QuoteTick(nullptr, ::std::move(from)) {}
  inline QuoteTick& operator=(const QuoteTick& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuoteTick& operator=(QuoteTick&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuoteTick& default_instance() {
    return *reinterpret_cast<const QuoteTick*>(
        &_QuoteTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(QuoteTick& a, QuoteTick& b) { a.Swap(&b); }
  inline void Swap(QuoteTick* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuoteTick* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuoteTick* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QuoteTick>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QuoteTick& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QuoteTick& from) { QuoteTick::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QuoteTick* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ampy.ticks.v1.QuoteTick"; }

 protected:
  explicit QuoteTick(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  QuoteTick(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const QuoteTick& from);
  QuoteTick(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, QuoteTick&& from) noexcept
      : QuoteTick(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVenueFieldNumber = 6,
    kSecurityFieldNumber = 1,
    kBidFieldNumber = 2,
    kAskFieldNumber = 4,
    kEventTimeFieldNumber = 7,
    kIngestTimeFieldNumber = 8,
    kMetaFieldNumber = 9,
    kBidSizeFieldNumber = 3,
    kAskSizeFieldNumber = 5,
  };
  // string venue = 6 [json_name = "venue"];
  void clear_venue() ;
  const ::std::string& venue() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_venue(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_venue();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_venue();
  void set_allocated_venue(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_venue() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_venue(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_venue();

  public:
  // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
  bool has_security() const;
  void clear_security() ;
  const ::ampy::common::v1::SecurityId& security() const;
  [[nodiscard]] ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE release_security();
  ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL mutable_security();
  void set_allocated_security(::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_security(::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE unsafe_arena_release_security();

  private:
  const ::ampy::common::v1::SecurityId& _internal_security() const;
  ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL _internal_mutable_security();

  public:
  // .ampy.common.v1.Decimal bid = 2 [json_name = "bid"];
  bool has_bid() const;
  void clear_bid() ;
  const ::ampy::common::v1::Decimal& bid() const;
  [[nodiscard]] ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE release_bid();
  ::ampy::common::v1::Decimal* PROTOBUF_NONNULL mutable_bid();
  void set_allocated_bid(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_bid(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE unsafe_arena_release_bid();

  private:
  const ::ampy::common::v1::Decimal& _internal_bid() const;
  ::ampy::common::v1::Decimal* PROTOBUF_NONNULL _internal_mutable_bid();

  public:
  // .ampy.common.v1.Decimal ask = 4 [json_name = "ask"];
  bool has_ask() const;
  void clear_ask() ;
  const ::ampy::common::v1::Decimal& ask() const;
  [[nodiscard]] ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE release_ask();
  ::ampy::common::v1::Decimal* PROTOBUF_NONNULL mutable_ask();
  void set_allocated_ask(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_ask(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE unsafe_arena_release_ask();

  private:
  const ::ampy::common::v1::Decimal& _internal_ask() const;
  ::ampy::common::v1::Decimal* PROTOBUF_NONNULL _internal_mutable_ask();

  public:
  // .google.protobuf.Timestamp event_time = 7 [json_name = "eventTime"];
  bool has_event_time() const;
  void clear_event_time() ;
  const ::google::protobuf::Timestamp& event_time() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_event_time();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_event_time();
  void set_allocated_event_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_event_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_event_time();

  private:
  const ::google::protobuf::Timestamp& _internal_event_time() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_event_time();

  public:
  // .google.protobuf.Timestamp ingest_time = 8 [json_name = "ingestTime"];
  bool has_ingest_time() const;
  void clear_ingest_time() ;
  const ::google::protobuf::Timestamp& ingest_time() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_ingest_time();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_ingest_time();
  void set_allocated_ingest_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_ingest_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_ingest_time();

  private:
  const ::google::protobuf::Timestamp& _internal_ingest_time() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_ingest_time();

  public:
  // .ampy.common.v1.Meta meta = 9 [json_name = "meta"];
  bool has_meta() const;
  void clear_meta() ;
  const ::ampy::common::v1::Meta& meta() const;
  [[nodiscard]] ::ampy::common::v1::Meta* PROTOBUF_NULLABLE release_meta();
  ::ampy::common::v1::Meta* PROTOBUF_NONNULL mutable_meta();
  void set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::Meta* PROTOBUF_NULLABLE unsafe_arena_release_meta();

  private:
  const ::ampy::common::v1::Meta& _internal_meta() const;
  ::ampy::common::v1::Meta* PROTOBUF_NONNULL _internal_mutable_meta();

  public:
  // int64 bid_size = 3 [json_name = "bidSize"];
  void clear_bid_size() ;
  ::int64_t bid_size() const;
  void set_bid_size(::int64_t value);

  private:
  ::int64_t _internal_bid_size() const;
  void _internal_set_bid_size(::int64_t value);

  public:
  // int64 ask_size = 5 [json_name = "askSize"];
  void clear_ask_size() ;
  ::int64_t ask_size() const;
  void set_ask_size(::int64_t value);

  private:
  ::int64_t _internal_ask_size() const;
  void _internal_set_ask_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ampy.ticks.v1.QuoteTick)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9,
                                   6, 45,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const QuoteTick& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr venue_;
    ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE security_;
    ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE bid_;
    ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE ask_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE event_time_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE ingest_time_;
    ::ampy::common::v1::Meta* PROTOBUF_NULLABLE meta_;
    ::int64_t bid_size_;
    ::int64_t ask_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ampy_2fticks_2fv1_2fticks_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull QuoteTick_class_data_;
// -------------------------------------------------------------------

class Tick final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ampy.ticks.v1.Tick) */ {
 public:
  inline Tick() : Tick(nullptr) {}
  ~Tick() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Tick* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Tick));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Tick(::google::protobuf::internal::ConstantInitialized);

  inline Tick(const Tick& from) : Tick(nullptr, from) {}
  inline Tick(Tick&& from) noexcept
      : Tick(nullptr, ::std::move(from)) {}
  inline Tick& operator=(const Tick& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tick& operator=(Tick&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tick& default_instance() {
    return *reinterpret_cast<const Tick*>(
        &_Tick_default_instance_);
  }
  enum KindCase {
    kTrade = 1,
    kQuote = 2,
    KIND_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Tick& a, Tick& b) { a.Swap(&b); }
  inline void Swap(Tick* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tick* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tick* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Tick>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Tick& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Tick& from) { Tick::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Tick* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ampy.ticks.v1.Tick"; }

 protected:
  explicit Tick(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Tick(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Tick& from);
  Tick(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Tick&& from) noexcept
      : Tick(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTradeFieldNumber = 1,
    kQuoteFieldNumber = 2,
  };
  // .ampy.ticks.v1.TradeTick trade = 1 [json_name = "trade"];
  bool has_trade() const;
  private:
  bool _internal_has_trade() const;

  public:
  void clear_trade() ;
  const ::ampy::ticks::v1::TradeTick& trade() const;
  [[nodiscard]] ::ampy::ticks::v1::TradeTick* PROTOBUF_NULLABLE release_trade();
  ::ampy::ticks::v1::TradeTick* PROTOBUF_NONNULL mutable_trade();
  void set_allocated_trade(::ampy::ticks::v1::TradeTick* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_trade(::ampy::ticks::v1::TradeTick* PROTOBUF_NULLABLE value);
  ::ampy::ticks::v1::TradeTick* PROTOBUF_NULLABLE unsafe_arena_release_trade();

  private:
  const ::ampy::ticks::v1::TradeTick& _internal_trade() const;
  ::ampy::ticks::v1::TradeTick* PROTOBUF_NONNULL _internal_mutable_trade();

  public:
  // .ampy.ticks.v1.QuoteTick quote = 2 [json_name = "quote"];
  bool has_quote() const;
  private:
  bool _internal_has_quote() const;

  public:
  void clear_quote() ;
  const ::ampy::ticks::v1::QuoteTick& quote() const;
  [[nodiscard]] ::ampy::ticks::v1::QuoteTick* PROTOBUF_NULLABLE release_quote();
  ::ampy::ticks::v1::QuoteTick* PROTOBUF_NONNULL mutable_quote();
  void set_allocated_quote(::ampy::ticks::v1::QuoteTick* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_quote(::ampy::ticks::v1::QuoteTick* PROTOBUF_NULLABLE value);
  ::ampy::ticks::v1::QuoteTick* PROTOBUF_NULLABLE unsafe_arena_release_quote();

  private:
  const ::ampy::ticks::v1::QuoteTick& _internal_quote() const;
  ::ampy::ticks::v1::QuoteTick* PROTOBUF_NONNULL _internal_mutable_quote();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:ampy.ticks.v1.Tick)
 private:
  class _Internal;
  void set_has_trade();
  void set_has_quote();
  inline bool has_kind() const;
  inline void clear_has_kind();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Tick& from_msg);
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::ampy::ticks::v1::TradeTick* PROTOBUF_NULLABLE trade_;
      ::ampy::ticks::v1::QuoteTick* PROTOBUF_NULLABLE quote_;
    } kind_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ampy_2fticks_2fv1_2fticks_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Tick_class_data_;
// -------------------------------------------------------------------

class TickBatch final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ampy.ticks.v1.TickBatch) */ {
 public:
  inline TickBatch() : TickBatch(nullptr) {}
  ~TickBatch() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TickBatch* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TickBatch));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TickBatch(::google::protobuf::internal::ConstantInitialized);

  inline TickBatch(const TickBatch& from) : TickBatch(nullptr, from) {}
  inline TickBatch(TickBatch&& from) noexcept
      : TickBatch(nullptr, ::std::move(from)) {}
  inline TickBatch& operator=(const TickBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickBatch& operator=(TickBatch&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TickBatch& default_instance() {
    return *reinterpret_cast<const TickBatch*>(
        &_TickBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(TickBatch& a, TickBatch& b) { a.Swap(&b); }
  inline void Swap(TickBatch* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TickBatch* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TickBatch* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TickBatch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TickBatch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TickBatch& from) { TickBatch::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TickBatch* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ampy.ticks.v1.TickBatch"; }

 protected:
  explicit TickBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TickBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TickBatch& from);
  TickBatch(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TickBatch&& from) noexcept
      : TickBatch(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTicksFieldNumber = 1,
  };
  // repeated .ampy.ticks.v1.Tick ticks = 1 [json_name = "ticks"];
  int ticks_size() const;
  private:
  int _internal_ticks_size() const;

  public:
  void clear_ticks() ;
  ::ampy::ticks::v1::Tick* PROTOBUF_NONNULL mutable_ticks(int index);
  ::google::protobuf::RepeatedPtrField<::ampy::ticks::v1::Tick>* PROTOBUF_NONNULL mutable_ticks();

  private:
  const ::google::protobuf::RepeatedPtrField<::ampy::ticks::v1::Tick>& _internal_ticks() const;
  ::google::protobuf::RepeatedPtrField<::ampy::ticks::v1::Tick>* PROTOBUF_NONNULL _internal_mutable_ticks();
  public:
  const ::ampy::ticks::v1::Tick& ticks(int index) const;
  ::ampy::ticks::v1::Tick* PROTOBUF_NONNULL add_ticks();
  const ::google::protobuf::RepeatedPtrField<::ampy::ticks::v1::Tick>& ticks() const;
  // @@protoc_insertion_point(class_scope:ampy.ticks.v1.TickBatch)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TickBatch& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ampy::ticks::v1::Tick > ticks_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ampy_2fticks_2fv1_2fticks_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TickBatch_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TradeTick

// .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
inline bool TradeTick::has_security() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.security_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::SecurityId& TradeTick::_internal_security() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::SecurityId* p = _impl_.security_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::SecurityId&>(::ampy::common::v1::_SecurityId_default_instance_);
}
inline const ::ampy::common::v1::SecurityId& TradeTick::security() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.TradeTick.security)
  return _internal_security();
}
inline void TradeTick::unsafe_arena_set_allocated_security(
    ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.security_);
  }
  _impl_.security_ = reinterpret_cast<::ampy::common::v1::SecurityId*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.ticks.v1.TradeTick.security)
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE TradeTick::release_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::ampy::common::v1::SecurityId* released = _impl_.security_;
  _impl_.security_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE TradeTick::unsafe_arena_release_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.TradeTick.security)

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::ampy::common::v1::SecurityId* temp = _impl_.security_;
  _impl_.security_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL TradeTick::_internal_mutable_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.security_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::SecurityId>(GetArena());
    _impl_.security_ = reinterpret_cast<::ampy::common::v1::SecurityId*>(p);
  }
  return _impl_.security_;
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL TradeTick::mutable_security()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002U;
  ::ampy::common::v1::SecurityId* _msg = _internal_mutable_security();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.TradeTick.security)
  return _msg;
}
inline void TradeTick::set_allocated_security(::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.security_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }

  _impl_.security_ = reinterpret_cast<::ampy::common::v1::SecurityId*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.TradeTick.security)
}

// .ampy.common.v1.Decimal price = 2 [json_name = "price"];
inline bool TradeTick::has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::Decimal& TradeTick::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::Decimal* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::Decimal&>(::ampy::common::v1::_Decimal_default_instance_);
}
inline const ::ampy::common::v1::Decimal& TradeTick::price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.TradeTick.price)
  return _internal_price();
}
inline void TradeTick::unsafe_arena_set_allocated_price(
    ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = reinterpret_cast<::ampy::common::v1::Decimal*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.ticks.v1.TradeTick.price)
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE TradeTick::release_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004U;
  ::ampy::common::v1::Decimal* released = _impl_.price_;
  _impl_.price_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE TradeTick::unsafe_arena_release_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.TradeTick.price)

  _impl_._has_bits_[0] &= ~0x00000004U;
  ::ampy::common::v1::Decimal* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NONNULL TradeTick::_internal_mutable_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.price_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::Decimal>(GetArena());
    _impl_.price_ = reinterpret_cast<::ampy::common::v1::Decimal*>(p);
  }
  return _impl_.price_;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NONNULL TradeTick::mutable_price()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004U;
  ::ampy::common::v1::Decimal* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.TradeTick.price)
  return _msg;
}
inline void TradeTick::set_allocated_price(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }

  _impl_.price_ = reinterpret_cast<::ampy::common::v1::Decimal*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.TradeTick.price)
}

// int64 size = 3 [json_name = "size"];
inline void TradeTick::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040U;
}
inline ::int64_t TradeTick::size() const {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.TradeTick.size)
  return _internal_size();
}
inline void TradeTick::set_size(::int64_t value) {
  _internal_set_size(value);
  _impl_._has_bits_[0] |= 0x00000040U;
  // @@protoc_insertion_point(field_set:ampy.ticks.v1.TradeTick.size)
}
inline ::int64_t TradeTick::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void TradeTick::_internal_set_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// string venue = 4 [json_name = "venue"];
inline void TradeTick::clear_venue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.venue_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& TradeTick::venue() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.TradeTick.venue)
  return _internal_venue();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TradeTick::set_venue(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.venue_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ampy.ticks.v1.TradeTick.venue)
}
inline ::std::string* PROTOBUF_NONNULL TradeTick::mutable_venue()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_venue();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.TradeTick.venue)
  return _s;
}
inline const ::std::string& TradeTick::_internal_venue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.venue_.Get();
}
inline void TradeTick::_internal_set_venue(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.venue_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TradeTick::_internal_mutable_venue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.venue_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TradeTick::release_venue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.TradeTick.venue)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.venue_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.venue_.Set("", GetArena());
  }
  return released;
}
inline void TradeTick::set_allocated_venue(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.venue_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.venue_.IsDefault()) {
    _impl_.venue_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.TradeTick.venue)
}

// .google.protobuf.Timestamp event_time = 5 [json_name = "eventTime"];
inline bool TradeTick::has_event_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.event_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradeTick::_internal_event_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.event_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradeTick::event_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.TradeTick.event_time)
  return _internal_event_time();
}
inline void TradeTick::unsafe_arena_set_allocated_event_time(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.event_time_);
  }
  _impl_.event_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.ticks.v1.TradeTick.event_time)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE TradeTick::release_event_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008U;
  ::google::protobuf::Timestamp* released = _impl_.event_time_;
  _impl_.event_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE TradeTick::unsafe_arena_release_event_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.TradeTick.event_time)

  _impl_._has_bits_[0] &= ~0x00000008U;
  ::google::protobuf::Timestamp* temp = _impl_.event_time_;
  _impl_.event_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL TradeTick::_internal_mutable_event_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.event_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.event_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.event_time_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL TradeTick::mutable_event_time()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008U;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_event_time();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.TradeTick.event_time)
  return _msg;
}
inline void TradeTick::set_allocated_event_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.event_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008U;
  }

  _impl_.event_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.TradeTick.event_time)
}

// .google.protobuf.Timestamp ingest_time = 6 [json_name = "ingestTime"];
inline bool TradeTick::has_ingest_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ingest_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradeTick::_internal_ingest_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.ingest_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradeTick::ingest_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.TradeTick.ingest_time)
  return _internal_ingest_time();
}
inline void TradeTick::unsafe_arena_set_allocated_ingest_time(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ingest_time_);
  }
  _impl_.ingest_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.ticks.v1.TradeTick.ingest_time)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE TradeTick::release_ingest_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010U;
  ::google::protobuf::Timestamp* released = _impl_.ingest_time_;
  _impl_.ingest_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE TradeTick::unsafe_arena_release_ingest_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.TradeTick.ingest_time)

  _impl_._has_bits_[0] &= ~0x00000010U;
  ::google::protobuf::Timestamp* temp = _impl_.ingest_time_;
  _impl_.ingest_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL TradeTick::_internal_mutable_ingest_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ingest_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.ingest_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.ingest_time_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL TradeTick::mutable_ingest_time()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010U;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_ingest_time();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.TradeTick.ingest_time)
  return _msg;
}
inline void TradeTick::set_allocated_ingest_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ingest_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010U;
  }

  _impl_.ingest_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.TradeTick.ingest_time)
}

// .ampy.common.v1.Meta meta = 7 [json_name = "meta"];
inline bool TradeTick::has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::Meta& TradeTick::_internal_meta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::Meta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::Meta&>(::ampy::common::v1::_Meta_default_instance_);
}
inline const ::ampy::common::v1::Meta& TradeTick::meta() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.TradeTick.meta)
  return _internal_meta();
}
inline void TradeTick::unsafe_arena_set_allocated_meta(
    ::ampy::common::v1::Meta* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.ticks.v1.TradeTick.meta)
}
inline ::ampy::common::v1::Meta* PROTOBUF_NULLABLE TradeTick::release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020U;
  ::ampy::common::v1::Meta* released = _impl_.meta_;
  _impl_.meta_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NULLABLE TradeTick::unsafe_arena_release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.TradeTick.meta)

  _impl_._has_bits_[0] &= ~0x00000020U;
  ::ampy::common::v1::Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NONNULL TradeTick::_internal_mutable_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::Meta>(GetArena());
    _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(p);
  }
  return _impl_.meta_;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NONNULL TradeTick::mutable_meta()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020U;
  ::ampy::common::v1::Meta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.TradeTick.meta)
  return _msg;
}
inline void TradeTick::set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020U;
  }

  _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.TradeTick.meta)
}

// -------------------------------------------------------------------

// QuoteTick

// .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
inline bool QuoteTick::has_security() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.security_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::SecurityId& QuoteTick::_internal_security() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::SecurityId* p = _impl_.security_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::SecurityId&>(::ampy::common::v1::_SecurityId_default_instance_);
}
inline const ::ampy::common::v1::SecurityId& QuoteTick::security() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.QuoteTick.security)
  return _internal_security();
}
inline void QuoteTick::unsafe_arena_set_allocated_security(
    ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.security_);
  }
  _impl_.security_ = reinterpret_cast<::ampy::common::v1::SecurityId*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.ticks.v1.QuoteTick.security)
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE QuoteTick::release_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::ampy::common::v1::SecurityId* released = _impl_.security_;
  _impl_.security_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE QuoteTick::unsafe_arena_release_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.QuoteTick.security)

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::ampy::common::v1::SecurityId* temp = _impl_.security_;
  _impl_.security_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL QuoteTick::_internal_mutable_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.security_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::SecurityId>(GetArena());
    _impl_.security_ = reinterpret_cast<::ampy::common::v1::SecurityId*>(p);
  }
  return _impl_.security_;
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL QuoteTick::mutable_security()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002U;
  ::ampy::common::v1::SecurityId* _msg = _internal_mutable_security();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.QuoteTick.security)
  return _msg;
}
inline void QuoteTick::set_allocated_security(::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.security_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }

  _impl_.security_ = reinterpret_cast<::ampy::common::v1::SecurityId*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.QuoteTick.security)
}

// .ampy.common.v1.Decimal bid = 2 [json_name = "bid"];
inline bool QuoteTick::has_bid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bid_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::Decimal& QuoteTick::_internal_bid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::Decimal* p = _impl_.bid_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::Decimal&>(::ampy::common::v1::_Decimal_default_instance_);
}
inline const ::ampy::common::v1::Decimal& QuoteTick::bid() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.QuoteTick.bid)
  return _internal_bid();
}
inline void QuoteTick::unsafe_arena_set_allocated_bid(
    ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bid_);
  }
  _impl_.bid_ = reinterpret_cast<::ampy::common::v1::Decimal*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.ticks.v1.QuoteTick.bid)
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE QuoteTick::release_bid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004U;
  ::ampy::common::v1::Decimal* released = _impl_.bid_;
  _impl_.bid_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE QuoteTick::unsafe_arena_release_bid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.QuoteTick.bid)

  _impl_._has_bits_[0] &= ~0x00000004U;
  ::ampy::common::v1::Decimal* temp = _impl_.bid_;
  _impl_.bid_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NONNULL QuoteTick::_internal_mutable_bid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bid_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::Decimal>(GetArena());
    _impl_.bid_ = reinterpret_cast<::ampy::common::v1::Decimal*>(p);
  }
  return _impl_.bid_;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NONNULL QuoteTick::mutable_bid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004U;
  ::ampy::common::v1::Decimal* _msg = _internal_mutable_bid();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.QuoteTick.bid)
  return _msg;
}
inline void QuoteTick::set_allocated_bid(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bid_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }

  _impl_.bid_ = reinterpret_cast<::ampy::common::v1::Decimal*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.QuoteTick.bid)
}

// int64 bid_size = 3 [json_name = "bidSize"];
inline void QuoteTick::clear_bid_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bid_size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080U;
}
inline ::int64_t QuoteTick::bid_size() const {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.QuoteTick.bid_size)
  return _internal_bid_size();
}
inline void QuoteTick::set_bid_size(::int64_t value) {
  _internal_set_bid_size(value);
  _impl_._has_bits_[0] |= 0x00000080U;
  // @@protoc_insertion_point(field_set:ampy.ticks.v1.QuoteTick.bid_size)
}
inline ::int64_t QuoteTick::_internal_bid_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bid_size_;
}
inline void QuoteTick::_internal_set_bid_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bid_size_ = value;
}

// .ampy.common.v1.Decimal ask = 4 [json_name = "ask"];
inline bool QuoteTick::has_ask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ask_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::Decimal& QuoteTick::_internal_ask() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::Decimal* p = _impl_.ask_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::Decimal&>(::ampy::common::v1::_Decimal_default_instance_);
}
inline const ::ampy::common::v1::Decimal& QuoteTick::ask() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.QuoteTick.ask)
  return _internal_ask();
}
inline void QuoteTick::unsafe_arena_set_allocated_ask(
    ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ask_);
  }
  _impl_.ask_ = reinterpret_cast<::ampy::common::v1::Decimal*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.ticks.v1.QuoteTick.ask)
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE QuoteTick::release_ask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008U;
  ::ampy::common::v1::Decimal* released = _impl_.ask_;
  _impl_.ask_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE QuoteTick::unsafe_arena_release_ask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.QuoteTick.ask)

  _impl_._has_bits_[0] &= ~0x00000008U;
  ::ampy::common::v1::Decimal* temp = _impl_.ask_;
  _impl_.ask_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NONNULL QuoteTick::_internal_mutable_ask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ask_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::Decimal>(GetArena());
    _impl_.ask_ = reinterpret_cast<::ampy::common::v1::Decimal*>(p);
  }
  return _impl_.ask_;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NONNULL QuoteTick::mutable_ask()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008U;
  ::ampy::common::v1::Decimal* _msg = _internal_mutable_ask();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.QuoteTick.ask)
  return _msg;
}
inline void QuoteTick::set_allocated_ask(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ask_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008U;
  }

  _impl_.ask_ = reinterpret_cast<::ampy::common::v1::Decimal*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.QuoteTick.ask)
}

// int64 ask_size = 5 [json_name = "askSize"];
inline void QuoteTick::clear_ask_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ask_size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100U;
}
inline ::int64_t QuoteTick::ask_size() const {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.QuoteTick.ask_size)
  return _internal_ask_size();
}
inline void QuoteTick::set_ask_size(::int64_t value) {
  _internal_set_ask_size(value);
  _impl_._has_bits_[0] |= 0x00000100U;
  // @@protoc_insertion_point(field_set:ampy.ticks.v1.QuoteTick.ask_size)
}
inline ::int64_t QuoteTick::_internal_ask_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ask_size_;
}
inline void QuoteTick::_internal_set_ask_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ask_size_ = value;
}

// string venue = 6 [json_name = "venue"];
inline void QuoteTick::clear_venue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.venue_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& QuoteTick::venue() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.QuoteTick.venue)
  return _internal_venue();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void QuoteTick::set_venue(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.venue_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ampy.ticks.v1.QuoteTick.venue)
}
inline ::std::string* PROTOBUF_NONNULL QuoteTick::mutable_venue()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_venue();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.QuoteTick.venue)
  return _s;
}
inline const ::std::string& QuoteTick::_internal_venue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.venue_.Get();
}
inline void QuoteTick::_internal_set_venue(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.venue_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL QuoteTick::_internal_mutable_venue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.venue_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE QuoteTick::release_venue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.QuoteTick.venue)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.venue_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.venue_.Set("", GetArena());
  }
  return released;
}
inline void QuoteTick::set_allocated_venue(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.venue_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.venue_.IsDefault()) {
    _impl_.venue_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.QuoteTick.venue)
}

// .google.protobuf.Timestamp event_time = 7 [json_name = "eventTime"];
inline bool QuoteTick::has_event_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.event_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& QuoteTick::_internal_event_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.event_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& QuoteTick::event_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.QuoteTick.event_time)
  return _internal_event_time();
}
inline void QuoteTick::unsafe_arena_set_allocated_event_time(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.event_time_);
  }
  _impl_.event_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.ticks.v1.QuoteTick.event_time)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE QuoteTick::release_event_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010U;
  ::google::protobuf::Timestamp* released = _impl_.event_time_;
  _impl_.event_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE QuoteTick::unsafe_arena_release_event_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.QuoteTick.event_time)

  _impl_._has_bits_[0] &= ~0x00000010U;
  ::google::protobuf::Timestamp* temp = _impl_.event_time_;
  _impl_.event_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL QuoteTick::_internal_mutable_event_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.event_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.event_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.event_time_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL QuoteTick::mutable_event_time()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010U;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_event_time();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.QuoteTick.event_time)
  return _msg;
}
inline void QuoteTick::set_allocated_event_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.event_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010U;
  }

  _impl_.event_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.QuoteTick.event_time)
}

// .google.protobuf.Timestamp ingest_time = 8 [json_name = "ingestTime"];
inline bool QuoteTick::has_ingest_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ingest_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& QuoteTick::_internal_ingest_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.ingest_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& QuoteTick::ingest_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.QuoteTick.ingest_time)
  return _internal_ingest_time();
}
inline void QuoteTick::unsafe_arena_set_allocated_ingest_time(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ingest_time_);
  }
  _impl_.ingest_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.ticks.v1.QuoteTick.ingest_time)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE QuoteTick::release_ingest_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020U;
  ::google::protobuf::Timestamp* released = _impl_.ingest_time_;
  _impl_.ingest_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE QuoteTick::unsafe_arena_release_ingest_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.QuoteTick.ingest_time)

  _impl_._has_bits_[0] &= ~0x00000020U;
  ::google::protobuf::Timestamp* temp = _impl_.ingest_time_;
  _impl_.ingest_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL QuoteTick::_internal_mutable_ingest_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ingest_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.ingest_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.ingest_time_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL QuoteTick::mutable_ingest_time()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020U;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_ingest_time();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.QuoteTick.ingest_time)
  return _msg;
}
inline void QuoteTick::set_allocated_ingest_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ingest_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020U;
  }

  _impl_.ingest_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.QuoteTick.ingest_time)
}

// .ampy.common.v1.Meta meta = 9 [json_name = "meta"];
inline bool QuoteTick::has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::Meta& QuoteTick::_internal_meta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::Meta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::Meta&>(::ampy::common::v1::_Meta_default_instance_);
}
inline const ::ampy::common::v1::Meta& QuoteTick::meta() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.QuoteTick.meta)
  return _internal_meta();
}
inline void QuoteTick::unsafe_arena_set_allocated_meta(
    ::ampy::common::v1::Meta* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.ticks.v1.QuoteTick.meta)
}
inline ::ampy::common::v1::Meta* PROTOBUF_NULLABLE QuoteTick::release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040U;
  ::ampy::common::v1::Meta* released = _impl_.meta_;
  _impl_.meta_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NULLABLE QuoteTick::unsafe_arena_release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.QuoteTick.meta)

  _impl_._has_bits_[0] &= ~0x00000040U;
  ::ampy::common::v1::Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NONNULL QuoteTick::_internal_mutable_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::Meta>(GetArena());
    _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(p);
  }
  return _impl_.meta_;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NONNULL QuoteTick::mutable_meta()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040U;
  ::ampy::common::v1::Meta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.QuoteTick.meta)
  return _msg;
}
inline void QuoteTick::set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040U;
  }

  _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.QuoteTick.meta)
}

// -------------------------------------------------------------------

// Tick

// .ampy.ticks.v1.TradeTick trade = 1 [json_name = "trade"];
inline bool Tick::has_trade() const {
  return kind_case() == kTrade;
}
inline bool Tick::_internal_has_trade() const {
  return kind_case() == kTrade;
}
inline void Tick::set_has_trade() {
  _impl_._oneof_case_[0] = kTrade;
}
inline void Tick::clear_trade() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kTrade) {
    if (GetArena() == nullptr) {
      delete _impl_.kind_.trade_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.trade_);
    }
    clear_has_kind();
  }
}
inline ::ampy::ticks::v1::TradeTick* PROTOBUF_NULLABLE Tick::release_trade() {
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.Tick.trade)
  if (kind_case() == kTrade) {
    clear_has_kind();
    auto* temp = _impl_.kind_.trade_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.trade_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ampy::ticks::v1::TradeTick& Tick::_internal_trade() const {
  return kind_case() == kTrade ? *_impl_.kind_.trade_ : reinterpret_cast<::ampy::ticks::v1::TradeTick&>(::ampy::ticks::v1::_TradeTick_default_instance_);
}
inline const ::ampy::ticks::v1::TradeTick& Tick::trade() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.Tick.trade)
  return _internal_trade();
}
inline ::ampy::ticks::v1::TradeTick* PROTOBUF_NULLABLE Tick::unsafe_arena_release_trade() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ampy.ticks.v1.Tick.trade)
  if (kind_case() == kTrade) {
    clear_has_kind();
    auto* temp = _impl_.kind_.trade_;
    _impl_.kind_.trade_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Tick::unsafe_arena_set_allocated_trade(
    ::ampy::ticks::v1::TradeTick* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_trade();
    _impl_.kind_.trade_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.ticks.v1.Tick.trade)
}
inline ::ampy::ticks::v1::TradeTick* PROTOBUF_NONNULL Tick::_internal_mutable_trade() {
  if (kind_case() != kTrade) {
    clear_kind();
    set_has_trade();
    _impl_.kind_.trade_ = 
        ::google::protobuf::Message::DefaultConstruct<::ampy::ticks::v1::TradeTick>(GetArena());
  }
  return _impl_.kind_.trade_;
}
inline ::ampy::ticks::v1::TradeTick* PROTOBUF_NONNULL Tick::mutable_trade()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ampy::ticks::v1::TradeTick* _msg = _internal_mutable_trade();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.Tick.trade)
  return _msg;
}

// .ampy.ticks.v1.QuoteTick quote = 2 [json_name = "quote"];
inline bool Tick::has_quote() const {
  return kind_case() == kQuote;
}
inline bool Tick::_internal_has_quote() const {
  return kind_case() == kQuote;
}
inline void Tick::set_has_quote() {
  _impl_._oneof_case_[0] = kQuote;
}
inline void Tick::clear_quote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kQuote) {
    if (GetArena() == nullptr) {
      delete _impl_.kind_.quote_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.quote_);
    }
    clear_has_kind();
  }
}
inline ::ampy::ticks::v1::QuoteTick* PROTOBUF_NULLABLE Tick::release_quote() {
  // @@protoc_insertion_point(field_release:ampy.ticks.v1.Tick.quote)
  if (kind_case() == kQuote) {
    clear_has_kind();
    auto* temp = _impl_.kind_.quote_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.quote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ampy::ticks::v1::QuoteTick& Tick::_internal_quote() const {
  return kind_case() == kQuote ? *_impl_.kind_.quote_ : reinterpret_cast<::ampy::ticks::v1::QuoteTick&>(::ampy::ticks::v1::_QuoteTick_default_instance_);
}
inline const ::ampy::ticks::v1::QuoteTick& Tick::quote() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.Tick.quote)
  return _internal_quote();
}
inline ::ampy::ticks::v1::QuoteTick* PROTOBUF_NULLABLE Tick::unsafe_arena_release_quote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ampy.ticks.v1.Tick.quote)
  if (kind_case() == kQuote) {
    clear_has_kind();
    auto* temp = _impl_.kind_.quote_;
    _impl_.kind_.quote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Tick::unsafe_arena_set_allocated_quote(
    ::ampy::ticks::v1::QuoteTick* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_quote();
    _impl_.kind_.quote_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.ticks.v1.Tick.quote)
}
inline ::ampy::ticks::v1::QuoteTick* PROTOBUF_NONNULL Tick::_internal_mutable_quote() {
  if (kind_case() != kQuote) {
    clear_kind();
    set_has_quote();
    _impl_.kind_.quote_ = 
        ::google::protobuf::Message::DefaultConstruct<::ampy::ticks::v1::QuoteTick>(GetArena());
  }
  return _impl_.kind_.quote_;
}
inline ::ampy::ticks::v1::QuoteTick* PROTOBUF_NONNULL Tick::mutable_quote()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ampy::ticks::v1::QuoteTick* _msg = _internal_mutable_quote();
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.Tick.quote)
  return _msg;
}

inline bool Tick::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Tick::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline Tick::KindCase Tick::kind_case() const {
  return Tick::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TickBatch

// repeated .ampy.ticks.v1.Tick ticks = 1 [json_name = "ticks"];
inline int TickBatch::_internal_ticks_size() const {
  return _internal_ticks().size();
}
inline int TickBatch::ticks_size() const {
  return _internal_ticks_size();
}
inline void TickBatch::clear_ticks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ticks_.Clear();
}
inline ::ampy::ticks::v1::Tick* PROTOBUF_NONNULL TickBatch::mutable_ticks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ampy.ticks.v1.TickBatch.ticks)
  return _internal_mutable_ticks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ampy::ticks::v1::Tick>* PROTOBUF_NONNULL TickBatch::mutable_ticks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ampy.ticks.v1.TickBatch.ticks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ticks();
}
inline const ::ampy::ticks::v1::Tick& TickBatch::ticks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.ticks.v1.TickBatch.ticks)
  return _internal_ticks().Get(index);
}
inline ::ampy::ticks::v1::Tick* PROTOBUF_NONNULL TickBatch::add_ticks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ampy::ticks::v1::Tick* _add = _internal_mutable_ticks()->Add();
  // @@protoc_insertion_point(field_add:ampy.ticks.v1.TickBatch.ticks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ampy::ticks::v1::Tick>& TickBatch::ticks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ampy.ticks.v1.TickBatch.ticks)
  return _internal_ticks();
}
inline const ::google::protobuf::RepeatedPtrField<::ampy::ticks::v1::Tick>&
TickBatch::_internal_ticks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ticks_;
}
inline ::google::protobuf::RepeatedPtrField<::ampy::ticks::v1::Tick>* PROTOBUF_NONNULL
TickBatch::_internal_mutable_ticks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ticks_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace ticks
}  // namespace ampy


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ampy_2fticks_2fv1_2fticks_2eproto_2epb_2eh
