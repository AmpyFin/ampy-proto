// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ampy/bars/v1/bars.proto
// Protobuf C++ Version: 6.32.0

#include "ampy/bars/v1/bars.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ampy {
namespace bars {
namespace v1 {

inline constexpr Bar::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        adjustment_policy_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        security_{nullptr},
        start_{nullptr},
        end_{nullptr},
        open_{nullptr},
        high_{nullptr},
        low_{nullptr},
        close_{nullptr},
        vwap_{nullptr},
        event_time_{nullptr},
        ingest_time_{nullptr},
        as_of_{nullptr},
        meta_{nullptr},
        volume_{::int64_t{0}},
        trade_count_{::int64_t{0}},
        adjusted_{false},
        adjustment_policy_{static_cast< ::ampy::common::v1::AdjustmentPolicy >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Bar::Bar(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Bar_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BarDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BarDefaultTypeInternal() {}
  union {
    Bar _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BarDefaultTypeInternal _Bar_default_instance_;

inline constexpr BarBatch::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : bars_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BarBatch::BarBatch(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(BarBatch_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BarBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BarBatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BarBatchDefaultTypeInternal() {}
  union {
    BarBatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BarBatchDefaultTypeInternal _BarBatch_default_instance_;
}  // namespace v1
}  // namespace bars
}  // namespace ampy
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_ampy_2fbars_2fv1_2fbars_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_ampy_2fbars_2fv1_2fbars_2eproto = nullptr;
const ::uint32_t
    TableStruct_ampy_2fbars_2fv1_2fbars_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_._has_bits_),
        20, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.security_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.start_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.end_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.open_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.high_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.low_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.close_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.vwap_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.volume_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.trade_count_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.adjusted_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.adjustment_policy_id_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.adjustment_policy_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.event_time_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.ingest_time_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.as_of_),
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::Bar, _impl_.meta_),
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        13,
        14,
        15,
        0,
        16,
        9,
        10,
        11,
        12,
        0x000, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::bars::v1::BarBatch, _impl_.bars_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::ampy::bars::v1::Bar)},
        {37, sizeof(::ampy::bars::v1::BarBatch)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::ampy::bars::v1::_Bar_default_instance_._instance,
    &::ampy::bars::v1::_BarBatch_default_instance_._instance,
};
const char descriptor_table_protodef_ampy_2fbars_2fv1_2fbars_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\027ampy/bars/v1/bars.proto\022\014ampy.bars.v1\032"
    "\037google/protobuf/timestamp.proto\032\033ampy/c"
    "ommon/v1/common.proto\"\247\006\n\003Bar\0226\n\010securit"
    "y\030\001 \001(\0132\032.ampy.common.v1.SecurityIdR\010sec"
    "urity\0220\n\005start\030\002 \001(\0132\032.google.protobuf.T"
    "imestampR\005start\022,\n\003end\030\003 \001(\0132\032.google.pr"
    "otobuf.TimestampR\003end\022+\n\004open\030\004 \001(\0132\027.am"
    "py.common.v1.DecimalR\004open\022+\n\004high\030\005 \001(\013"
    "2\027.ampy.common.v1.DecimalR\004high\022)\n\003low\030\006"
    " \001(\0132\027.ampy.common.v1.DecimalR\003low\022-\n\005cl"
    "ose\030\007 \001(\0132\027.ampy.common.v1.DecimalR\005clos"
    "e\022+\n\004vwap\030\010 \001(\0132\027.ampy.common.v1.Decimal"
    "R\004vwap\022\026\n\006volume\030\t \001(\003R\006volume\022\037\n\013trade_"
    "count\030\n \001(\003R\ntradeCount\022\032\n\010adjusted\030\013 \001("
    "\010R\010adjusted\0220\n\024adjustment_policy_id\030\014 \001("
    "\tR\022adjustmentPolicyId\022M\n\021adjustment_poli"
    "cy\030\021 \001(\0162 .ampy.common.v1.AdjustmentPoli"
    "cyR\020adjustmentPolicy\0229\n\nevent_time\030\r \001(\013"
    "2\032.google.protobuf.TimestampR\teventTime\022"
    ";\n\013ingest_time\030\016 \001(\0132\032.google.protobuf.T"
    "imestampR\ningestTime\022/\n\005as_of\030\017 \001(\0132\032.go"
    "ogle.protobuf.TimestampR\004asOf\022(\n\004meta\030\020 "
    "\001(\0132\024.ampy.common.v1.MetaR\004meta\"1\n\010BarBa"
    "tch\022%\n\004bars\030\001 \003(\0132\021.ampy.bars.v1.BarR\004ba"
    "rsB\255\001\n\020com.ampy.bars.v1B\tBarsProtoP\001Z<gi"
    "thub.com/yeonholee50/ampy-proto/gen/go/a"
    "mpy/bars/v1;barsv1\242\002\003ABX\252\002\014Ampy.Bars.V1\312"
    "\002\014Ampy\\Bars\\V1\342\002\030Ampy\\Bars\\V1\\GPBMetadat"
    "a\352\002\016Ampy::Bars::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_ampy_2fbars_2fv1_2fbars_2eproto_deps[2] = {
        &::descriptor_table_ampy_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_ampy_2fbars_2fv1_2fbars_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ampy_2fbars_2fv1_2fbars_2eproto = {
    false,
    false,
    1146,
    descriptor_table_protodef_ampy_2fbars_2fv1_2fbars_2eproto,
    "ampy/bars/v1/bars.proto",
    &descriptor_table_ampy_2fbars_2fv1_2fbars_2eproto_once,
    descriptor_table_ampy_2fbars_2fv1_2fbars_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_ampy_2fbars_2fv1_2fbars_2eproto::offsets,
    file_level_enum_descriptors_ampy_2fbars_2fv1_2fbars_2eproto,
    file_level_service_descriptors_ampy_2fbars_2fv1_2fbars_2eproto,
};
namespace ampy {
namespace bars {
namespace v1 {
// ===================================================================

class Bar::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Bar>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Bar, _impl_._has_bits_);
};

void Bar::clear_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.security_ != nullptr) _impl_.security_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
void Bar::clear_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_ != nullptr) _impl_.start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
void Bar::clear_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_ != nullptr) _impl_.end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008U;
}
void Bar::clear_open() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.open_ != nullptr) _impl_.open_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010U;
}
void Bar::clear_high() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.high_ != nullptr) _impl_.high_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020U;
}
void Bar::clear_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.low_ != nullptr) _impl_.low_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040U;
}
void Bar::clear_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.close_ != nullptr) _impl_.close_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080U;
}
void Bar::clear_vwap() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vwap_ != nullptr) _impl_.vwap_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100U;
}
void Bar::clear_event_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.event_time_ != nullptr) _impl_.event_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200U;
}
void Bar::clear_ingest_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ingest_time_ != nullptr) _impl_.ingest_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400U;
}
void Bar::clear_as_of() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.as_of_ != nullptr) _impl_.as_of_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800U;
}
void Bar::clear_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000U;
}
Bar::Bar(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Bar_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.bars.v1.Bar)
}
PROTOBUF_NDEBUG_INLINE Bar::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::bars::v1::Bar& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        adjustment_policy_id_(arena, from.adjustment_policy_id_) {}

Bar::Bar(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Bar& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Bar_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Bar* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.security_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.security_)
                : nullptr;
  _impl_.start_ = ((cached_has_bits & 0x00000004U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.start_)
                : nullptr;
  _impl_.end_ = ((cached_has_bits & 0x00000008U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.end_)
                : nullptr;
  _impl_.open_ = ((cached_has_bits & 0x00000010U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.open_)
                : nullptr;
  _impl_.high_ = ((cached_has_bits & 0x00000020U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.high_)
                : nullptr;
  _impl_.low_ = ((cached_has_bits & 0x00000040U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.low_)
                : nullptr;
  _impl_.close_ = ((cached_has_bits & 0x00000080U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.close_)
                : nullptr;
  _impl_.vwap_ = ((cached_has_bits & 0x00000100U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.vwap_)
                : nullptr;
  _impl_.event_time_ = ((cached_has_bits & 0x00000200U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.event_time_)
                : nullptr;
  _impl_.ingest_time_ = ((cached_has_bits & 0x00000400U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ingest_time_)
                : nullptr;
  _impl_.as_of_ = ((cached_has_bits & 0x00000800U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.as_of_)
                : nullptr;
  _impl_.meta_ = ((cached_has_bits & 0x00001000U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, volume_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, volume_),
           offsetof(Impl_, adjustment_policy_) -
               offsetof(Impl_, volume_) +
               sizeof(Impl_::adjustment_policy_));

  // @@protoc_insertion_point(copy_constructor:ampy.bars.v1.Bar)
}
PROTOBUF_NDEBUG_INLINE Bar::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        adjustment_policy_id_(arena) {}

inline void Bar::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, security_),
           0,
           offsetof(Impl_, adjustment_policy_) -
               offsetof(Impl_, security_) +
               sizeof(Impl_::adjustment_policy_));
}
Bar::~Bar() {
  // @@protoc_insertion_point(destructor:ampy.bars.v1.Bar)
  SharedDtor(*this);
}
inline void Bar::SharedDtor(MessageLite& self) {
  Bar& this_ = static_cast<Bar&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.adjustment_policy_id_.Destroy();
  delete this_._impl_.security_;
  delete this_._impl_.start_;
  delete this_._impl_.end_;
  delete this_._impl_.open_;
  delete this_._impl_.high_;
  delete this_._impl_.low_;
  delete this_._impl_.close_;
  delete this_._impl_.vwap_;
  delete this_._impl_.event_time_;
  delete this_._impl_.ingest_time_;
  delete this_._impl_.as_of_;
  delete this_._impl_.meta_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Bar::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Bar(arena);
}
constexpr auto Bar::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Bar),
                                            alignof(Bar));
}
constexpr auto Bar::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Bar_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Bar::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Bar>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Bar::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Bar>(), &Bar::ByteSizeLong,
              &Bar::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Bar, _impl_._cached_size_),
          false,
      },
      &Bar::kDescriptorMethods,
      &descriptor_table_ampy_2fbars_2fv1_2fbars_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Bar_class_data_ =
        Bar::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Bar::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Bar_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Bar_class_data_.tc_table);
  return Bar_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 17, 12, 61, 2>
Bar::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Bar, _impl_._has_bits_),
    0, // no _extensions_
    17, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836224,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    12,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Bar_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::bars::v1::Bar>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(Bar, _impl_.security_)}},
    // .google.protobuf.Timestamp start = 2 [json_name = "start"];
    {::_pbi::TcParser::FastMtS1,
     {18, 2, 1, PROTOBUF_FIELD_OFFSET(Bar, _impl_.start_)}},
    // .google.protobuf.Timestamp end = 3 [json_name = "end"];
    {::_pbi::TcParser::FastMtS1,
     {26, 3, 2, PROTOBUF_FIELD_OFFSET(Bar, _impl_.end_)}},
    // .ampy.common.v1.Decimal open = 4 [json_name = "open"];
    {::_pbi::TcParser::FastMtS1,
     {34, 4, 3, PROTOBUF_FIELD_OFFSET(Bar, _impl_.open_)}},
    // .ampy.common.v1.Decimal high = 5 [json_name = "high"];
    {::_pbi::TcParser::FastMtS1,
     {42, 5, 4, PROTOBUF_FIELD_OFFSET(Bar, _impl_.high_)}},
    // .ampy.common.v1.Decimal low = 6 [json_name = "low"];
    {::_pbi::TcParser::FastMtS1,
     {50, 6, 5, PROTOBUF_FIELD_OFFSET(Bar, _impl_.low_)}},
    // .ampy.common.v1.Decimal close = 7 [json_name = "close"];
    {::_pbi::TcParser::FastMtS1,
     {58, 7, 6, PROTOBUF_FIELD_OFFSET(Bar, _impl_.close_)}},
    // .ampy.common.v1.Decimal vwap = 8 [json_name = "vwap"];
    {::_pbi::TcParser::FastMtS1,
     {66, 8, 7, PROTOBUF_FIELD_OFFSET(Bar, _impl_.vwap_)}},
    // int64 volume = 9 [json_name = "volume"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Bar, _impl_.volume_), 13>(),
     {72, 13, 0, PROTOBUF_FIELD_OFFSET(Bar, _impl_.volume_)}},
    // int64 trade_count = 10 [json_name = "tradeCount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Bar, _impl_.trade_count_), 14>(),
     {80, 14, 0, PROTOBUF_FIELD_OFFSET(Bar, _impl_.trade_count_)}},
    // bool adjusted = 11 [json_name = "adjusted"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Bar, _impl_.adjusted_), 15>(),
     {88, 15, 0, PROTOBUF_FIELD_OFFSET(Bar, _impl_.adjusted_)}},
    // string adjustment_policy_id = 12 [json_name = "adjustmentPolicyId"];
    {::_pbi::TcParser::FastUS1,
     {98, 0, 0, PROTOBUF_FIELD_OFFSET(Bar, _impl_.adjustment_policy_id_)}},
    // .google.protobuf.Timestamp event_time = 13 [json_name = "eventTime"];
    {::_pbi::TcParser::FastMtS1,
     {106, 9, 8, PROTOBUF_FIELD_OFFSET(Bar, _impl_.event_time_)}},
    // .google.protobuf.Timestamp ingest_time = 14 [json_name = "ingestTime"];
    {::_pbi::TcParser::FastMtS1,
     {114, 10, 9, PROTOBUF_FIELD_OFFSET(Bar, _impl_.ingest_time_)}},
    // .google.protobuf.Timestamp as_of = 15 [json_name = "asOf"];
    {::_pbi::TcParser::FastMtS1,
     {122, 11, 10, PROTOBUF_FIELD_OFFSET(Bar, _impl_.as_of_)}},
    // .ampy.common.v1.Meta meta = 16 [json_name = "meta"];
    {::_pbi::TcParser::FastMtS2,
     {386, 12, 11, PROTOBUF_FIELD_OFFSET(Bar, _impl_.meta_)}},
    // .ampy.common.v1.AdjustmentPolicy adjustment_policy = 17 [json_name = "adjustmentPolicy"];
    {::_pbi::TcParser::FastV32S2,
     {392, 16, 0, PROTOBUF_FIELD_OFFSET(Bar, _impl_.adjustment_policy_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.security_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp start = 2 [json_name = "start"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.start_), _Internal::kHasBitsOffset + 2, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp end = 3 [json_name = "end"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.end_), _Internal::kHasBitsOffset + 3, 2, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Decimal open = 4 [json_name = "open"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.open_), _Internal::kHasBitsOffset + 4, 3, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Decimal high = 5 [json_name = "high"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.high_), _Internal::kHasBitsOffset + 5, 4, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Decimal low = 6 [json_name = "low"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.low_), _Internal::kHasBitsOffset + 6, 5, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Decimal close = 7 [json_name = "close"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.close_), _Internal::kHasBitsOffset + 7, 6, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Decimal vwap = 8 [json_name = "vwap"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.vwap_), _Internal::kHasBitsOffset + 8, 7, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 volume = 9 [json_name = "volume"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.volume_), _Internal::kHasBitsOffset + 13, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 trade_count = 10 [json_name = "tradeCount"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.trade_count_), _Internal::kHasBitsOffset + 14, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // bool adjusted = 11 [json_name = "adjusted"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.adjusted_), _Internal::kHasBitsOffset + 15, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string adjustment_policy_id = 12 [json_name = "adjustmentPolicyId"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.adjustment_policy_id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp event_time = 13 [json_name = "eventTime"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.event_time_), _Internal::kHasBitsOffset + 9, 8, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp ingest_time = 14 [json_name = "ingestTime"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.ingest_time_), _Internal::kHasBitsOffset + 10, 9, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp as_of = 15 [json_name = "asOf"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.as_of_), _Internal::kHasBitsOffset + 11, 10, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Meta meta = 16 [json_name = "meta"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.meta_), _Internal::kHasBitsOffset + 12, 11, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.AdjustmentPolicy adjustment_policy = 17 [json_name = "adjustmentPolicy"];
    {PROTOBUF_FIELD_OFFSET(Bar, _impl_.adjustment_policy_), _Internal::kHasBitsOffset + 16, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::common::v1::SecurityId>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Decimal>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Decimal>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Decimal>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Decimal>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Decimal>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Meta>()},
  }},
  {{
    "\20\0\0\0\0\0\0\0\0\0\0\0\24\0\0\0\0\0\0\0\0\0\0\0"
    "ampy.bars.v1.Bar"
    "adjustment_policy_id"
  }},
};
PROTOBUF_NOINLINE void Bar::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.bars.v1.Bar)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.adjustment_policy_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.security_ != nullptr);
      _impl_.security_->Clear();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(_impl_.start_ != nullptr);
      _impl_.start_->Clear();
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(_impl_.end_ != nullptr);
      _impl_.end_->Clear();
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      ABSL_DCHECK(_impl_.open_ != nullptr);
      _impl_.open_->Clear();
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      ABSL_DCHECK(_impl_.high_ != nullptr);
      _impl_.high_->Clear();
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      ABSL_DCHECK(_impl_.low_ != nullptr);
      _impl_.low_->Clear();
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      ABSL_DCHECK(_impl_.close_ != nullptr);
      _impl_.close_->Clear();
    }
  }
  if ((cached_has_bits & 0x00001f00U) != 0) {
    if ((cached_has_bits & 0x00000100U) != 0) {
      ABSL_DCHECK(_impl_.vwap_ != nullptr);
      _impl_.vwap_->Clear();
    }
    if ((cached_has_bits & 0x00000200U) != 0) {
      ABSL_DCHECK(_impl_.event_time_ != nullptr);
      _impl_.event_time_->Clear();
    }
    if ((cached_has_bits & 0x00000400U) != 0) {
      ABSL_DCHECK(_impl_.ingest_time_ != nullptr);
      _impl_.ingest_time_->Clear();
    }
    if ((cached_has_bits & 0x00000800U) != 0) {
      ABSL_DCHECK(_impl_.as_of_ != nullptr);
      _impl_.as_of_->Clear();
    }
    if ((cached_has_bits & 0x00001000U) != 0) {
      ABSL_DCHECK(_impl_.meta_ != nullptr);
      _impl_.meta_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000e000U) != 0) {
    ::memset(&_impl_.volume_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.adjusted_) -
        reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.adjusted_));
  }
  _impl_.adjustment_policy_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Bar::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Bar& this_ = static_cast<const Bar&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Bar::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Bar& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.bars.v1.Bar)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.security_, this_._impl_.security_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Timestamp start = 2 [json_name = "start"];
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.start_, this_._impl_.start_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Timestamp end = 3 [json_name = "end"];
  if ((cached_has_bits & 0x00000008U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.end_, this_._impl_.end_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Decimal open = 4 [json_name = "open"];
  if ((cached_has_bits & 0x00000010U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.open_, this_._impl_.open_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Decimal high = 5 [json_name = "high"];
  if ((cached_has_bits & 0x00000020U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.high_, this_._impl_.high_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Decimal low = 6 [json_name = "low"];
  if ((cached_has_bits & 0x00000040U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.low_, this_._impl_.low_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Decimal close = 7 [json_name = "close"];
  if ((cached_has_bits & 0x00000080U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.close_, this_._impl_.close_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Decimal vwap = 8 [json_name = "vwap"];
  if ((cached_has_bits & 0x00000100U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.vwap_, this_._impl_.vwap_->GetCachedSize(), target,
        stream);
  }

  // int64 volume = 9 [json_name = "volume"];
  if ((cached_has_bits & 0x00002000U) != 0) {
    if (this_._internal_volume() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<9>(
              stream, this_._internal_volume(), target);
    }
  }

  // int64 trade_count = 10 [json_name = "tradeCount"];
  if ((cached_has_bits & 0x00004000U) != 0) {
    if (this_._internal_trade_count() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<10>(
              stream, this_._internal_trade_count(), target);
    }
  }

  // bool adjusted = 11 [json_name = "adjusted"];
  if ((cached_has_bits & 0x00008000U) != 0) {
    if (this_._internal_adjusted() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          11, this_._internal_adjusted(), target);
    }
  }

  // string adjustment_policy_id = 12 [json_name = "adjustmentPolicyId"];
  if ((cached_has_bits & 0x00000001U) != 0) {
    if (!this_._internal_adjustment_policy_id().empty()) {
      const ::std::string& _s = this_._internal_adjustment_policy_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ampy.bars.v1.Bar.adjustment_policy_id");
      target = stream->WriteStringMaybeAliased(12, _s, target);
    }
  }

  // .google.protobuf.Timestamp event_time = 13 [json_name = "eventTime"];
  if ((cached_has_bits & 0x00000200U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, *this_._impl_.event_time_, this_._impl_.event_time_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Timestamp ingest_time = 14 [json_name = "ingestTime"];
  if ((cached_has_bits & 0x00000400U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, *this_._impl_.ingest_time_, this_._impl_.ingest_time_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Timestamp as_of = 15 [json_name = "asOf"];
  if ((cached_has_bits & 0x00000800U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, *this_._impl_.as_of_, this_._impl_.as_of_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Meta meta = 16 [json_name = "meta"];
  if ((cached_has_bits & 0x00001000U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, *this_._impl_.meta_, this_._impl_.meta_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.AdjustmentPolicy adjustment_policy = 17 [json_name = "adjustmentPolicy"];
  if ((cached_has_bits & 0x00010000U) != 0) {
    if (this_._internal_adjustment_policy() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          17, this_._internal_adjustment_policy(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.bars.v1.Bar)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Bar::ByteSizeLong(const MessageLite& base) {
  const Bar& this_ = static_cast<const Bar&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Bar::ByteSizeLong() const {
  const Bar& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.bars.v1.Bar)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // string adjustment_policy_id = 12 [json_name = "adjustmentPolicyId"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_adjustment_policy_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_adjustment_policy_id());
      }
    }
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.security_);
    }
    // .google.protobuf.Timestamp start = 2 [json_name = "start"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.start_);
    }
    // .google.protobuf.Timestamp end = 3 [json_name = "end"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.end_);
    }
    // .ampy.common.v1.Decimal open = 4 [json_name = "open"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.open_);
    }
    // .ampy.common.v1.Decimal high = 5 [json_name = "high"];
    if ((cached_has_bits & 0x00000020U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.high_);
    }
    // .ampy.common.v1.Decimal low = 6 [json_name = "low"];
    if ((cached_has_bits & 0x00000040U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.low_);
    }
    // .ampy.common.v1.Decimal close = 7 [json_name = "close"];
    if ((cached_has_bits & 0x00000080U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.close_);
    }
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    // .ampy.common.v1.Decimal vwap = 8 [json_name = "vwap"];
    if ((cached_has_bits & 0x00000100U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vwap_);
    }
    // .google.protobuf.Timestamp event_time = 13 [json_name = "eventTime"];
    if ((cached_has_bits & 0x00000200U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_time_);
    }
    // .google.protobuf.Timestamp ingest_time = 14 [json_name = "ingestTime"];
    if ((cached_has_bits & 0x00000400U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ingest_time_);
    }
    // .google.protobuf.Timestamp as_of = 15 [json_name = "asOf"];
    if ((cached_has_bits & 0x00000800U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.as_of_);
    }
    // .ampy.common.v1.Meta meta = 16 [json_name = "meta"];
    if ((cached_has_bits & 0x00001000U) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.meta_);
    }
    // int64 volume = 9 [json_name = "volume"];
    if ((cached_has_bits & 0x00002000U) != 0) {
      if (this_._internal_volume() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_volume());
      }
    }
    // int64 trade_count = 10 [json_name = "tradeCount"];
    if ((cached_has_bits & 0x00004000U) != 0) {
      if (this_._internal_trade_count() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_trade_count());
      }
    }
    // bool adjusted = 11 [json_name = "adjusted"];
    if ((cached_has_bits & 0x00008000U) != 0) {
      if (this_._internal_adjusted() != 0) {
        total_size += 2;
      }
    }
  }
   {
    // .ampy.common.v1.AdjustmentPolicy adjustment_policy = 17 [json_name = "adjustmentPolicy"];
    if ((cached_has_bits & 0x00010000U) != 0) {
      if (this_._internal_adjustment_policy() != 0) {
        total_size += 2 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_adjustment_policy());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Bar::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Bar*>(&to_msg);
  auto& from = static_cast<const Bar&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.bars.v1.Bar)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_adjustment_policy_id().empty()) {
        _this->_internal_set_adjustment_policy_id(from._internal_adjustment_policy_id());
      } else {
        if (_this->_impl_.adjustment_policy_id_.IsDefault()) {
          _this->_internal_set_adjustment_policy_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.security_ != nullptr);
      if (_this->_impl_.security_ == nullptr) {
        _this->_impl_.security_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.security_);
      } else {
        _this->_impl_.security_->MergeFrom(*from._impl_.security_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(from._impl_.start_ != nullptr);
      if (_this->_impl_.start_ == nullptr) {
        _this->_impl_.start_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.start_);
      } else {
        _this->_impl_.start_->MergeFrom(*from._impl_.start_);
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(from._impl_.end_ != nullptr);
      if (_this->_impl_.end_ == nullptr) {
        _this->_impl_.end_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.end_);
      } else {
        _this->_impl_.end_->MergeFrom(*from._impl_.end_);
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      ABSL_DCHECK(from._impl_.open_ != nullptr);
      if (_this->_impl_.open_ == nullptr) {
        _this->_impl_.open_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.open_);
      } else {
        _this->_impl_.open_->MergeFrom(*from._impl_.open_);
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      ABSL_DCHECK(from._impl_.high_ != nullptr);
      if (_this->_impl_.high_ == nullptr) {
        _this->_impl_.high_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.high_);
      } else {
        _this->_impl_.high_->MergeFrom(*from._impl_.high_);
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      ABSL_DCHECK(from._impl_.low_ != nullptr);
      if (_this->_impl_.low_ == nullptr) {
        _this->_impl_.low_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.low_);
      } else {
        _this->_impl_.low_->MergeFrom(*from._impl_.low_);
      }
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      ABSL_DCHECK(from._impl_.close_ != nullptr);
      if (_this->_impl_.close_ == nullptr) {
        _this->_impl_.close_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.close_);
      } else {
        _this->_impl_.close_->MergeFrom(*from._impl_.close_);
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    if ((cached_has_bits & 0x00000100U) != 0) {
      ABSL_DCHECK(from._impl_.vwap_ != nullptr);
      if (_this->_impl_.vwap_ == nullptr) {
        _this->_impl_.vwap_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.vwap_);
      } else {
        _this->_impl_.vwap_->MergeFrom(*from._impl_.vwap_);
      }
    }
    if ((cached_has_bits & 0x00000200U) != 0) {
      ABSL_DCHECK(from._impl_.event_time_ != nullptr);
      if (_this->_impl_.event_time_ == nullptr) {
        _this->_impl_.event_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.event_time_);
      } else {
        _this->_impl_.event_time_->MergeFrom(*from._impl_.event_time_);
      }
    }
    if ((cached_has_bits & 0x00000400U) != 0) {
      ABSL_DCHECK(from._impl_.ingest_time_ != nullptr);
      if (_this->_impl_.ingest_time_ == nullptr) {
        _this->_impl_.ingest_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ingest_time_);
      } else {
        _this->_impl_.ingest_time_->MergeFrom(*from._impl_.ingest_time_);
      }
    }
    if ((cached_has_bits & 0x00000800U) != 0) {
      ABSL_DCHECK(from._impl_.as_of_ != nullptr);
      if (_this->_impl_.as_of_ == nullptr) {
        _this->_impl_.as_of_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.as_of_);
      } else {
        _this->_impl_.as_of_->MergeFrom(*from._impl_.as_of_);
      }
    }
    if ((cached_has_bits & 0x00001000U) != 0) {
      ABSL_DCHECK(from._impl_.meta_ != nullptr);
      if (_this->_impl_.meta_ == nullptr) {
        _this->_impl_.meta_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_);
      } else {
        _this->_impl_.meta_->MergeFrom(*from._impl_.meta_);
      }
    }
    if ((cached_has_bits & 0x00002000U) != 0) {
      if (from._internal_volume() != 0) {
        _this->_impl_.volume_ = from._impl_.volume_;
      }
    }
    if ((cached_has_bits & 0x00004000U) != 0) {
      if (from._internal_trade_count() != 0) {
        _this->_impl_.trade_count_ = from._impl_.trade_count_;
      }
    }
    if ((cached_has_bits & 0x00008000U) != 0) {
      if (from._internal_adjusted() != 0) {
        _this->_impl_.adjusted_ = from._impl_.adjusted_;
      }
    }
  }
  if ((cached_has_bits & 0x00010000U) != 0) {
    if (from._internal_adjustment_policy() != 0) {
      _this->_impl_.adjustment_policy_ = from._impl_.adjustment_policy_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Bar::CopyFrom(const Bar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.bars.v1.Bar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Bar::InternalSwap(Bar* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.adjustment_policy_id_, &other->_impl_.adjustment_policy_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bar, _impl_.adjustment_policy_)
      + sizeof(Bar::_impl_.adjustment_policy_)
      - PROTOBUF_FIELD_OFFSET(Bar, _impl_.security_)>(
          reinterpret_cast<char*>(&_impl_.security_),
          reinterpret_cast<char*>(&other->_impl_.security_));
}

::google::protobuf::Metadata Bar::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BarBatch::_Internal {
 public:
};

BarBatch::BarBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, BarBatch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.bars.v1.BarBatch)
}
PROTOBUF_NDEBUG_INLINE BarBatch::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::bars::v1::BarBatch& from_msg)
      : bars_{visibility, arena, from.bars_},
        _cached_size_{0} {}

BarBatch::BarBatch(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const BarBatch& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, BarBatch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BarBatch* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:ampy.bars.v1.BarBatch)
}
PROTOBUF_NDEBUG_INLINE BarBatch::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : bars_{visibility, arena},
        _cached_size_{0} {}

inline void BarBatch::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
BarBatch::~BarBatch() {
  // @@protoc_insertion_point(destructor:ampy.bars.v1.BarBatch)
  SharedDtor(*this);
}
inline void BarBatch::SharedDtor(MessageLite& self) {
  BarBatch& this_ = static_cast<BarBatch&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL BarBatch::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) BarBatch(arena);
}
constexpr auto BarBatch::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(BarBatch, _impl_.bars_) +
          decltype(BarBatch::_impl_.bars_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(BarBatch), alignof(BarBatch), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&BarBatch::PlacementNew_,
                                 sizeof(BarBatch),
                                 alignof(BarBatch));
  }
}
constexpr auto BarBatch::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_BarBatch_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &BarBatch::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<BarBatch>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &BarBatch::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<BarBatch>(), &BarBatch::ByteSizeLong,
              &BarBatch::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(BarBatch, _impl_._cached_size_),
          false,
      },
      &BarBatch::kDescriptorMethods,
      &descriptor_table_ampy_2fbars_2fv1_2fbars_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull BarBatch_class_data_ =
        BarBatch::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
BarBatch::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&BarBatch_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(BarBatch_class_data_.tc_table);
  return BarBatch_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
BarBatch::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    BarBatch_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::bars::v1::BarBatch>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .ampy.bars.v1.Bar bars = 1 [json_name = "bars"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BarBatch, _impl_.bars_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .ampy.bars.v1.Bar bars = 1 [json_name = "bars"];
    {PROTOBUF_FIELD_OFFSET(BarBatch, _impl_.bars_), 0, 0, (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::bars::v1::Bar>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void BarBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.bars.v1.BarBatch)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bars_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL BarBatch::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const BarBatch& this_ = static_cast<const BarBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL BarBatch::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const BarBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.bars.v1.BarBatch)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .ampy.bars.v1.Bar bars = 1 [json_name = "bars"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_bars_size());
       i < n; i++) {
    const auto& repfield = this_._internal_bars().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.bars.v1.BarBatch)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t BarBatch::ByteSizeLong(const MessageLite& base) {
  const BarBatch& this_ = static_cast<const BarBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t BarBatch::ByteSizeLong() const {
  const BarBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.bars.v1.BarBatch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .ampy.bars.v1.Bar bars = 1 [json_name = "bars"];
    {
      total_size += 1UL * this_._internal_bars_size();
      for (const auto& msg : this_._internal_bars()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void BarBatch::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BarBatch*>(&to_msg);
  auto& from = static_cast<const BarBatch&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.bars.v1.BarBatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bars()->MergeFrom(
      from._internal_bars());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BarBatch::CopyFrom(const BarBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.bars.v1.BarBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BarBatch::InternalSwap(BarBatch* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bars_.InternalSwap(&other->_impl_.bars_);
}

::google::protobuf::Metadata BarBatch::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace bars
}  // namespace ampy
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_ampy_2fbars_2fv1_2fbars_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
