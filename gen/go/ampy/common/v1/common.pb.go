// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: ampy/common/v1/common.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ===== Shared Enums =====
type AdjustmentPolicy int32

const (
	AdjustmentPolicy_ADJUSTMENT_POLICY_UNSPECIFIED    AdjustmentPolicy = 0
	AdjustmentPolicy_ADJUSTMENT_POLICY_RAW            AdjustmentPolicy = 1
	AdjustmentPolicy_ADJUSTMENT_POLICY_SPLIT_ONLY     AdjustmentPolicy = 2
	AdjustmentPolicy_ADJUSTMENT_POLICY_SPLIT_DIVIDEND AdjustmentPolicy = 3
)

// Enum value maps for AdjustmentPolicy.
var (
	AdjustmentPolicy_name = map[int32]string{
		0: "ADJUSTMENT_POLICY_UNSPECIFIED",
		1: "ADJUSTMENT_POLICY_RAW",
		2: "ADJUSTMENT_POLICY_SPLIT_ONLY",
		3: "ADJUSTMENT_POLICY_SPLIT_DIVIDEND",
	}
	AdjustmentPolicy_value = map[string]int32{
		"ADJUSTMENT_POLICY_UNSPECIFIED":    0,
		"ADJUSTMENT_POLICY_RAW":            1,
		"ADJUSTMENT_POLICY_SPLIT_ONLY":     2,
		"ADJUSTMENT_POLICY_SPLIT_DIVIDEND": 3,
	}
)

func (x AdjustmentPolicy) Enum() *AdjustmentPolicy {
	p := new(AdjustmentPolicy)
	*p = x
	return p
}

func (x AdjustmentPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdjustmentPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_ampy_common_v1_common_proto_enumTypes[0].Descriptor()
}

func (AdjustmentPolicy) Type() protoreflect.EnumType {
	return &file_ampy_common_v1_common_proto_enumTypes[0]
}

func (x AdjustmentPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdjustmentPolicy.Descriptor instead.
func (AdjustmentPolicy) EnumDescriptor() ([]byte, []int) {
	return file_ampy_common_v1_common_proto_rawDescGZIP(), []int{0}
}

type Side int32

const (
	Side_SIDE_UNSPECIFIED Side = 0
	Side_SIDE_BUY         Side = 1
	Side_SIDE_SELL        Side = 2
)

// Enum value maps for Side.
var (
	Side_name = map[int32]string{
		0: "SIDE_UNSPECIFIED",
		1: "SIDE_BUY",
		2: "SIDE_SELL",
	}
	Side_value = map[string]int32{
		"SIDE_UNSPECIFIED": 0,
		"SIDE_BUY":         1,
		"SIDE_SELL":        2,
	}
)

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}

func (x Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Side) Descriptor() protoreflect.EnumDescriptor {
	return file_ampy_common_v1_common_proto_enumTypes[1].Descriptor()
}

func (Side) Type() protoreflect.EnumType {
	return &file_ampy_common_v1_common_proto_enumTypes[1]
}

func (x Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Side.Descriptor instead.
func (Side) EnumDescriptor() ([]byte, []int) {
	return file_ampy_common_v1_common_proto_rawDescGZIP(), []int{1}
}

type OrderType int32

const (
	OrderType_ORDER_TYPE_UNSPECIFIED OrderType = 0
	OrderType_ORDER_TYPE_MARKET      OrderType = 1
	OrderType_ORDER_TYPE_LIMIT       OrderType = 2
	OrderType_ORDER_TYPE_STOP        OrderType = 3
	OrderType_ORDER_TYPE_STOP_LIMIT  OrderType = 4
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_UNSPECIFIED",
		1: "ORDER_TYPE_MARKET",
		2: "ORDER_TYPE_LIMIT",
		3: "ORDER_TYPE_STOP",
		4: "ORDER_TYPE_STOP_LIMIT",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNSPECIFIED": 0,
		"ORDER_TYPE_MARKET":      1,
		"ORDER_TYPE_LIMIT":       2,
		"ORDER_TYPE_STOP":        3,
		"ORDER_TYPE_STOP_LIMIT":  4,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_ampy_common_v1_common_proto_enumTypes[2].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_ampy_common_v1_common_proto_enumTypes[2]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_ampy_common_v1_common_proto_rawDescGZIP(), []int{2}
}

type TimeInForce int32

const (
	TimeInForce_TIME_IN_FORCE_UNSPECIFIED TimeInForce = 0
	TimeInForce_TIME_IN_FORCE_DAY         TimeInForce = 1
	TimeInForce_TIME_IN_FORCE_GTC         TimeInForce = 2
	TimeInForce_TIME_IN_FORCE_IOC         TimeInForce = 3
	TimeInForce_TIME_IN_FORCE_FOK         TimeInForce = 4
	TimeInForce_TIME_IN_FORCE_GTT         TimeInForce = 5
)

// Enum value maps for TimeInForce.
var (
	TimeInForce_name = map[int32]string{
		0: "TIME_IN_FORCE_UNSPECIFIED",
		1: "TIME_IN_FORCE_DAY",
		2: "TIME_IN_FORCE_GTC",
		3: "TIME_IN_FORCE_IOC",
		4: "TIME_IN_FORCE_FOK",
		5: "TIME_IN_FORCE_GTT",
	}
	TimeInForce_value = map[string]int32{
		"TIME_IN_FORCE_UNSPECIFIED": 0,
		"TIME_IN_FORCE_DAY":         1,
		"TIME_IN_FORCE_GTC":         2,
		"TIME_IN_FORCE_IOC":         3,
		"TIME_IN_FORCE_FOK":         4,
		"TIME_IN_FORCE_GTT":         5,
	}
)

func (x TimeInForce) Enum() *TimeInForce {
	p := new(TimeInForce)
	*p = x
	return p
}

func (x TimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_ampy_common_v1_common_proto_enumTypes[3].Descriptor()
}

func (TimeInForce) Type() protoreflect.EnumType {
	return &file_ampy_common_v1_common_proto_enumTypes[3]
}

func (x TimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeInForce.Descriptor instead.
func (TimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_ampy_common_v1_common_proto_rawDescGZIP(), []int{3}
}

type SignalType int32

const (
	SignalType_SIGNAL_TYPE_UNSPECIFIED SignalType = 0
	SignalType_SIGNAL_TYPE_ALPHA       SignalType = 1
	SignalType_SIGNAL_TYPE_ACTION      SignalType = 2
)

// Enum value maps for SignalType.
var (
	SignalType_name = map[int32]string{
		0: "SIGNAL_TYPE_UNSPECIFIED",
		1: "SIGNAL_TYPE_ALPHA",
		2: "SIGNAL_TYPE_ACTION",
	}
	SignalType_value = map[string]int32{
		"SIGNAL_TYPE_UNSPECIFIED": 0,
		"SIGNAL_TYPE_ALPHA":       1,
		"SIGNAL_TYPE_ACTION":      2,
	}
)

func (x SignalType) Enum() *SignalType {
	p := new(SignalType)
	*p = x
	return p
}

func (x SignalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignalType) Descriptor() protoreflect.EnumDescriptor {
	return file_ampy_common_v1_common_proto_enumTypes[4].Descriptor()
}

func (SignalType) Type() protoreflect.EnumType {
	return &file_ampy_common_v1_common_proto_enumTypes[4]
}

func (x SignalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignalType.Descriptor instead.
func (SignalType) EnumDescriptor() ([]byte, []int) {
	return file_ampy_common_v1_common_proto_rawDescGZIP(), []int{4}
}

type ActionType int32

const (
	ActionType_ACTION_TYPE_UNSPECIFIED ActionType = 0
	ActionType_ACTION_TYPE_BUY         ActionType = 1
	ActionType_ACTION_TYPE_SELL        ActionType = 2
	ActionType_ACTION_TYPE_HOLD        ActionType = 3
	ActionType_ACTION_TYPE_CLOSE       ActionType = 4
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ACTION_TYPE_UNSPECIFIED",
		1: "ACTION_TYPE_BUY",
		2: "ACTION_TYPE_SELL",
		3: "ACTION_TYPE_HOLD",
		4: "ACTION_TYPE_CLOSE",
	}
	ActionType_value = map[string]int32{
		"ACTION_TYPE_UNSPECIFIED": 0,
		"ACTION_TYPE_BUY":         1,
		"ACTION_TYPE_SELL":        2,
		"ACTION_TYPE_HOLD":        3,
		"ACTION_TYPE_CLOSE":       4,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ampy_common_v1_common_proto_enumTypes[5].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_ampy_common_v1_common_proto_enumTypes[5]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_ampy_common_v1_common_proto_rawDescGZIP(), []int{5}
}

// Decimal uses scaled integer semantics to avoid float rounding errors.
// Example: scaled=123456, scale=4 => 12.3456
type Decimal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scaled        int64                  `protobuf:"zigzag64,1,opt,name=scaled,proto3" json:"scaled,omitempty"`
	Scale         int32                  `protobuf:"varint,2,opt,name=scale,proto3" json:"scale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Decimal) Reset() {
	*x = Decimal{}
	mi := &file_ampy_common_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Decimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decimal) ProtoMessage() {}

func (x *Decimal) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_common_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decimal.ProtoReflect.Descriptor instead.
func (*Decimal) Descriptor() ([]byte, []int) {
	return file_ampy_common_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *Decimal) GetScaled() int64 {
	if x != nil {
		return x.Scaled
	}
	return 0
}

func (x *Decimal) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

// Money value with ISO-4217 currency code (e.g., "USD", "EUR", "JPY", "KRW").
type Money struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        *Decimal               `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	CurrencyCode  string                 `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Money) Reset() {
	*x = Money{}
	mi := &file_ampy_common_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Money) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Money) ProtoMessage() {}

func (x *Money) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_common_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Money.ProtoReflect.Descriptor instead.
func (*Money) Descriptor() ([]byte, []int) {
	return file_ampy_common_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *Money) GetAmount() *Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Money) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

// Security identity — avoid relying on ticker alone.
// "mic" is the ISO 10383 market identifier code (e.g., "XNAS", "XNYS").
type SecurityId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Mic           string                 `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	Figi          string                 `protobuf:"bytes,3,opt,name=figi,proto3" json:"figi,omitempty"` // optional
	Isin          string                 `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"` // optional
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecurityId) Reset() {
	*x = SecurityId{}
	mi := &file_ampy_common_v1_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityId) ProtoMessage() {}

func (x *SecurityId) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_common_v1_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityId.ProtoReflect.Descriptor instead.
func (*SecurityId) Descriptor() ([]byte, []int) {
	return file_ampy_common_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *SecurityId) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SecurityId) GetMic() string {
	if x != nil {
		return x.Mic
	}
	return ""
}

func (x *SecurityId) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *SecurityId) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

// Meta lineage fields for traceability and reproducibility.
type Meta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunId         string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`                         // workflow/run identifier
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`                                    // e.g., "yfinance-go", "databento-cpp"
	Producer      string                 `protobuf:"bytes,3,opt,name=producer,proto3" json:"producer,omitempty"`                                // instance name/id
	SchemaVersion string                 `protobuf:"bytes,4,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"` // e.g., "ampy.bars.v1:1.0.0"
	Checksum      string                 `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`                                // optional payload checksum/hash
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Meta) Reset() {
	*x = Meta{}
	mi := &file_ampy_common_v1_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_common_v1_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_ampy_common_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *Meta) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *Meta) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Meta) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *Meta) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *Meta) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

var File_ampy_common_v1_common_proto protoreflect.FileDescriptor

const file_ampy_common_v1_common_proto_rawDesc = "" +
	"\n" +
	"\x1bampy/common/v1/common.proto\x12\x0eampy.common.v1\"7\n" +
	"\aDecimal\x12\x16\n" +
	"\x06scaled\x18\x01 \x01(\x12R\x06scaled\x12\x14\n" +
	"\x05scale\x18\x02 \x01(\x05R\x05scale\"]\n" +
	"\x05Money\x12/\n" +
	"\x06amount\x18\x01 \x01(\v2\x17.ampy.common.v1.DecimalR\x06amount\x12#\n" +
	"\rcurrency_code\x18\x02 \x01(\tR\fcurrencyCode\"^\n" +
	"\n" +
	"SecurityId\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x10\n" +
	"\x03mic\x18\x02 \x01(\tR\x03mic\x12\x12\n" +
	"\x04figi\x18\x03 \x01(\tR\x04figi\x12\x12\n" +
	"\x04isin\x18\x04 \x01(\tR\x04isin\"\x94\x01\n" +
	"\x04Meta\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12\x1a\n" +
	"\bproducer\x18\x03 \x01(\tR\bproducer\x12%\n" +
	"\x0eschema_version\x18\x04 \x01(\tR\rschemaVersion\x12\x1a\n" +
	"\bchecksum\x18\x05 \x01(\tR\bchecksum*\x98\x01\n" +
	"\x10AdjustmentPolicy\x12!\n" +
	"\x1dADJUSTMENT_POLICY_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ADJUSTMENT_POLICY_RAW\x10\x01\x12 \n" +
	"\x1cADJUSTMENT_POLICY_SPLIT_ONLY\x10\x02\x12$\n" +
	" ADJUSTMENT_POLICY_SPLIT_DIVIDEND\x10\x03*9\n" +
	"\x04Side\x12\x14\n" +
	"\x10SIDE_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bSIDE_BUY\x10\x01\x12\r\n" +
	"\tSIDE_SELL\x10\x02*\x84\x01\n" +
	"\tOrderType\x12\x1a\n" +
	"\x16ORDER_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11ORDER_TYPE_MARKET\x10\x01\x12\x14\n" +
	"\x10ORDER_TYPE_LIMIT\x10\x02\x12\x13\n" +
	"\x0fORDER_TYPE_STOP\x10\x03\x12\x19\n" +
	"\x15ORDER_TYPE_STOP_LIMIT\x10\x04*\x9f\x01\n" +
	"\vTimeInForce\x12\x1d\n" +
	"\x19TIME_IN_FORCE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11TIME_IN_FORCE_DAY\x10\x01\x12\x15\n" +
	"\x11TIME_IN_FORCE_GTC\x10\x02\x12\x15\n" +
	"\x11TIME_IN_FORCE_IOC\x10\x03\x12\x15\n" +
	"\x11TIME_IN_FORCE_FOK\x10\x04\x12\x15\n" +
	"\x11TIME_IN_FORCE_GTT\x10\x05*X\n" +
	"\n" +
	"SignalType\x12\x1b\n" +
	"\x17SIGNAL_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11SIGNAL_TYPE_ALPHA\x10\x01\x12\x16\n" +
	"\x12SIGNAL_TYPE_ACTION\x10\x02*\x81\x01\n" +
	"\n" +
	"ActionType\x12\x1b\n" +
	"\x17ACTION_TYPE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fACTION_TYPE_BUY\x10\x01\x12\x14\n" +
	"\x10ACTION_TYPE_SELL\x10\x02\x12\x14\n" +
	"\x10ACTION_TYPE_HOLD\x10\x03\x12\x15\n" +
	"\x11ACTION_TYPE_CLOSE\x10\x04B\xbc\x01\n" +
	"\x12com.ampy.common.v1B\vCommonProtoP\x01Z?github.com/AmpyFin/ampy-proto/v2/gen/go/ampy/common/v1;commonv1\xa2\x02\x03ACX\xaa\x02\x0eAmpy.Common.V1\xca\x02\x0eAmpy\\Common\\V1\xe2\x02\x1aAmpy\\Common\\V1\\GPBMetadata\xea\x02\x10Ampy::Common::V1b\x06proto3"

var (
	file_ampy_common_v1_common_proto_rawDescOnce sync.Once
	file_ampy_common_v1_common_proto_rawDescData []byte
)

func file_ampy_common_v1_common_proto_rawDescGZIP() []byte {
	file_ampy_common_v1_common_proto_rawDescOnce.Do(func() {
		file_ampy_common_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ampy_common_v1_common_proto_rawDesc), len(file_ampy_common_v1_common_proto_rawDesc)))
	})
	return file_ampy_common_v1_common_proto_rawDescData
}

var file_ampy_common_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_ampy_common_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ampy_common_v1_common_proto_goTypes = []any{
	(AdjustmentPolicy)(0), // 0: ampy.common.v1.AdjustmentPolicy
	(Side)(0),             // 1: ampy.common.v1.Side
	(OrderType)(0),        // 2: ampy.common.v1.OrderType
	(TimeInForce)(0),      // 3: ampy.common.v1.TimeInForce
	(SignalType)(0),       // 4: ampy.common.v1.SignalType
	(ActionType)(0),       // 5: ampy.common.v1.ActionType
	(*Decimal)(nil),       // 6: ampy.common.v1.Decimal
	(*Money)(nil),         // 7: ampy.common.v1.Money
	(*SecurityId)(nil),    // 8: ampy.common.v1.SecurityId
	(*Meta)(nil),          // 9: ampy.common.v1.Meta
}
var file_ampy_common_v1_common_proto_depIdxs = []int32{
	6, // 0: ampy.common.v1.Money.amount:type_name -> ampy.common.v1.Decimal
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ampy_common_v1_common_proto_init() }
func file_ampy_common_v1_common_proto_init() {
	if File_ampy_common_v1_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ampy_common_v1_common_proto_rawDesc), len(file_ampy_common_v1_common_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ampy_common_v1_common_proto_goTypes,
		DependencyIndexes: file_ampy_common_v1_common_proto_depIdxs,
		EnumInfos:         file_ampy_common_v1_common_proto_enumTypes,
		MessageInfos:      file_ampy_common_v1_common_proto_msgTypes,
	}.Build()
	File_ampy_common_v1_common_proto = out.File
	file_ampy_common_v1_common_proto_goTypes = nil
	file_ampy_common_v1_common_proto_depIdxs = nil
}
