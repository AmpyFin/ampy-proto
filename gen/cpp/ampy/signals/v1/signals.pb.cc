// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ampy/signals/v1/signals.proto
// Protobuf C++ Version: 6.32.0

#include "ampy/signals/v1/signals.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ampy {
namespace signals {
namespace v1 {

inline constexpr Signal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        model_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        horizon_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        security_{nullptr},
        generated_at_{nullptr},
        expires_at_{nullptr},
        meta_{nullptr},
        type_{static_cast< ::ampy::common::v1::SignalType >(0)},
        value_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Signal::Signal(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Signal_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalDefaultTypeInternal() {}
  union {
    Signal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalDefaultTypeInternal _Signal_default_instance_;

inline constexpr SignalBatch::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : signals_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SignalBatch::SignalBatch(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SignalBatch_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SignalBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalBatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalBatchDefaultTypeInternal() {}
  union {
    SignalBatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalBatchDefaultTypeInternal _SignalBatch_default_instance_;
}  // namespace v1
}  // namespace signals
}  // namespace ampy
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_ampy_2fsignals_2fv1_2fsignals_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_ampy_2fsignals_2fv1_2fsignals_2eproto = nullptr;
const ::uint32_t
    TableStruct_ampy_2fsignals_2fv1_2fsignals_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x085, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::signals::v1::Signal, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::ampy::signals::v1::Signal, _impl_._oneof_case_[0]),
        14, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ampy::signals::v1::Signal, _impl_.security_),
        PROTOBUF_FIELD_OFFSET(::ampy::signals::v1::Signal, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::ampy::signals::v1::Signal, _impl_.model_id_),
        PROTOBUF_FIELD_OFFSET(::ampy::signals::v1::Signal, _impl_.horizon_),
        PROTOBUF_FIELD_OFFSET(::ampy::signals::v1::Signal, _impl_.generated_at_),
        PROTOBUF_FIELD_OFFSET(::ampy::signals::v1::Signal, _impl_.expires_at_),
        PROTOBUF_FIELD_OFFSET(::ampy::signals::v1::Signal, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::ampy::signals::v1::Signal, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::ampy::signals::v1::Signal, _impl_.meta_),
        PROTOBUF_FIELD_OFFSET(::ampy::signals::v1::Signal, _impl_.value_),
        2,
        6,
        0,
        1,
        3,
        4,
        ~0u,
        ~0u,
        5,
        0x000, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::signals::v1::SignalBatch, _impl_.signals_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::ampy::signals::v1::Signal)},
        {23, sizeof(::ampy::signals::v1::SignalBatch)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::ampy::signals::v1::_Signal_default_instance_._instance,
    &::ampy::signals::v1::_SignalBatch_default_instance_._instance,
};
const char descriptor_table_protodef_ampy_2fsignals_2fv1_2fsignals_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\035ampy/signals/v1/signals.proto\022\017ampy.si"
    "gnals.v1\032\037google/protobuf/timestamp.prot"
    "o\032\033ampy/common/v1/common.proto\"\271\003\n\006Signa"
    "l\0226\n\010security\030\001 \001(\0132\032.ampy.common.v1.Sec"
    "urityIdR\010security\022.\n\004type\030\002 \001(\0162\032.ampy.c"
    "ommon.v1.SignalTypeR\004type\022\031\n\010model_id\030\003 "
    "\001(\tR\007modelId\022\030\n\007horizon\030\004 \001(\tR\007horizon\022="
    "\n\014generated_at\030\005 \001(\0132\032.google.protobuf.T"
    "imestampR\013generatedAt\0229\n\nexpires_at\030\006 \001("
    "\0132\032.google.protobuf.TimestampR\texpiresAt"
    "\022/\n\005score\030\007 \001(\0132\027.ampy.common.v1.Decimal"
    "H\000R\005score\0224\n\006action\030\010 \001(\0162\032.ampy.common."
    "v1.ActionTypeH\000R\006action\022(\n\004meta\030\t \001(\0132\024."
    "ampy.common.v1.MetaR\004metaB\007\n\005value\"@\n\013Si"
    "gnalBatch\0221\n\007signals\030\001 \003(\0132\027.ampy.signal"
    "s.v1.SignalR\007signalsB\304\001\n\023com.ampy.signal"
    "s.v1B\014SignalsProtoP\001ZAgithub.com/AmpyFin"
    "/ampy-proto/v2/gen/go/ampy/signals/v1;si"
    "gnalsv1\242\002\003ASX\252\002\017Ampy.Signals.V1\312\002\017Ampy\\S"
    "ignals\\V1\342\002\033Ampy\\Signals\\V1\\GPBMetadata\352"
    "\002\021Ampy::Signals::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_ampy_2fsignals_2fv1_2fsignals_2eproto_deps[2] = {
        &::descriptor_table_ampy_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_ampy_2fsignals_2fv1_2fsignals_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ampy_2fsignals_2fv1_2fsignals_2eproto = {
    false,
    false,
    827,
    descriptor_table_protodef_ampy_2fsignals_2fv1_2fsignals_2eproto,
    "ampy/signals/v1/signals.proto",
    &descriptor_table_ampy_2fsignals_2fv1_2fsignals_2eproto_once,
    descriptor_table_ampy_2fsignals_2fv1_2fsignals_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_ampy_2fsignals_2fv1_2fsignals_2eproto::offsets,
    file_level_enum_descriptors_ampy_2fsignals_2fv1_2fsignals_2eproto,
    file_level_service_descriptors_ampy_2fsignals_2fv1_2fsignals_2eproto,
};
namespace ampy {
namespace signals {
namespace v1 {
// ===================================================================

class Signal::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Signal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Signal, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::ampy::signals::v1::Signal, _impl_._oneof_case_);
};

void Signal::clear_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.security_ != nullptr) _impl_.security_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
void Signal::clear_generated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.generated_at_ != nullptr) _impl_.generated_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008U;
}
void Signal::clear_expires_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.expires_at_ != nullptr) _impl_.expires_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010U;
}
void Signal::set_allocated_score(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE score) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (score) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(score)->GetArena();
    if (message_arena != submessage_arena) {
      score = ::google::protobuf::internal::GetOwnedMessage(message_arena, score, submessage_arena);
    }
    set_has_score();
    _impl_.value_.score_ = score;
  }
  // @@protoc_insertion_point(field_set_allocated:ampy.signals.v1.Signal.score)
}
void Signal::clear_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kScore) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.score_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.score_);
    }
    clear_has_value();
  }
}
void Signal::clear_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020U;
}
Signal::Signal(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Signal_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.signals.v1.Signal)
}
PROTOBUF_NDEBUG_INLINE Signal::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::signals::v1::Signal& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        model_id_(arena, from.model_id_),
        horizon_(arena, from.horizon_),
        value_{},
        _oneof_case_{from._oneof_case_[0]} {}

Signal::Signal(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Signal& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Signal_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Signal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.security_ = ((cached_has_bits & 0x00000004U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.security_)
                : nullptr;
  _impl_.generated_at_ = ((cached_has_bits & 0x00000008U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.generated_at_)
                : nullptr;
  _impl_.expires_at_ = ((cached_has_bits & 0x00000010U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.expires_at_)
                : nullptr;
  _impl_.meta_ = ((cached_has_bits & 0x00000020U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;
  switch (value_case()) {
    case VALUE_NOT_SET:
      break;
      case kScore:
        _impl_.value_.score_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.score_);
        break;
      case kAction:
        _impl_.value_.action_ = from._impl_.value_.action_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:ampy.signals.v1.Signal)
}
PROTOBUF_NDEBUG_INLINE Signal::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        model_id_(arena),
        horizon_(arena),
        value_{},
        _oneof_case_{} {}

inline void Signal::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, security_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, security_) +
               sizeof(Impl_::type_));
}
Signal::~Signal() {
  // @@protoc_insertion_point(destructor:ampy.signals.v1.Signal)
  SharedDtor(*this);
}
inline void Signal::SharedDtor(MessageLite& self) {
  Signal& this_ = static_cast<Signal&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.model_id_.Destroy();
  this_._impl_.horizon_.Destroy();
  delete this_._impl_.security_;
  delete this_._impl_.generated_at_;
  delete this_._impl_.expires_at_;
  delete this_._impl_.meta_;
  if (this_.has_value()) {
    this_.clear_value();
  }
  this_._impl_.~Impl_();
}

void Signal::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:ampy.signals.v1.Signal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (value_case()) {
    case kScore: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.score_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.score_);
      }
      break;
    }
    case kAction: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


inline void* PROTOBUF_NONNULL Signal::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Signal(arena);
}
constexpr auto Signal::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Signal),
                                            alignof(Signal));
}
constexpr auto Signal::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Signal_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Signal::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Signal>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Signal::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Signal>(), &Signal::ByteSizeLong,
              &Signal::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Signal, _impl_._cached_size_),
          false,
      },
      &Signal::kDescriptorMethods,
      &descriptor_table_ampy_2fsignals_2fv1_2fsignals_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Signal_class_data_ =
        Signal::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Signal::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Signal_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Signal_class_data_.tc_table);
  return Signal_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 5, 54, 2>
Signal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Signal, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Signal_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::signals::v1::Signal>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    {::_pbi::TcParser::FastMtS1,
     {10, 2, 0, PROTOBUF_FIELD_OFFSET(Signal, _impl_.security_)}},
    // .ampy.common.v1.SignalType type = 2 [json_name = "type"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Signal, _impl_.type_), 6>(),
     {16, 6, 0, PROTOBUF_FIELD_OFFSET(Signal, _impl_.type_)}},
    // string model_id = 3 [json_name = "modelId"];
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Signal, _impl_.model_id_)}},
    // string horizon = 4 [json_name = "horizon"];
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(Signal, _impl_.horizon_)}},
    // .google.protobuf.Timestamp generated_at = 5 [json_name = "generatedAt"];
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 1, PROTOBUF_FIELD_OFFSET(Signal, _impl_.generated_at_)}},
    // .google.protobuf.Timestamp expires_at = 6 [json_name = "expiresAt"];
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 2, PROTOBUF_FIELD_OFFSET(Signal, _impl_.expires_at_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .ampy.common.v1.Meta meta = 9 [json_name = "meta"];
    {::_pbi::TcParser::FastMtS1,
     {74, 5, 4, PROTOBUF_FIELD_OFFSET(Signal, _impl_.meta_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    {PROTOBUF_FIELD_OFFSET(Signal, _impl_.security_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.SignalType type = 2 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(Signal, _impl_.type_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string model_id = 3 [json_name = "modelId"];
    {PROTOBUF_FIELD_OFFSET(Signal, _impl_.model_id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string horizon = 4 [json_name = "horizon"];
    {PROTOBUF_FIELD_OFFSET(Signal, _impl_.horizon_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp generated_at = 5 [json_name = "generatedAt"];
    {PROTOBUF_FIELD_OFFSET(Signal, _impl_.generated_at_), _Internal::kHasBitsOffset + 3, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp expires_at = 6 [json_name = "expiresAt"];
    {PROTOBUF_FIELD_OFFSET(Signal, _impl_.expires_at_), _Internal::kHasBitsOffset + 4, 2, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Decimal score = 7 [json_name = "score"];
    {PROTOBUF_FIELD_OFFSET(Signal, _impl_.value_.score_), _Internal::kOneofCaseOffset + 0, 3, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.ActionType action = 8 [json_name = "action"];
    {PROTOBUF_FIELD_OFFSET(Signal, _impl_.value_.action_), _Internal::kOneofCaseOffset + 0, 0, (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // .ampy.common.v1.Meta meta = 9 [json_name = "meta"];
    {PROTOBUF_FIELD_OFFSET(Signal, _impl_.meta_), _Internal::kHasBitsOffset + 5, 4, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::common::v1::SecurityId>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Decimal>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Meta>()},
  }},
  {{
    "\26\0\0\10\7\0\0\0\0\0\0\0\0\0\0\0"
    "ampy.signals.v1.Signal"
    "model_id"
    "horizon"
  }},
};
PROTOBUF_NOINLINE void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.signals.v1.Signal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.model_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.horizon_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(_impl_.security_ != nullptr);
      _impl_.security_->Clear();
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(_impl_.generated_at_ != nullptr);
      _impl_.generated_at_->Clear();
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      ABSL_DCHECK(_impl_.expires_at_ != nullptr);
      _impl_.expires_at_->Clear();
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      ABSL_DCHECK(_impl_.meta_ != nullptr);
      _impl_.meta_->Clear();
    }
  }
  _impl_.type_ = 0;
  clear_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Signal::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Signal& this_ = static_cast<const Signal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Signal::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Signal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.signals.v1.Signal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.security_, this_._impl_.security_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.SignalType type = 2 [json_name = "type"];
  if ((cached_has_bits & 0x00000040U) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_type(), target);
    }
  }

  // string model_id = 3 [json_name = "modelId"];
  if ((cached_has_bits & 0x00000001U) != 0) {
    if (!this_._internal_model_id().empty()) {
      const ::std::string& _s = this_._internal_model_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ampy.signals.v1.Signal.model_id");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string horizon = 4 [json_name = "horizon"];
  if ((cached_has_bits & 0x00000002U) != 0) {
    if (!this_._internal_horizon().empty()) {
      const ::std::string& _s = this_._internal_horizon();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ampy.signals.v1.Signal.horizon");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // .google.protobuf.Timestamp generated_at = 5 [json_name = "generatedAt"];
  if ((cached_has_bits & 0x00000008U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.generated_at_, this_._impl_.generated_at_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Timestamp expires_at = 6 [json_name = "expiresAt"];
  if ((cached_has_bits & 0x00000010U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.expires_at_, this_._impl_.expires_at_->GetCachedSize(), target,
        stream);
  }

  switch (this_.value_case()) {
    case kScore: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *this_._impl_.value_.score_, this_._impl_.value_.score_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAction: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          8, this_._internal_action(), target);
      break;
    }
    default:
      break;
  }
  // .ampy.common.v1.Meta meta = 9 [json_name = "meta"];
  if ((cached_has_bits & 0x00000020U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.meta_, this_._impl_.meta_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.signals.v1.Signal)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Signal::ByteSizeLong(const MessageLite& base) {
  const Signal& this_ = static_cast<const Signal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Signal::ByteSizeLong() const {
  const Signal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.signals.v1.Signal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    // string model_id = 3 [json_name = "modelId"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_model_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_model_id());
      }
    }
    // string horizon = 4 [json_name = "horizon"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_horizon().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_horizon());
      }
    }
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.security_);
    }
    // .google.protobuf.Timestamp generated_at = 5 [json_name = "generatedAt"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.generated_at_);
    }
    // .google.protobuf.Timestamp expires_at = 6 [json_name = "expiresAt"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.expires_at_);
    }
    // .ampy.common.v1.Meta meta = 9 [json_name = "meta"];
    if ((cached_has_bits & 0x00000020U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.meta_);
    }
    // .ampy.common.v1.SignalType type = 2 [json_name = "type"];
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  switch (this_.value_case()) {
    // .ampy.common.v1.Decimal score = 7 [json_name = "score"];
    case kScore: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.score_);
      break;
    }
    // .ampy.common.v1.ActionType action = 8 [json_name = "action"];
    case kAction: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_action());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Signal::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Signal*>(&to_msg);
  auto& from = static_cast<const Signal&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.signals.v1.Signal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_model_id().empty()) {
        _this->_internal_set_model_id(from._internal_model_id());
      } else {
        if (_this->_impl_.model_id_.IsDefault()) {
          _this->_internal_set_model_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_horizon().empty()) {
        _this->_internal_set_horizon(from._internal_horizon());
      } else {
        if (_this->_impl_.horizon_.IsDefault()) {
          _this->_internal_set_horizon("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(from._impl_.security_ != nullptr);
      if (_this->_impl_.security_ == nullptr) {
        _this->_impl_.security_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.security_);
      } else {
        _this->_impl_.security_->MergeFrom(*from._impl_.security_);
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(from._impl_.generated_at_ != nullptr);
      if (_this->_impl_.generated_at_ == nullptr) {
        _this->_impl_.generated_at_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.generated_at_);
      } else {
        _this->_impl_.generated_at_->MergeFrom(*from._impl_.generated_at_);
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      ABSL_DCHECK(from._impl_.expires_at_ != nullptr);
      if (_this->_impl_.expires_at_ == nullptr) {
        _this->_impl_.expires_at_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.expires_at_);
      } else {
        _this->_impl_.expires_at_->MergeFrom(*from._impl_.expires_at_);
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      ABSL_DCHECK(from._impl_.meta_ != nullptr);
      if (_this->_impl_.meta_ == nullptr) {
        _this->_impl_.meta_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_);
      } else {
        _this->_impl_.meta_->MergeFrom(*from._impl_.meta_);
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_value();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kScore: {
        if (oneof_needs_init) {
          _this->_impl_.value_.score_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.score_);
        } else {
          _this->_impl_.value_.score_->MergeFrom(*from._impl_.value_.score_);
        }
        break;
      }
      case kAction: {
        _this->_impl_.value_.action_ = from._impl_.value_.action_;
        break;
      }
      case VALUE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.signals.v1.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Signal::InternalSwap(Signal* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_id_, &other->_impl_.model_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.horizon_, &other->_impl_.horizon_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Signal, _impl_.type_)
      + sizeof(Signal::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Signal, _impl_.security_)>(
          reinterpret_cast<char*>(&_impl_.security_),
          reinterpret_cast<char*>(&other->_impl_.security_));
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SignalBatch::_Internal {
 public:
};

SignalBatch::SignalBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SignalBatch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.signals.v1.SignalBatch)
}
PROTOBUF_NDEBUG_INLINE SignalBatch::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::signals::v1::SignalBatch& from_msg)
      : signals_{visibility, arena, from.signals_},
        _cached_size_{0} {}

SignalBatch::SignalBatch(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SignalBatch& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SignalBatch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SignalBatch* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:ampy.signals.v1.SignalBatch)
}
PROTOBUF_NDEBUG_INLINE SignalBatch::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : signals_{visibility, arena},
        _cached_size_{0} {}

inline void SignalBatch::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SignalBatch::~SignalBatch() {
  // @@protoc_insertion_point(destructor:ampy.signals.v1.SignalBatch)
  SharedDtor(*this);
}
inline void SignalBatch::SharedDtor(MessageLite& self) {
  SignalBatch& this_ = static_cast<SignalBatch&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SignalBatch::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SignalBatch(arena);
}
constexpr auto SignalBatch::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SignalBatch, _impl_.signals_) +
          decltype(SignalBatch::_impl_.signals_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SignalBatch), alignof(SignalBatch), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SignalBatch::PlacementNew_,
                                 sizeof(SignalBatch),
                                 alignof(SignalBatch));
  }
}
constexpr auto SignalBatch::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SignalBatch_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SignalBatch::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SignalBatch>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SignalBatch::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SignalBatch>(), &SignalBatch::ByteSizeLong,
              &SignalBatch::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SignalBatch, _impl_._cached_size_),
          false,
      },
      &SignalBatch::kDescriptorMethods,
      &descriptor_table_ampy_2fsignals_2fv1_2fsignals_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SignalBatch_class_data_ =
        SignalBatch::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SignalBatch::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SignalBatch_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SignalBatch_class_data_.tc_table);
  return SignalBatch_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
SignalBatch::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SignalBatch_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::signals::v1::SignalBatch>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .ampy.signals.v1.Signal signals = 1 [json_name = "signals"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SignalBatch, _impl_.signals_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .ampy.signals.v1.Signal signals = 1 [json_name = "signals"];
    {PROTOBUF_FIELD_OFFSET(SignalBatch, _impl_.signals_), 0, 0, (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::signals::v1::Signal>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SignalBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.signals.v1.SignalBatch)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signals_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SignalBatch::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SignalBatch& this_ = static_cast<const SignalBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SignalBatch::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SignalBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.signals.v1.SignalBatch)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .ampy.signals.v1.Signal signals = 1 [json_name = "signals"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_signals_size());
       i < n; i++) {
    const auto& repfield = this_._internal_signals().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.signals.v1.SignalBatch)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SignalBatch::ByteSizeLong(const MessageLite& base) {
  const SignalBatch& this_ = static_cast<const SignalBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SignalBatch::ByteSizeLong() const {
  const SignalBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.signals.v1.SignalBatch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .ampy.signals.v1.Signal signals = 1 [json_name = "signals"];
    {
      total_size += 1UL * this_._internal_signals_size();
      for (const auto& msg : this_._internal_signals()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SignalBatch::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SignalBatch*>(&to_msg);
  auto& from = static_cast<const SignalBatch&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.signals.v1.SignalBatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signals()->MergeFrom(
      from._internal_signals());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SignalBatch::CopyFrom(const SignalBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.signals.v1.SignalBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SignalBatch::InternalSwap(SignalBatch* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signals_.InternalSwap(&other->_impl_.signals_);
}

::google::protobuf::Metadata SignalBatch::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace signals
}  // namespace ampy
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_ampy_2fsignals_2fv1_2fsignals_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
