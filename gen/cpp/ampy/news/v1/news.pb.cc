// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ampy/news/v1/news.proto
// Protobuf C++ Version: 6.32.0

#include "ampy/news/v1/news.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ampy {
namespace news {
namespace v1 {

inline constexpr NewsItem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tickers_{},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        source_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        headline_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        body_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        published_at_{nullptr},
        ingest_time_{nullptr},
        meta_{nullptr},
        sentiment_score_bp_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NewsItem::NewsItem(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(NewsItem_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NewsItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewsItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewsItemDefaultTypeInternal() {}
  union {
    NewsItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewsItemDefaultTypeInternal _NewsItem_default_instance_;

inline constexpr NewsBatch::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : items_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NewsBatch::NewsBatch(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(NewsBatch_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NewsBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewsBatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewsBatchDefaultTypeInternal() {}
  union {
    NewsBatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewsBatchDefaultTypeInternal _NewsBatch_default_instance_;
}  // namespace v1
}  // namespace news
}  // namespace ampy
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_ampy_2fnews_2fv1_2fnews_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_ampy_2fnews_2fv1_2fnews_2eproto = nullptr;
const ::uint32_t
    TableStruct_ampy_2fnews_2fv1_2fnews_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::news::v1::NewsItem, _impl_._has_bits_),
        13, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ampy::news::v1::NewsItem, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::ampy::news::v1::NewsItem, _impl_.source_),
        PROTOBUF_FIELD_OFFSET(::ampy::news::v1::NewsItem, _impl_.url_),
        PROTOBUF_FIELD_OFFSET(::ampy::news::v1::NewsItem, _impl_.headline_),
        PROTOBUF_FIELD_OFFSET(::ampy::news::v1::NewsItem, _impl_.body_),
        PROTOBUF_FIELD_OFFSET(::ampy::news::v1::NewsItem, _impl_.tickers_),
        PROTOBUF_FIELD_OFFSET(::ampy::news::v1::NewsItem, _impl_.sentiment_score_bp_),
        PROTOBUF_FIELD_OFFSET(::ampy::news::v1::NewsItem, _impl_.published_at_),
        PROTOBUF_FIELD_OFFSET(::ampy::news::v1::NewsItem, _impl_.ingest_time_),
        PROTOBUF_FIELD_OFFSET(::ampy::news::v1::NewsItem, _impl_.meta_),
        0,
        1,
        2,
        3,
        4,
        ~0u,
        8,
        5,
        6,
        7,
        0x000, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::news::v1::NewsBatch, _impl_.items_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::ampy::news::v1::NewsItem)},
        {23, sizeof(::ampy::news::v1::NewsBatch)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::ampy::news::v1::_NewsItem_default_instance_._instance,
    &::ampy::news::v1::_NewsBatch_default_instance_._instance,
};
const char descriptor_table_protodef_ampy_2fnews_2fv1_2fnews_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\027ampy/news/v1/news.proto\022\014ampy.news.v1\032"
    "\037google/protobuf/timestamp.proto\032\033ampy/c"
    "ommon/v1/common.proto\"\342\002\n\010NewsItem\022\016\n\002id"
    "\030\001 \001(\tR\002id\022\026\n\006source\030\002 \001(\tR\006source\022\020\n\003ur"
    "l\030\003 \001(\tR\003url\022\032\n\010headline\030\004 \001(\tR\010headline"
    "\022\022\n\004body\030\005 \001(\tR\004body\022\030\n\007tickers\030\006 \003(\tR\007t"
    "ickers\022,\n\022sentiment_score_bp\030\007 \001(\005R\020sent"
    "imentScoreBp\022=\n\014published_at\030\010 \001(\0132\032.goo"
    "gle.protobuf.TimestampR\013publishedAt\022;\n\013i"
    "ngest_time\030\t \001(\0132\032.google.protobuf.Times"
    "tampR\ningestTime\022(\n\004meta\030\n \001(\0132\024.ampy.co"
    "mmon.v1.MetaR\004meta\"9\n\tNewsBatch\022,\n\005items"
    "\030\001 \003(\0132\026.ampy.news.v1.NewsItemR\005itemsB\251\001"
    "\n\020com.ampy.news.v1B\tNewsProtoP\001Z8github."
    "com/AmpyFin/ampy-proto/gen/go/ampy/news/"
    "v1;newsv1\242\002\003ANX\252\002\014Ampy.News.V1\312\002\014Ampy\\Ne"
    "ws\\V1\342\002\030Ampy\\News\\V1\\GPBMetadata\352\002\016Ampy:"
    ":News::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_ampy_2fnews_2fv1_2fnews_2eproto_deps[2] = {
        &::descriptor_table_ampy_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_ampy_2fnews_2fv1_2fnews_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ampy_2fnews_2fv1_2fnews_2eproto = {
    false,
    false,
    697,
    descriptor_table_protodef_ampy_2fnews_2fv1_2fnews_2eproto,
    "ampy/news/v1/news.proto",
    &descriptor_table_ampy_2fnews_2fv1_2fnews_2eproto_once,
    descriptor_table_ampy_2fnews_2fv1_2fnews_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_ampy_2fnews_2fv1_2fnews_2eproto::offsets,
    file_level_enum_descriptors_ampy_2fnews_2fv1_2fnews_2eproto,
    file_level_service_descriptors_ampy_2fnews_2fv1_2fnews_2eproto,
};
namespace ampy {
namespace news {
namespace v1 {
// ===================================================================

class NewsItem::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<NewsItem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(NewsItem, _impl_._has_bits_);
};

void NewsItem::clear_published_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.published_at_ != nullptr) _impl_.published_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020U;
}
void NewsItem::clear_ingest_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ingest_time_ != nullptr) _impl_.ingest_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040U;
}
void NewsItem::clear_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080U;
}
NewsItem::NewsItem(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, NewsItem_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.news.v1.NewsItem)
}
PROTOBUF_NDEBUG_INLINE NewsItem::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::news::v1::NewsItem& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tickers_{visibility, arena, from.tickers_},
        id_(arena, from.id_),
        source_(arena, from.source_),
        url_(arena, from.url_),
        headline_(arena, from.headline_),
        body_(arena, from.body_) {}

NewsItem::NewsItem(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const NewsItem& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, NewsItem_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NewsItem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.published_at_ = ((cached_has_bits & 0x00000020U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.published_at_)
                : nullptr;
  _impl_.ingest_time_ = ((cached_has_bits & 0x00000040U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ingest_time_)
                : nullptr;
  _impl_.meta_ = ((cached_has_bits & 0x00000080U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_)
                : nullptr;
  _impl_.sentiment_score_bp_ = from._impl_.sentiment_score_bp_;

  // @@protoc_insertion_point(copy_constructor:ampy.news.v1.NewsItem)
}
PROTOBUF_NDEBUG_INLINE NewsItem::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        tickers_{visibility, arena},
        id_(arena),
        source_(arena),
        url_(arena),
        headline_(arena),
        body_(arena) {}

inline void NewsItem::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, published_at_),
           0,
           offsetof(Impl_, sentiment_score_bp_) -
               offsetof(Impl_, published_at_) +
               sizeof(Impl_::sentiment_score_bp_));
}
NewsItem::~NewsItem() {
  // @@protoc_insertion_point(destructor:ampy.news.v1.NewsItem)
  SharedDtor(*this);
}
inline void NewsItem::SharedDtor(MessageLite& self) {
  NewsItem& this_ = static_cast<NewsItem&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.source_.Destroy();
  this_._impl_.url_.Destroy();
  this_._impl_.headline_.Destroy();
  this_._impl_.body_.Destroy();
  delete this_._impl_.published_at_;
  delete this_._impl_.ingest_time_;
  delete this_._impl_.meta_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL NewsItem::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) NewsItem(arena);
}
constexpr auto NewsItem::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.tickers_) +
          decltype(NewsItem::_impl_.tickers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(NewsItem), alignof(NewsItem), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&NewsItem::PlacementNew_,
                                 sizeof(NewsItem),
                                 alignof(NewsItem));
  }
}
constexpr auto NewsItem::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_NewsItem_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &NewsItem::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<NewsItem>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &NewsItem::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<NewsItem>(), &NewsItem::ByteSizeLong,
              &NewsItem::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(NewsItem, _impl_._cached_size_),
          false,
      },
      &NewsItem::kDescriptorMethods,
      &descriptor_table_ampy_2fnews_2fv1_2fnews_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull NewsItem_class_data_ =
        NewsItem::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
NewsItem::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&NewsItem_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(NewsItem_class_data_.tc_table);
  return NewsItem_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 3, 68, 2>
NewsItem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NewsItem, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    NewsItem_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::news::v1::NewsItem>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.id_)}},
    // string source = 2 [json_name = "source"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.source_)}},
    // string url = 3 [json_name = "url"];
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.url_)}},
    // string headline = 4 [json_name = "headline"];
    {::_pbi::TcParser::FastUS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.headline_)}},
    // string body = 5 [json_name = "body"];
    {::_pbi::TcParser::FastUS1,
     {42, 4, 0, PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.body_)}},
    // repeated string tickers = 6 [json_name = "tickers"];
    {::_pbi::TcParser::FastUR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.tickers_)}},
    // int32 sentiment_score_bp = 7 [json_name = "sentimentScoreBp"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewsItem, _impl_.sentiment_score_bp_), 8>(),
     {56, 8, 0, PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.sentiment_score_bp_)}},
    // .google.protobuf.Timestamp published_at = 8 [json_name = "publishedAt"];
    {::_pbi::TcParser::FastMtS1,
     {66, 5, 0, PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.published_at_)}},
    // .google.protobuf.Timestamp ingest_time = 9 [json_name = "ingestTime"];
    {::_pbi::TcParser::FastMtS1,
     {74, 6, 1, PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.ingest_time_)}},
    // .ampy.common.v1.Meta meta = 10 [json_name = "meta"];
    {::_pbi::TcParser::FastMtS1,
     {82, 7, 2, PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.meta_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string source = 2 [json_name = "source"];
    {PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.source_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string url = 3 [json_name = "url"];
    {PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.url_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string headline = 4 [json_name = "headline"];
    {PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.headline_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string body = 5 [json_name = "body"];
    {PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.body_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string tickers = 6 [json_name = "tickers"];
    {PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.tickers_), -1, 0, (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // int32 sentiment_score_bp = 7 [json_name = "sentimentScoreBp"];
    {PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.sentiment_score_bp_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .google.protobuf.Timestamp published_at = 8 [json_name = "publishedAt"];
    {PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.published_at_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp ingest_time = 9 [json_name = "ingestTime"];
    {PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.ingest_time_), _Internal::kHasBitsOffset + 6, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Meta meta = 10 [json_name = "meta"];
    {PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.meta_), _Internal::kHasBitsOffset + 7, 2, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Meta>()},
  }},
  {{
    "\25\2\6\3\10\4\7\0\0\0\0\0\0\0\0\0"
    "ampy.news.v1.NewsItem"
    "id"
    "source"
    "url"
    "headline"
    "body"
    "tickers"
  }},
};
PROTOBUF_NOINLINE void NewsItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.news.v1.NewsItem)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tickers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.source_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      _impl_.headline_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      ABSL_DCHECK(_impl_.published_at_ != nullptr);
      _impl_.published_at_->Clear();
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      ABSL_DCHECK(_impl_.ingest_time_ != nullptr);
      _impl_.ingest_time_->Clear();
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      ABSL_DCHECK(_impl_.meta_ != nullptr);
      _impl_.meta_->Clear();
    }
  }
  _impl_.sentiment_score_bp_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL NewsItem::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const NewsItem& this_ = static_cast<const NewsItem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL NewsItem::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const NewsItem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.news.v1.NewsItem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1 [json_name = "id"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_id().empty()) {
      const ::std::string& _s = this_._internal_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ampy.news.v1.NewsItem.id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string source = 2 [json_name = "source"];
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_source().empty()) {
      const ::std::string& _s = this_._internal_source();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ampy.news.v1.NewsItem.source");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string url = 3 [json_name = "url"];
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (!this_._internal_url().empty()) {
      const ::std::string& _s = this_._internal_url();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ampy.news.v1.NewsItem.url");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string headline = 4 [json_name = "headline"];
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (!this_._internal_headline().empty()) {
      const ::std::string& _s = this_._internal_headline();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ampy.news.v1.NewsItem.headline");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // string body = 5 [json_name = "body"];
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (!this_._internal_body().empty()) {
      const ::std::string& _s = this_._internal_body();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ampy.news.v1.NewsItem.body");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // repeated string tickers = 6 [json_name = "tickers"];
  for (int i = 0, n = this_._internal_tickers_size(); i < n; ++i) {
    const auto& s = this_._internal_tickers().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ampy.news.v1.NewsItem.tickers");
    target = stream->WriteString(6, s, target);
  }

  // int32 sentiment_score_bp = 7 [json_name = "sentimentScoreBp"];
  if ((this_._impl_._has_bits_[0] & 0x00000100U) != 0) {
    if (this_._internal_sentiment_score_bp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<7>(
              stream, this_._internal_sentiment_score_bp(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .google.protobuf.Timestamp published_at = 8 [json_name = "publishedAt"];
  if ((cached_has_bits & 0x00000020U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.published_at_, this_._impl_.published_at_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Timestamp ingest_time = 9 [json_name = "ingestTime"];
  if ((cached_has_bits & 0x00000040U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.ingest_time_, this_._impl_.ingest_time_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Meta meta = 10 [json_name = "meta"];
  if ((cached_has_bits & 0x00000080U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *this_._impl_.meta_, this_._impl_.meta_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.news.v1.NewsItem)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t NewsItem::ByteSizeLong(const MessageLite& base) {
  const NewsItem& this_ = static_cast<const NewsItem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t NewsItem::ByteSizeLong() const {
  const NewsItem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.news.v1.NewsItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string tickers = 6 [json_name = "tickers"];
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_tickers().size());
      for (int i = 0, n = this_._internal_tickers().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_tickers().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // string id = 1 [json_name = "id"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_id());
      }
    }
    // string source = 2 [json_name = "source"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_source().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_source());
      }
    }
    // string url = 3 [json_name = "url"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (!this_._internal_url().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_url());
      }
    }
    // string headline = 4 [json_name = "headline"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (!this_._internal_headline().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_headline());
      }
    }
    // string body = 5 [json_name = "body"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (!this_._internal_body().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_body());
      }
    }
    // .google.protobuf.Timestamp published_at = 8 [json_name = "publishedAt"];
    if ((cached_has_bits & 0x00000020U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.published_at_);
    }
    // .google.protobuf.Timestamp ingest_time = 9 [json_name = "ingestTime"];
    if ((cached_has_bits & 0x00000040U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ingest_time_);
    }
    // .ampy.common.v1.Meta meta = 10 [json_name = "meta"];
    if ((cached_has_bits & 0x00000080U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.meta_);
    }
  }
   {
    // int32 sentiment_score_bp = 7 [json_name = "sentimentScoreBp"];
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (this_._internal_sentiment_score_bp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_sentiment_score_bp());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void NewsItem::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NewsItem*>(&to_msg);
  auto& from = static_cast<const NewsItem&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.news.v1.NewsItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tickers()->MergeFrom(from._internal_tickers());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_id().empty()) {
        _this->_internal_set_id(from._internal_id());
      } else {
        if (_this->_impl_.id_.IsDefault()) {
          _this->_internal_set_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_source().empty()) {
        _this->_internal_set_source(from._internal_source());
      } else {
        if (_this->_impl_.source_.IsDefault()) {
          _this->_internal_set_source("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (!from._internal_url().empty()) {
        _this->_internal_set_url(from._internal_url());
      } else {
        if (_this->_impl_.url_.IsDefault()) {
          _this->_internal_set_url("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (!from._internal_headline().empty()) {
        _this->_internal_set_headline(from._internal_headline());
      } else {
        if (_this->_impl_.headline_.IsDefault()) {
          _this->_internal_set_headline("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (!from._internal_body().empty()) {
        _this->_internal_set_body(from._internal_body());
      } else {
        if (_this->_impl_.body_.IsDefault()) {
          _this->_internal_set_body("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      ABSL_DCHECK(from._impl_.published_at_ != nullptr);
      if (_this->_impl_.published_at_ == nullptr) {
        _this->_impl_.published_at_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.published_at_);
      } else {
        _this->_impl_.published_at_->MergeFrom(*from._impl_.published_at_);
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      ABSL_DCHECK(from._impl_.ingest_time_ != nullptr);
      if (_this->_impl_.ingest_time_ == nullptr) {
        _this->_impl_.ingest_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ingest_time_);
      } else {
        _this->_impl_.ingest_time_->MergeFrom(*from._impl_.ingest_time_);
      }
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      ABSL_DCHECK(from._impl_.meta_ != nullptr);
      if (_this->_impl_.meta_ == nullptr) {
        _this->_impl_.meta_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_);
      } else {
        _this->_impl_.meta_->MergeFrom(*from._impl_.meta_);
      }
    }
  }
  if ((cached_has_bits & 0x00000100U) != 0) {
    if (from._internal_sentiment_score_bp() != 0) {
      _this->_impl_.sentiment_score_bp_ = from._impl_.sentiment_score_bp_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NewsItem::CopyFrom(const NewsItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.news.v1.NewsItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NewsItem::InternalSwap(NewsItem* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tickers_.InternalSwap(&other->_impl_.tickers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_, &other->_impl_.source_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, &other->_impl_.url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.headline_, &other->_impl_.headline_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.body_, &other->_impl_.body_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.sentiment_score_bp_)
      + sizeof(NewsItem::_impl_.sentiment_score_bp_)
      - PROTOBUF_FIELD_OFFSET(NewsItem, _impl_.published_at_)>(
          reinterpret_cast<char*>(&_impl_.published_at_),
          reinterpret_cast<char*>(&other->_impl_.published_at_));
}

::google::protobuf::Metadata NewsItem::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NewsBatch::_Internal {
 public:
};

NewsBatch::NewsBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, NewsBatch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.news.v1.NewsBatch)
}
PROTOBUF_NDEBUG_INLINE NewsBatch::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::news::v1::NewsBatch& from_msg)
      : items_{visibility, arena, from.items_},
        _cached_size_{0} {}

NewsBatch::NewsBatch(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const NewsBatch& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, NewsBatch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NewsBatch* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:ampy.news.v1.NewsBatch)
}
PROTOBUF_NDEBUG_INLINE NewsBatch::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : items_{visibility, arena},
        _cached_size_{0} {}

inline void NewsBatch::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
NewsBatch::~NewsBatch() {
  // @@protoc_insertion_point(destructor:ampy.news.v1.NewsBatch)
  SharedDtor(*this);
}
inline void NewsBatch::SharedDtor(MessageLite& self) {
  NewsBatch& this_ = static_cast<NewsBatch&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL NewsBatch::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) NewsBatch(arena);
}
constexpr auto NewsBatch::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(NewsBatch, _impl_.items_) +
          decltype(NewsBatch::_impl_.items_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(NewsBatch), alignof(NewsBatch), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&NewsBatch::PlacementNew_,
                                 sizeof(NewsBatch),
                                 alignof(NewsBatch));
  }
}
constexpr auto NewsBatch::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_NewsBatch_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &NewsBatch::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<NewsBatch>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &NewsBatch::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<NewsBatch>(), &NewsBatch::ByteSizeLong,
              &NewsBatch::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(NewsBatch, _impl_._cached_size_),
          false,
      },
      &NewsBatch::kDescriptorMethods,
      &descriptor_table_ampy_2fnews_2fv1_2fnews_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull NewsBatch_class_data_ =
        NewsBatch::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
NewsBatch::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&NewsBatch_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(NewsBatch_class_data_.tc_table);
  return NewsBatch_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
NewsBatch::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    NewsBatch_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::news::v1::NewsBatch>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .ampy.news.v1.NewsItem items = 1 [json_name = "items"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NewsBatch, _impl_.items_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .ampy.news.v1.NewsItem items = 1 [json_name = "items"];
    {PROTOBUF_FIELD_OFFSET(NewsBatch, _impl_.items_), 0, 0, (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::news::v1::NewsItem>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void NewsBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.news.v1.NewsBatch)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL NewsBatch::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const NewsBatch& this_ = static_cast<const NewsBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL NewsBatch::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const NewsBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.news.v1.NewsBatch)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .ampy.news.v1.NewsItem items = 1 [json_name = "items"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_items_size());
       i < n; i++) {
    const auto& repfield = this_._internal_items().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.news.v1.NewsBatch)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t NewsBatch::ByteSizeLong(const MessageLite& base) {
  const NewsBatch& this_ = static_cast<const NewsBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t NewsBatch::ByteSizeLong() const {
  const NewsBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.news.v1.NewsBatch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .ampy.news.v1.NewsItem items = 1 [json_name = "items"];
    {
      total_size += 1UL * this_._internal_items_size();
      for (const auto& msg : this_._internal_items()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void NewsBatch::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NewsBatch*>(&to_msg);
  auto& from = static_cast<const NewsBatch&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.news.v1.NewsBatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(
      from._internal_items());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NewsBatch::CopyFrom(const NewsBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.news.v1.NewsBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NewsBatch::InternalSwap(NewsBatch* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::google::protobuf::Metadata NewsBatch::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace news
}  // namespace ampy
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_ampy_2fnews_2fv1_2fnews_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
