// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: ampy/news/v1/news.proto

package newsv1

import (
	v1 "github.com/yeonholee50/ampy-proto/gen/go/ampy/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewsItem struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // stable dedupe id, e.g., "marketbeat:2025-09-05:amzn-..."
	Source           string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"` // "marketbeat", "rss", etc.
	Url              string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Headline         string                 `protobuf:"bytes,4,opt,name=headline,proto3" json:"headline,omitempty"`
	Body             string                 `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"` // may be truncated by producer; consumers should handle
	Tickers          []string               `protobuf:"bytes,6,rep,name=tickers,proto3" json:"tickers,omitempty"`
	SentimentScoreBp int32                  `protobuf:"varint,7,opt,name=sentiment_score_bp,json=sentimentScoreBp,proto3" json:"sentiment_score_bp,omitempty"` // basis points, [-10000,10000] optional
	PublishedAt      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	IngestTime       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=ingest_time,json=ingestTime,proto3" json:"ingest_time,omitempty"`
	Meta             *v1.Meta               `protobuf:"bytes,10,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NewsItem) Reset() {
	*x = NewsItem{}
	mi := &file_ampy_news_v1_news_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsItem) ProtoMessage() {}

func (x *NewsItem) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_news_v1_news_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsItem.ProtoReflect.Descriptor instead.
func (*NewsItem) Descriptor() ([]byte, []int) {
	return file_ampy_news_v1_news_proto_rawDescGZIP(), []int{0}
}

func (x *NewsItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewsItem) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *NewsItem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NewsItem) GetHeadline() string {
	if x != nil {
		return x.Headline
	}
	return ""
}

func (x *NewsItem) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *NewsItem) GetTickers() []string {
	if x != nil {
		return x.Tickers
	}
	return nil
}

func (x *NewsItem) GetSentimentScoreBp() int32 {
	if x != nil {
		return x.SentimentScoreBp
	}
	return 0
}

func (x *NewsItem) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

func (x *NewsItem) GetIngestTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IngestTime
	}
	return nil
}

func (x *NewsItem) GetMeta() *v1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type NewsBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*NewsItem            `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewsBatch) Reset() {
	*x = NewsBatch{}
	mi := &file_ampy_news_v1_news_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsBatch) ProtoMessage() {}

func (x *NewsBatch) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_news_v1_news_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsBatch.ProtoReflect.Descriptor instead.
func (*NewsBatch) Descriptor() ([]byte, []int) {
	return file_ampy_news_v1_news_proto_rawDescGZIP(), []int{1}
}

func (x *NewsBatch) GetItems() []*NewsItem {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_ampy_news_v1_news_proto protoreflect.FileDescriptor

const file_ampy_news_v1_news_proto_rawDesc = "" +
	"\n" +
	"\x17ampy/news/v1/news.proto\x12\fampy.news.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bampy/common/v1/common.proto\"\xe2\x02\n" +
	"\bNewsItem\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\x12\x1a\n" +
	"\bheadline\x18\x04 \x01(\tR\bheadline\x12\x12\n" +
	"\x04body\x18\x05 \x01(\tR\x04body\x12\x18\n" +
	"\atickers\x18\x06 \x03(\tR\atickers\x12,\n" +
	"\x12sentiment_score_bp\x18\a \x01(\x05R\x10sentimentScoreBp\x12=\n" +
	"\fpublished_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\vpublishedAt\x12;\n" +
	"\vingest_time\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"ingestTime\x12(\n" +
	"\x04meta\x18\n" +
	" \x01(\v2\x14.ampy.common.v1.MetaR\x04meta\"9\n" +
	"\tNewsBatch\x12,\n" +
	"\x05items\x18\x01 \x03(\v2\x16.ampy.news.v1.NewsItemR\x05itemsB\xad\x01\n" +
	"\x10com.ampy.news.v1B\tNewsProtoP\x01Z<github.com/yeonholee50/ampy-proto/gen/go/ampy/news/v1;newsv1\xa2\x02\x03ANX\xaa\x02\fAmpy.News.V1\xca\x02\fAmpy\\News\\V1\xe2\x02\x18Ampy\\News\\V1\\GPBMetadata\xea\x02\x0eAmpy::News::V1b\x06proto3"

var (
	file_ampy_news_v1_news_proto_rawDescOnce sync.Once
	file_ampy_news_v1_news_proto_rawDescData []byte
)

func file_ampy_news_v1_news_proto_rawDescGZIP() []byte {
	file_ampy_news_v1_news_proto_rawDescOnce.Do(func() {
		file_ampy_news_v1_news_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ampy_news_v1_news_proto_rawDesc), len(file_ampy_news_v1_news_proto_rawDesc)))
	})
	return file_ampy_news_v1_news_proto_rawDescData
}

var file_ampy_news_v1_news_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ampy_news_v1_news_proto_goTypes = []any{
	(*NewsItem)(nil),              // 0: ampy.news.v1.NewsItem
	(*NewsBatch)(nil),             // 1: ampy.news.v1.NewsBatch
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
	(*v1.Meta)(nil),               // 3: ampy.common.v1.Meta
}
var file_ampy_news_v1_news_proto_depIdxs = []int32{
	2, // 0: ampy.news.v1.NewsItem.published_at:type_name -> google.protobuf.Timestamp
	2, // 1: ampy.news.v1.NewsItem.ingest_time:type_name -> google.protobuf.Timestamp
	3, // 2: ampy.news.v1.NewsItem.meta:type_name -> ampy.common.v1.Meta
	0, // 3: ampy.news.v1.NewsBatch.items:type_name -> ampy.news.v1.NewsItem
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_ampy_news_v1_news_proto_init() }
func file_ampy_news_v1_news_proto_init() {
	if File_ampy_news_v1_news_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ampy_news_v1_news_proto_rawDesc), len(file_ampy_news_v1_news_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ampy_news_v1_news_proto_goTypes,
		DependencyIndexes: file_ampy_news_v1_news_proto_depIdxs,
		MessageInfos:      file_ampy_news_v1_news_proto_msgTypes,
	}.Build()
	File_ampy_news_v1_news_proto = out.File
	file_ampy_news_v1_news_proto_goTypes = nil
	file_ampy_news_v1_news_proto_depIdxs = nil
}
