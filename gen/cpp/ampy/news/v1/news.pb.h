// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ampy/news/v1/news.proto
// Protobuf C++ Version: 6.32.0

#ifndef ampy_2fnews_2fv1_2fnews_2eproto_2epb_2eh
#define ampy_2fnews_2fv1_2fnews_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6032000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "ampy/common/v1/common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ampy_2fnews_2fv1_2fnews_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ampy_2fnews_2fv1_2fnews_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_ampy_2fnews_2fv1_2fnews_2eproto;
}  // extern "C"
namespace ampy {
namespace news {
namespace v1 {
class NewsBatch;
struct NewsBatchDefaultTypeInternal;
extern NewsBatchDefaultTypeInternal _NewsBatch_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull NewsBatch_class_data_;
class NewsItem;
struct NewsItemDefaultTypeInternal;
extern NewsItemDefaultTypeInternal _NewsItem_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull NewsItem_class_data_;
}  // namespace v1
}  // namespace news
}  // namespace ampy
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ampy {
namespace news {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class NewsItem final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ampy.news.v1.NewsItem) */ {
 public:
  inline NewsItem() : NewsItem(nullptr) {}
  ~NewsItem() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NewsItem* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NewsItem));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewsItem(::google::protobuf::internal::ConstantInitialized);

  inline NewsItem(const NewsItem& from) : NewsItem(nullptr, from) {}
  inline NewsItem(NewsItem&& from) noexcept
      : NewsItem(nullptr, ::std::move(from)) {}
  inline NewsItem& operator=(const NewsItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewsItem& operator=(NewsItem&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewsItem& default_instance() {
    return *reinterpret_cast<const NewsItem*>(
        &_NewsItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NewsItem& a, NewsItem& b) { a.Swap(&b); }
  inline void Swap(NewsItem* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewsItem* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewsItem* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NewsItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewsItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewsItem& from) { NewsItem::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NewsItem* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ampy.news.v1.NewsItem"; }

 protected:
  explicit NewsItem(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  NewsItem(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const NewsItem& from);
  NewsItem(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, NewsItem&& from) noexcept
      : NewsItem(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTickersFieldNumber = 6,
    kIdFieldNumber = 1,
    kSourceFieldNumber = 2,
    kUrlFieldNumber = 3,
    kHeadlineFieldNumber = 4,
    kBodyFieldNumber = 5,
    kPublishedAtFieldNumber = 8,
    kIngestTimeFieldNumber = 9,
    kMetaFieldNumber = 10,
    kSentimentScoreBpFieldNumber = 7,
  };
  // repeated string tickers = 6 [json_name = "tickers"];
  int tickers_size() const;
  private:
  int _internal_tickers_size() const;

  public:
  void clear_tickers() ;
  const ::std::string& tickers(int index) const;
  ::std::string* PROTOBUF_NONNULL mutable_tickers(int index);
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_tickers(int index, Arg_&& value, Args_... args);
  ::std::string* PROTOBUF_NONNULL add_tickers();
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void add_tickers(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tickers() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL mutable_tickers();

  private:
  const ::google::protobuf::RepeatedPtrField<::std::string>& _internal_tickers() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL _internal_mutable_tickers();

  public:
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const ::std::string& id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // string source = 2 [json_name = "source"];
  void clear_source() ;
  const ::std::string& source() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_source(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_source();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_source();
  void set_allocated_source(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_source() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_source(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_source();

  public:
  // string url = 3 [json_name = "url"];
  void clear_url() ;
  const ::std::string& url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_url();
  void set_allocated_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_url();

  public:
  // string headline = 4 [json_name = "headline"];
  void clear_headline() ;
  const ::std::string& headline() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_headline(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_headline();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_headline();
  void set_allocated_headline(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_headline() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_headline(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_headline();

  public:
  // string body = 5 [json_name = "body"];
  void clear_body() ;
  const ::std::string& body() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_body();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_body();
  void set_allocated_body(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_body() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_body(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_body();

  public:
  // .google.protobuf.Timestamp published_at = 8 [json_name = "publishedAt"];
  bool has_published_at() const;
  void clear_published_at() ;
  const ::google::protobuf::Timestamp& published_at() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_published_at();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_published_at();
  void set_allocated_published_at(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_published_at(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_published_at();

  private:
  const ::google::protobuf::Timestamp& _internal_published_at() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_published_at();

  public:
  // .google.protobuf.Timestamp ingest_time = 9 [json_name = "ingestTime"];
  bool has_ingest_time() const;
  void clear_ingest_time() ;
  const ::google::protobuf::Timestamp& ingest_time() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_ingest_time();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_ingest_time();
  void set_allocated_ingest_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_ingest_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_ingest_time();

  private:
  const ::google::protobuf::Timestamp& _internal_ingest_time() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_ingest_time();

  public:
  // .ampy.common.v1.Meta meta = 10 [json_name = "meta"];
  bool has_meta() const;
  void clear_meta() ;
  const ::ampy::common::v1::Meta& meta() const;
  [[nodiscard]] ::ampy::common::v1::Meta* PROTOBUF_NULLABLE release_meta();
  ::ampy::common::v1::Meta* PROTOBUF_NONNULL mutable_meta();
  void set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::Meta* PROTOBUF_NULLABLE unsafe_arena_release_meta();

  private:
  const ::ampy::common::v1::Meta& _internal_meta() const;
  ::ampy::common::v1::Meta* PROTOBUF_NONNULL _internal_mutable_meta();

  public:
  // int32 sentiment_score_bp = 7 [json_name = "sentimentScoreBp"];
  void clear_sentiment_score_bp() ;
  ::int32_t sentiment_score_bp() const;
  void set_sentiment_score_bp(::int32_t value);

  private:
  ::int32_t _internal_sentiment_score_bp() const;
  void _internal_set_sentiment_score_bp(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ampy.news.v1.NewsItem)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10,
                                   3, 68,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const NewsItem& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<::std::string> tickers_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr source_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::google::protobuf::internal::ArenaStringPtr headline_;
    ::google::protobuf::internal::ArenaStringPtr body_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE published_at_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE ingest_time_;
    ::ampy::common::v1::Meta* PROTOBUF_NULLABLE meta_;
    ::int32_t sentiment_score_bp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ampy_2fnews_2fv1_2fnews_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull NewsItem_class_data_;
// -------------------------------------------------------------------

class NewsBatch final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ampy.news.v1.NewsBatch) */ {
 public:
  inline NewsBatch() : NewsBatch(nullptr) {}
  ~NewsBatch() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NewsBatch* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NewsBatch));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewsBatch(::google::protobuf::internal::ConstantInitialized);

  inline NewsBatch(const NewsBatch& from) : NewsBatch(nullptr, from) {}
  inline NewsBatch(NewsBatch&& from) noexcept
      : NewsBatch(nullptr, ::std::move(from)) {}
  inline NewsBatch& operator=(const NewsBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewsBatch& operator=(NewsBatch&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewsBatch& default_instance() {
    return *reinterpret_cast<const NewsBatch*>(
        &_NewsBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NewsBatch& a, NewsBatch& b) { a.Swap(&b); }
  inline void Swap(NewsBatch* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewsBatch* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewsBatch* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NewsBatch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewsBatch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewsBatch& from) { NewsBatch::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NewsBatch* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ampy.news.v1.NewsBatch"; }

 protected:
  explicit NewsBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  NewsBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const NewsBatch& from);
  NewsBatch(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, NewsBatch&& from) noexcept
      : NewsBatch(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .ampy.news.v1.NewsItem items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::ampy::news::v1::NewsItem* PROTOBUF_NONNULL mutable_items(int index);
  ::google::protobuf::RepeatedPtrField<::ampy::news::v1::NewsItem>* PROTOBUF_NONNULL mutable_items();

  private:
  const ::google::protobuf::RepeatedPtrField<::ampy::news::v1::NewsItem>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::ampy::news::v1::NewsItem>* PROTOBUF_NONNULL _internal_mutable_items();
  public:
  const ::ampy::news::v1::NewsItem& items(int index) const;
  ::ampy::news::v1::NewsItem* PROTOBUF_NONNULL add_items();
  const ::google::protobuf::RepeatedPtrField<::ampy::news::v1::NewsItem>& items() const;
  // @@protoc_insertion_point(class_scope:ampy.news.v1.NewsBatch)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const NewsBatch& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ampy::news::v1::NewsItem > items_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ampy_2fnews_2fv1_2fnews_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull NewsBatch_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NewsItem

// string id = 1 [json_name = "id"];
inline void NewsItem::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& NewsItem::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.news.v1.NewsItem.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void NewsItem::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ampy.news.v1.NewsItem.id)
}
inline ::std::string* PROTOBUF_NONNULL NewsItem::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ampy.news.v1.NewsItem.id)
  return _s;
}
inline const ::std::string& NewsItem::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void NewsItem::_internal_set_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL NewsItem::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE NewsItem::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.news.v1.NewsItem.id)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void NewsItem::set_allocated_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ampy.news.v1.NewsItem.id)
}

// string source = 2 [json_name = "source"];
inline void NewsItem::clear_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline const ::std::string& NewsItem::source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.news.v1.NewsItem.source)
  return _internal_source();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void NewsItem::set_source(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  _impl_.source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ampy.news.v1.NewsItem.source)
}
inline ::std::string* PROTOBUF_NONNULL NewsItem::mutable_source()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:ampy.news.v1.NewsItem.source)
  return _s;
}
inline const ::std::string& NewsItem::_internal_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_.Get();
}
inline void NewsItem::_internal_set_source(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  _impl_.source_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL NewsItem::_internal_mutable_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  return _impl_.source_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE NewsItem::release_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.news.v1.NewsItem.source)
  if ((_impl_._has_bits_[0] & 0x00000002U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002U;
  auto* released = _impl_.source_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.source_.Set("", GetArena());
  }
  return released;
}
inline void NewsItem::set_allocated_source(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  _impl_.source_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ampy.news.v1.NewsItem.source)
}

// string url = 3 [json_name = "url"];
inline void NewsItem::clear_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline const ::std::string& NewsItem::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.news.v1.NewsItem.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void NewsItem::set_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ampy.news.v1.NewsItem.url)
}
inline ::std::string* PROTOBUF_NONNULL NewsItem::mutable_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:ampy.news.v1.NewsItem.url)
  return _s;
}
inline const ::std::string& NewsItem::_internal_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.url_.Get();
}
inline void NewsItem::_internal_set_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  _impl_.url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL NewsItem::_internal_mutable_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  return _impl_.url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE NewsItem::release_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.news.v1.NewsItem.url)
  if ((_impl_._has_bits_[0] & 0x00000004U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004U;
  auto* released = _impl_.url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.url_.Set("", GetArena());
  }
  return released;
}
inline void NewsItem::set_allocated_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }
  _impl_.url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ampy.news.v1.NewsItem.url)
}

// string headline = 4 [json_name = "headline"];
inline void NewsItem::clear_headline() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008U;
}
inline const ::std::string& NewsItem::headline() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.news.v1.NewsItem.headline)
  return _internal_headline();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void NewsItem::set_headline(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008U;
  _impl_.headline_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ampy.news.v1.NewsItem.headline)
}
inline ::std::string* PROTOBUF_NONNULL NewsItem::mutable_headline()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_headline();
  // @@protoc_insertion_point(field_mutable:ampy.news.v1.NewsItem.headline)
  return _s;
}
inline const ::std::string& NewsItem::_internal_headline() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headline_.Get();
}
inline void NewsItem::_internal_set_headline(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008U;
  _impl_.headline_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL NewsItem::_internal_mutable_headline() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008U;
  return _impl_.headline_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE NewsItem::release_headline() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.news.v1.NewsItem.headline)
  if ((_impl_._has_bits_[0] & 0x00000008U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008U;
  auto* released = _impl_.headline_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.headline_.Set("", GetArena());
  }
  return released;
}
inline void NewsItem::set_allocated_headline(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008U;
  }
  _impl_.headline_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.headline_.IsDefault()) {
    _impl_.headline_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ampy.news.v1.NewsItem.headline)
}

// string body = 5 [json_name = "body"];
inline void NewsItem::clear_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010U;
}
inline const ::std::string& NewsItem::body() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.news.v1.NewsItem.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void NewsItem::set_body(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010U;
  _impl_.body_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ampy.news.v1.NewsItem.body)
}
inline ::std::string* PROTOBUF_NONNULL NewsItem::mutable_body()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:ampy.news.v1.NewsItem.body)
  return _s;
}
inline const ::std::string& NewsItem::_internal_body() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.body_.Get();
}
inline void NewsItem::_internal_set_body(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010U;
  _impl_.body_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL NewsItem::_internal_mutable_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010U;
  return _impl_.body_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE NewsItem::release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.news.v1.NewsItem.body)
  if ((_impl_._has_bits_[0] & 0x00000010U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010U;
  auto* released = _impl_.body_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.body_.Set("", GetArena());
  }
  return released;
}
inline void NewsItem::set_allocated_body(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010U;
  }
  _impl_.body_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ampy.news.v1.NewsItem.body)
}

// repeated string tickers = 6 [json_name = "tickers"];
inline int NewsItem::_internal_tickers_size() const {
  return _internal_tickers().size();
}
inline int NewsItem::tickers_size() const {
  return _internal_tickers_size();
}
inline void NewsItem::clear_tickers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tickers_.Clear();
}
inline ::std::string* PROTOBUF_NONNULL NewsItem::add_tickers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::std::string* _s = _internal_mutable_tickers()->Add();
  // @@protoc_insertion_point(field_add_mutable:ampy.news.v1.NewsItem.tickers)
  return _s;
}
inline const ::std::string& NewsItem::tickers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.news.v1.NewsItem.tickers)
  return _internal_tickers().Get(index);
}
inline ::std::string* PROTOBUF_NONNULL NewsItem::mutable_tickers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ampy.news.v1.NewsItem.tickers)
  return _internal_mutable_tickers()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void NewsItem::set_tickers(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_tickers()->Mutable(index), ::std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:ampy.news.v1.NewsItem.tickers)
}
template <typename Arg_, typename... Args_>
inline void NewsItem::add_tickers(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_tickers(),
                               ::std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:ampy.news.v1.NewsItem.tickers)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>& NewsItem::tickers()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ampy.news.v1.NewsItem.tickers)
  return _internal_tickers();
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
NewsItem::mutable_tickers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ampy.news.v1.NewsItem.tickers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tickers();
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
NewsItem::_internal_tickers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tickers_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
NewsItem::_internal_mutable_tickers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tickers_;
}

// int32 sentiment_score_bp = 7 [json_name = "sentimentScoreBp"];
inline void NewsItem::clear_sentiment_score_bp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sentiment_score_bp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100U;
}
inline ::int32_t NewsItem::sentiment_score_bp() const {
  // @@protoc_insertion_point(field_get:ampy.news.v1.NewsItem.sentiment_score_bp)
  return _internal_sentiment_score_bp();
}
inline void NewsItem::set_sentiment_score_bp(::int32_t value) {
  _internal_set_sentiment_score_bp(value);
  _impl_._has_bits_[0] |= 0x00000100U;
  // @@protoc_insertion_point(field_set:ampy.news.v1.NewsItem.sentiment_score_bp)
}
inline ::int32_t NewsItem::_internal_sentiment_score_bp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sentiment_score_bp_;
}
inline void NewsItem::_internal_set_sentiment_score_bp(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sentiment_score_bp_ = value;
}

// .google.protobuf.Timestamp published_at = 8 [json_name = "publishedAt"];
inline bool NewsItem::has_published_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.published_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& NewsItem::_internal_published_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.published_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& NewsItem::published_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.news.v1.NewsItem.published_at)
  return _internal_published_at();
}
inline void NewsItem::unsafe_arena_set_allocated_published_at(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.published_at_);
  }
  _impl_.published_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.news.v1.NewsItem.published_at)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE NewsItem::release_published_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020U;
  ::google::protobuf::Timestamp* released = _impl_.published_at_;
  _impl_.published_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE NewsItem::unsafe_arena_release_published_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.news.v1.NewsItem.published_at)

  _impl_._has_bits_[0] &= ~0x00000020U;
  ::google::protobuf::Timestamp* temp = _impl_.published_at_;
  _impl_.published_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL NewsItem::_internal_mutable_published_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.published_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.published_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.published_at_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL NewsItem::mutable_published_at()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020U;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_published_at();
  // @@protoc_insertion_point(field_mutable:ampy.news.v1.NewsItem.published_at)
  return _msg;
}
inline void NewsItem::set_allocated_published_at(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.published_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020U;
  }

  _impl_.published_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.news.v1.NewsItem.published_at)
}

// .google.protobuf.Timestamp ingest_time = 9 [json_name = "ingestTime"];
inline bool NewsItem::has_ingest_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ingest_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& NewsItem::_internal_ingest_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.ingest_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& NewsItem::ingest_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.news.v1.NewsItem.ingest_time)
  return _internal_ingest_time();
}
inline void NewsItem::unsafe_arena_set_allocated_ingest_time(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ingest_time_);
  }
  _impl_.ingest_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.news.v1.NewsItem.ingest_time)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE NewsItem::release_ingest_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040U;
  ::google::protobuf::Timestamp* released = _impl_.ingest_time_;
  _impl_.ingest_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE NewsItem::unsafe_arena_release_ingest_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.news.v1.NewsItem.ingest_time)

  _impl_._has_bits_[0] &= ~0x00000040U;
  ::google::protobuf::Timestamp* temp = _impl_.ingest_time_;
  _impl_.ingest_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL NewsItem::_internal_mutable_ingest_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ingest_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.ingest_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.ingest_time_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL NewsItem::mutable_ingest_time()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040U;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_ingest_time();
  // @@protoc_insertion_point(field_mutable:ampy.news.v1.NewsItem.ingest_time)
  return _msg;
}
inline void NewsItem::set_allocated_ingest_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ingest_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040U;
  }

  _impl_.ingest_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.news.v1.NewsItem.ingest_time)
}

// .ampy.common.v1.Meta meta = 10 [json_name = "meta"];
inline bool NewsItem::has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::Meta& NewsItem::_internal_meta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::Meta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::Meta&>(::ampy::common::v1::_Meta_default_instance_);
}
inline const ::ampy::common::v1::Meta& NewsItem::meta() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.news.v1.NewsItem.meta)
  return _internal_meta();
}
inline void NewsItem::unsafe_arena_set_allocated_meta(
    ::ampy::common::v1::Meta* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.news.v1.NewsItem.meta)
}
inline ::ampy::common::v1::Meta* PROTOBUF_NULLABLE NewsItem::release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080U;
  ::ampy::common::v1::Meta* released = _impl_.meta_;
  _impl_.meta_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NULLABLE NewsItem::unsafe_arena_release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.news.v1.NewsItem.meta)

  _impl_._has_bits_[0] &= ~0x00000080U;
  ::ampy::common::v1::Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NONNULL NewsItem::_internal_mutable_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::Meta>(GetArena());
    _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(p);
  }
  return _impl_.meta_;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NONNULL NewsItem::mutable_meta()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080U;
  ::ampy::common::v1::Meta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:ampy.news.v1.NewsItem.meta)
  return _msg;
}
inline void NewsItem::set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080U;
  }

  _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.news.v1.NewsItem.meta)
}

// -------------------------------------------------------------------

// NewsBatch

// repeated .ampy.news.v1.NewsItem items = 1 [json_name = "items"];
inline int NewsBatch::_internal_items_size() const {
  return _internal_items().size();
}
inline int NewsBatch::items_size() const {
  return _internal_items_size();
}
inline void NewsBatch::clear_items() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.items_.Clear();
}
inline ::ampy::news::v1::NewsItem* PROTOBUF_NONNULL NewsBatch::mutable_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ampy.news.v1.NewsBatch.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ampy::news::v1::NewsItem>* PROTOBUF_NONNULL NewsBatch::mutable_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ampy.news.v1.NewsBatch.items)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_items();
}
inline const ::ampy::news::v1::NewsItem& NewsBatch::items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.news.v1.NewsBatch.items)
  return _internal_items().Get(index);
}
inline ::ampy::news::v1::NewsItem* PROTOBUF_NONNULL NewsBatch::add_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ampy::news::v1::NewsItem* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:ampy.news.v1.NewsBatch.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ampy::news::v1::NewsItem>& NewsBatch::items() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ampy.news.v1.NewsBatch.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::ampy::news::v1::NewsItem>&
NewsBatch::_internal_items() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::ampy::news::v1::NewsItem>* PROTOBUF_NONNULL
NewsBatch::_internal_mutable_items() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.items_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace news
}  // namespace ampy


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ampy_2fnews_2fv1_2fnews_2eproto_2epb_2eh
