// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: ampy/universe/v1/universe.proto

package universev1

import (
	v1 "github.com/AmpyFin/ampy-proto/v2/gen/go/ampy/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Constituent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Mic    string `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	Figi   string `protobuf:"bytes,3,opt,name=figi,proto3" json:"figi,omitempty"`
	Isin   string `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`
}

func (x *Constituent) Reset() {
	*x = Constituent{}
	mi := &file_ampy_universe_v1_universe_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Constituent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constituent) ProtoMessage() {}

func (x *Constituent) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_universe_v1_universe_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constituent.ProtoReflect.Descriptor instead.
func (*Constituent) Descriptor() ([]byte, []int) {
	return file_ampy_universe_v1_universe_proto_rawDescGZIP(), []int{0}
}

func (x *Constituent) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Constituent) GetMic() string {
	if x != nil {
		return x.Mic
	}
	return ""
}

func (x *Constituent) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Constituent) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

type UniverseSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniverseId   string                 `protobuf:"bytes,1,opt,name=universe_id,json=universeId,proto3" json:"universe_id,omitempty"` // e.g., "nasdaq100_2025w36"
	Constituents []*Constituent         `protobuf:"bytes,2,rep,name=constituents,proto3" json:"constituents,omitempty"`
	AsOf         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=as_of,json=asOf,proto3" json:"as_of,omitempty"`
	Ruleset      string                 `protobuf:"bytes,4,opt,name=ruleset,proto3" json:"ruleset,omitempty"`
	Meta         *v1.Meta               `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *UniverseSnapshot) Reset() {
	*x = UniverseSnapshot{}
	mi := &file_ampy_universe_v1_universe_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UniverseSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniverseSnapshot) ProtoMessage() {}

func (x *UniverseSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_universe_v1_universe_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniverseSnapshot.ProtoReflect.Descriptor instead.
func (*UniverseSnapshot) Descriptor() ([]byte, []int) {
	return file_ampy_universe_v1_universe_proto_rawDescGZIP(), []int{1}
}

func (x *UniverseSnapshot) GetUniverseId() string {
	if x != nil {
		return x.UniverseId
	}
	return ""
}

func (x *UniverseSnapshot) GetConstituents() []*Constituent {
	if x != nil {
		return x.Constituents
	}
	return nil
}

func (x *UniverseSnapshot) GetAsOf() *timestamppb.Timestamp {
	if x != nil {
		return x.AsOf
	}
	return nil
}

func (x *UniverseSnapshot) GetRuleset() string {
	if x != nil {
		return x.Ruleset
	}
	return ""
}

func (x *UniverseSnapshot) GetMeta() *v1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type UniverseBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshots []*UniverseSnapshot `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (x *UniverseBatch) Reset() {
	*x = UniverseBatch{}
	mi := &file_ampy_universe_v1_universe_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UniverseBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniverseBatch) ProtoMessage() {}

func (x *UniverseBatch) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_universe_v1_universe_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniverseBatch.ProtoReflect.Descriptor instead.
func (*UniverseBatch) Descriptor() ([]byte, []int) {
	return file_ampy_universe_v1_universe_proto_rawDescGZIP(), []int{2}
}

func (x *UniverseBatch) GetSnapshots() []*UniverseSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

var File_ampy_universe_v1_universe_proto protoreflect.FileDescriptor

var file_ampy_universe_v1_universe_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x6d, 0x70, 0x79, 0x2f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x6d, 0x70, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x5f, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69,
	0x67, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73,
	0x69, 0x6e, 0x22, 0xeb, 0x01, 0x0a, 0x10, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x61,
	0x73, 0x5f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x61, 0x73, 0x4f, 0x66, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x22, 0x51, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x42, 0xcc, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6d, 0x70, 0x79,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6d, 0x70, 0x79, 0x46, 0x69,
	0x6e, 0x2f, 0x61, 0x6d, 0x70, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x32, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x6d, 0x70, 0x79, 0x2f, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x55, 0x58, 0xaa, 0x02, 0x10, 0x41, 0x6d, 0x70, 0x79, 0x2e,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x41, 0x6d,
	0x70, 0x79, 0x5c, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x1c, 0x41, 0x6d, 0x70, 0x79, 0x5c, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12,
	0x41, 0x6d, 0x70, 0x79, 0x3a, 0x3a, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ampy_universe_v1_universe_proto_rawDescOnce sync.Once
	file_ampy_universe_v1_universe_proto_rawDescData = file_ampy_universe_v1_universe_proto_rawDesc
)

func file_ampy_universe_v1_universe_proto_rawDescGZIP() []byte {
	file_ampy_universe_v1_universe_proto_rawDescOnce.Do(func() {
		file_ampy_universe_v1_universe_proto_rawDescData = protoimpl.X.CompressGZIP(file_ampy_universe_v1_universe_proto_rawDescData)
	})
	return file_ampy_universe_v1_universe_proto_rawDescData
}

var file_ampy_universe_v1_universe_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ampy_universe_v1_universe_proto_goTypes = []any{
	(*Constituent)(nil),           // 0: ampy.universe.v1.Constituent
	(*UniverseSnapshot)(nil),      // 1: ampy.universe.v1.UniverseSnapshot
	(*UniverseBatch)(nil),         // 2: ampy.universe.v1.UniverseBatch
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*v1.Meta)(nil),               // 4: ampy.common.v1.Meta
}
var file_ampy_universe_v1_universe_proto_depIdxs = []int32{
	0, // 0: ampy.universe.v1.UniverseSnapshot.constituents:type_name -> ampy.universe.v1.Constituent
	3, // 1: ampy.universe.v1.UniverseSnapshot.as_of:type_name -> google.protobuf.Timestamp
	4, // 2: ampy.universe.v1.UniverseSnapshot.meta:type_name -> ampy.common.v1.Meta
	1, // 3: ampy.universe.v1.UniverseBatch.snapshots:type_name -> ampy.universe.v1.UniverseSnapshot
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_ampy_universe_v1_universe_proto_init() }
func file_ampy_universe_v1_universe_proto_init() {
	if File_ampy_universe_v1_universe_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ampy_universe_v1_universe_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ampy_universe_v1_universe_proto_goTypes,
		DependencyIndexes: file_ampy_universe_v1_universe_proto_depIdxs,
		MessageInfos:      file_ampy_universe_v1_universe_proto_msgTypes,
	}.Build()
	File_ampy_universe_v1_universe_proto = out.File
	file_ampy_universe_v1_universe_proto_rawDesc = nil
	file_ampy_universe_v1_universe_proto_goTypes = nil
	file_ampy_universe_v1_universe_proto_depIdxs = nil
}
