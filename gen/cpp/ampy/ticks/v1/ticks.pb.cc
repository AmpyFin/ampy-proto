// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ampy/ticks/v1/ticks.proto
// Protobuf C++ Version: 6.32.0

#include "ampy/ticks/v1/ticks.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ampy {
namespace ticks {
namespace v1 {

inline constexpr TradeTick::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        venue_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        security_{nullptr},
        price_{nullptr},
        event_time_{nullptr},
        ingest_time_{nullptr},
        meta_{nullptr},
        size_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR TradeTick::TradeTick(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TradeTick_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TradeTickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradeTickDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradeTickDefaultTypeInternal() {}
  union {
    TradeTick _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradeTickDefaultTypeInternal _TradeTick_default_instance_;

inline constexpr QuoteTick::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        venue_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        security_{nullptr},
        bid_{nullptr},
        ask_{nullptr},
        event_time_{nullptr},
        ingest_time_{nullptr},
        meta_{nullptr},
        bid_size_{::int64_t{0}},
        ask_size_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR QuoteTick::QuoteTick(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(QuoteTick_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct QuoteTickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuoteTickDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuoteTickDefaultTypeInternal() {}
  union {
    QuoteTick _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuoteTickDefaultTypeInternal _QuoteTick_default_instance_;

inline constexpr Tick::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : kind_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Tick::Tick(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Tick_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TickDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TickDefaultTypeInternal() {}
  union {
    Tick _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TickDefaultTypeInternal _Tick_default_instance_;

inline constexpr TickBatch::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : ticks_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TickBatch::TickBatch(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TickBatch_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TickBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TickBatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TickBatchDefaultTypeInternal() {}
  union {
    TickBatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TickBatchDefaultTypeInternal _TickBatch_default_instance_;
}  // namespace v1
}  // namespace ticks
}  // namespace ampy
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_ampy_2fticks_2fv1_2fticks_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_ampy_2fticks_2fv1_2fticks_2eproto = nullptr;
const ::uint32_t
    TableStruct_ampy_2fticks_2fv1_2fticks_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::TradeTick, _impl_._has_bits_),
        10, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::TradeTick, _impl_.security_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::TradeTick, _impl_.price_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::TradeTick, _impl_.size_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::TradeTick, _impl_.venue_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::TradeTick, _impl_.event_time_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::TradeTick, _impl_.ingest_time_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::TradeTick, _impl_.meta_),
        1,
        2,
        6,
        0,
        3,
        4,
        5,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::QuoteTick, _impl_._has_bits_),
        12, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::QuoteTick, _impl_.security_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::QuoteTick, _impl_.bid_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::QuoteTick, _impl_.bid_size_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::QuoteTick, _impl_.ask_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::QuoteTick, _impl_.ask_size_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::QuoteTick, _impl_.venue_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::QuoteTick, _impl_.event_time_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::QuoteTick, _impl_.ingest_time_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::QuoteTick, _impl_.meta_),
        1,
        2,
        7,
        3,
        8,
        0,
        4,
        5,
        6,
        0x004, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::Tick, _impl_._oneof_case_[0]),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::Tick, _impl_.kind_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::Tick, _impl_.kind_),
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::Tick, _impl_.kind_),
        0x000, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::TickBatch, _impl_.ticks_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::ampy::ticks::v1::TradeTick)},
        {17, sizeof(::ampy::ticks::v1::QuoteTick)},
        {38, sizeof(::ampy::ticks::v1::Tick)},
        {43, sizeof(::ampy::ticks::v1::TickBatch)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::ampy::ticks::v1::_TradeTick_default_instance_._instance,
    &::ampy::ticks::v1::_QuoteTick_default_instance_._instance,
    &::ampy::ticks::v1::_Tick_default_instance_._instance,
    &::ampy::ticks::v1::_TickBatch_default_instance_._instance,
};
const char descriptor_table_protodef_ampy_2fticks_2fv1_2fticks_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\031ampy/ticks/v1/ticks.proto\022\rampy.ticks."
    "v1\032\037google/protobuf/timestamp.proto\032\033amp"
    "y/common/v1/common.proto\"\276\002\n\tTradeTick\0226"
    "\n\010security\030\001 \001(\0132\032.ampy.common.v1.Securi"
    "tyIdR\010security\022-\n\005price\030\002 \001(\0132\027.ampy.com"
    "mon.v1.DecimalR\005price\022\022\n\004size\030\003 \001(\003R\004siz"
    "e\022\024\n\005venue\030\004 \001(\tR\005venue\0229\n\nevent_time\030\005 "
    "\001(\0132\032.google.protobuf.TimestampR\teventTi"
    "me\022;\n\013ingest_time\030\006 \001(\0132\032.google.protobu"
    "f.TimestampR\ningestTime\022(\n\004meta\030\007 \001(\0132\024."
    "ampy.common.v1.MetaR\004meta\"\207\003\n\tQuoteTick\022"
    "6\n\010security\030\001 \001(\0132\032.ampy.common.v1.Secur"
    "ityIdR\010security\022)\n\003bid\030\002 \001(\0132\027.ampy.comm"
    "on.v1.DecimalR\003bid\022\031\n\010bid_size\030\003 \001(\003R\007bi"
    "dSize\022)\n\003ask\030\004 \001(\0132\027.ampy.common.v1.Deci"
    "malR\003ask\022\031\n\010ask_size\030\005 \001(\003R\007askSize\022\024\n\005v"
    "enue\030\006 \001(\tR\005venue\0229\n\nevent_time\030\007 \001(\0132\032."
    "google.protobuf.TimestampR\teventTime\022;\n\013"
    "ingest_time\030\010 \001(\0132\032.google.protobuf.Time"
    "stampR\ningestTime\022(\n\004meta\030\t \001(\0132\024.ampy.c"
    "ommon.v1.MetaR\004meta\"r\n\004Tick\0220\n\005trade\030\001 \001"
    "(\0132\030.ampy.ticks.v1.TradeTickH\000R\005trade\0220\n"
    "\005quote\030\002 \001(\0132\030.ampy.ticks.v1.QuoteTickH\000"
    "R\005quoteB\006\n\004kind\"6\n\tTickBatch\022)\n\005ticks\030\001 "
    "\003(\0132\023.ampy.ticks.v1.TickR\005ticksB\265\001\n\021com."
    "ampy.ticks.v1B\nTicksProtoP\001Z>github.com/"
    "yeonholee50/ampy-proto/gen/go/ampy/ticks"
    "/v1;ticksv1\242\002\003ATX\252\002\rAmpy.Ticks.V1\312\002\rAmpy"
    "\\Ticks\\V1\342\002\031Ampy\\Ticks\\V1\\GPBMetadata\352\002\017"
    "Ampy::Ticks::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_ampy_2fticks_2fv1_2fticks_2eproto_deps[2] = {
        &::descriptor_table_ampy_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_ampy_2fticks_2fv1_2fticks_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ampy_2fticks_2fv1_2fticks_2eproto = {
    false,
    false,
    1183,
    descriptor_table_protodef_ampy_2fticks_2fv1_2fticks_2eproto,
    "ampy/ticks/v1/ticks.proto",
    &descriptor_table_ampy_2fticks_2fv1_2fticks_2eproto_once,
    descriptor_table_ampy_2fticks_2fv1_2fticks_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_ampy_2fticks_2fv1_2fticks_2eproto::offsets,
    file_level_enum_descriptors_ampy_2fticks_2fv1_2fticks_2eproto,
    file_level_service_descriptors_ampy_2fticks_2fv1_2fticks_2eproto,
};
namespace ampy {
namespace ticks {
namespace v1 {
// ===================================================================

class TradeTick::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TradeTick>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TradeTick, _impl_._has_bits_);
};

void TradeTick::clear_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.security_ != nullptr) _impl_.security_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
void TradeTick::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.price_ != nullptr) _impl_.price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
void TradeTick::clear_event_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.event_time_ != nullptr) _impl_.event_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008U;
}
void TradeTick::clear_ingest_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ingest_time_ != nullptr) _impl_.ingest_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010U;
}
void TradeTick::clear_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020U;
}
TradeTick::TradeTick(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TradeTick_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.ticks.v1.TradeTick)
}
PROTOBUF_NDEBUG_INLINE TradeTick::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::ticks::v1::TradeTick& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        venue_(arena, from.venue_) {}

TradeTick::TradeTick(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TradeTick& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TradeTick_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TradeTick* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.security_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.security_)
                : nullptr;
  _impl_.price_ = ((cached_has_bits & 0x00000004U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.price_)
                : nullptr;
  _impl_.event_time_ = ((cached_has_bits & 0x00000008U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.event_time_)
                : nullptr;
  _impl_.ingest_time_ = ((cached_has_bits & 0x00000010U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ingest_time_)
                : nullptr;
  _impl_.meta_ = ((cached_has_bits & 0x00000020U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_)
                : nullptr;
  _impl_.size_ = from._impl_.size_;

  // @@protoc_insertion_point(copy_constructor:ampy.ticks.v1.TradeTick)
}
PROTOBUF_NDEBUG_INLINE TradeTick::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        venue_(arena) {}

inline void TradeTick::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, security_),
           0,
           offsetof(Impl_, size_) -
               offsetof(Impl_, security_) +
               sizeof(Impl_::size_));
}
TradeTick::~TradeTick() {
  // @@protoc_insertion_point(destructor:ampy.ticks.v1.TradeTick)
  SharedDtor(*this);
}
inline void TradeTick::SharedDtor(MessageLite& self) {
  TradeTick& this_ = static_cast<TradeTick&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.venue_.Destroy();
  delete this_._impl_.security_;
  delete this_._impl_.price_;
  delete this_._impl_.event_time_;
  delete this_._impl_.ingest_time_;
  delete this_._impl_.meta_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TradeTick::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TradeTick(arena);
}
constexpr auto TradeTick::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TradeTick),
                                            alignof(TradeTick));
}
constexpr auto TradeTick::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TradeTick_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TradeTick::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TradeTick>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TradeTick::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TradeTick>(), &TradeTick::ByteSizeLong,
              &TradeTick::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TradeTick, _impl_._cached_size_),
          false,
      },
      &TradeTick::kDescriptorMethods,
      &descriptor_table_ampy_2fticks_2fv1_2fticks_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TradeTick_class_data_ =
        TradeTick::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TradeTick::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TradeTick_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TradeTick_class_data_.tc_table);
  return TradeTick_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 5, 37, 2>
TradeTick::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TradeTick, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TradeTick_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::ticks::v1::TradeTick>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.security_)}},
    // .ampy.common.v1.Decimal price = 2 [json_name = "price"];
    {::_pbi::TcParser::FastMtS1,
     {18, 2, 1, PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.price_)}},
    // int64 size = 3 [json_name = "size"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TradeTick, _impl_.size_), 6>(),
     {24, 6, 0, PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.size_)}},
    // string venue = 4 [json_name = "venue"];
    {::_pbi::TcParser::FastUS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.venue_)}},
    // .google.protobuf.Timestamp event_time = 5 [json_name = "eventTime"];
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 2, PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.event_time_)}},
    // .google.protobuf.Timestamp ingest_time = 6 [json_name = "ingestTime"];
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 3, PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.ingest_time_)}},
    // .ampy.common.v1.Meta meta = 7 [json_name = "meta"];
    {::_pbi::TcParser::FastMtS1,
     {58, 5, 4, PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.meta_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    {PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.security_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Decimal price = 2 [json_name = "price"];
    {PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.price_), _Internal::kHasBitsOffset + 2, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 size = 3 [json_name = "size"];
    {PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.size_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // string venue = 4 [json_name = "venue"];
    {PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.venue_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp event_time = 5 [json_name = "eventTime"];
    {PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.event_time_), _Internal::kHasBitsOffset + 3, 2, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp ingest_time = 6 [json_name = "ingestTime"];
    {PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.ingest_time_), _Internal::kHasBitsOffset + 4, 3, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Meta meta = 7 [json_name = "meta"];
    {PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.meta_), _Internal::kHasBitsOffset + 5, 4, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::common::v1::SecurityId>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Decimal>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Meta>()},
  }},
  {{
    "\27\0\0\0\5\0\0\0"
    "ampy.ticks.v1.TradeTick"
    "venue"
  }},
};
PROTOBUF_NOINLINE void TradeTick::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.ticks.v1.TradeTick)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.venue_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.security_ != nullptr);
      _impl_.security_->Clear();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(_impl_.price_ != nullptr);
      _impl_.price_->Clear();
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(_impl_.event_time_ != nullptr);
      _impl_.event_time_->Clear();
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      ABSL_DCHECK(_impl_.ingest_time_ != nullptr);
      _impl_.ingest_time_->Clear();
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      ABSL_DCHECK(_impl_.meta_ != nullptr);
      _impl_.meta_->Clear();
    }
  }
  _impl_.size_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TradeTick::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TradeTick& this_ = static_cast<const TradeTick&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TradeTick::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TradeTick& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.ticks.v1.TradeTick)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.security_, this_._impl_.security_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Decimal price = 2 [json_name = "price"];
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.price_, this_._impl_.price_->GetCachedSize(), target,
        stream);
  }

  // int64 size = 3 [json_name = "size"];
  if ((cached_has_bits & 0x00000040U) != 0) {
    if (this_._internal_size() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
              stream, this_._internal_size(), target);
    }
  }

  // string venue = 4 [json_name = "venue"];
  if ((cached_has_bits & 0x00000001U) != 0) {
    if (!this_._internal_venue().empty()) {
      const ::std::string& _s = this_._internal_venue();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ampy.ticks.v1.TradeTick.venue");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // .google.protobuf.Timestamp event_time = 5 [json_name = "eventTime"];
  if ((cached_has_bits & 0x00000008U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.event_time_, this_._impl_.event_time_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Timestamp ingest_time = 6 [json_name = "ingestTime"];
  if ((cached_has_bits & 0x00000010U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.ingest_time_, this_._impl_.ingest_time_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Meta meta = 7 [json_name = "meta"];
  if ((cached_has_bits & 0x00000020U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.meta_, this_._impl_.meta_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.ticks.v1.TradeTick)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TradeTick::ByteSizeLong(const MessageLite& base) {
  const TradeTick& this_ = static_cast<const TradeTick&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TradeTick::ByteSizeLong() const {
  const TradeTick& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.ticks.v1.TradeTick)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    // string venue = 4 [json_name = "venue"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_venue().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_venue());
      }
    }
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.security_);
    }
    // .ampy.common.v1.Decimal price = 2 [json_name = "price"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.price_);
    }
    // .google.protobuf.Timestamp event_time = 5 [json_name = "eventTime"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_time_);
    }
    // .google.protobuf.Timestamp ingest_time = 6 [json_name = "ingestTime"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ingest_time_);
    }
    // .ampy.common.v1.Meta meta = 7 [json_name = "meta"];
    if ((cached_has_bits & 0x00000020U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.meta_);
    }
    // int64 size = 3 [json_name = "size"];
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (this_._internal_size() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_size());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TradeTick::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TradeTick*>(&to_msg);
  auto& from = static_cast<const TradeTick&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.ticks.v1.TradeTick)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_venue().empty()) {
        _this->_internal_set_venue(from._internal_venue());
      } else {
        if (_this->_impl_.venue_.IsDefault()) {
          _this->_internal_set_venue("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.security_ != nullptr);
      if (_this->_impl_.security_ == nullptr) {
        _this->_impl_.security_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.security_);
      } else {
        _this->_impl_.security_->MergeFrom(*from._impl_.security_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(from._impl_.price_ != nullptr);
      if (_this->_impl_.price_ == nullptr) {
        _this->_impl_.price_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.price_);
      } else {
        _this->_impl_.price_->MergeFrom(*from._impl_.price_);
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(from._impl_.event_time_ != nullptr);
      if (_this->_impl_.event_time_ == nullptr) {
        _this->_impl_.event_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.event_time_);
      } else {
        _this->_impl_.event_time_->MergeFrom(*from._impl_.event_time_);
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      ABSL_DCHECK(from._impl_.ingest_time_ != nullptr);
      if (_this->_impl_.ingest_time_ == nullptr) {
        _this->_impl_.ingest_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ingest_time_);
      } else {
        _this->_impl_.ingest_time_->MergeFrom(*from._impl_.ingest_time_);
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      ABSL_DCHECK(from._impl_.meta_ != nullptr);
      if (_this->_impl_.meta_ == nullptr) {
        _this->_impl_.meta_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_);
      } else {
        _this->_impl_.meta_->MergeFrom(*from._impl_.meta_);
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (from._internal_size() != 0) {
        _this->_impl_.size_ = from._impl_.size_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradeTick::CopyFrom(const TradeTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.ticks.v1.TradeTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TradeTick::InternalSwap(TradeTick* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.venue_, &other->_impl_.venue_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.size_)
      + sizeof(TradeTick::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(TradeTick, _impl_.security_)>(
          reinterpret_cast<char*>(&_impl_.security_),
          reinterpret_cast<char*>(&other->_impl_.security_));
}

::google::protobuf::Metadata TradeTick::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class QuoteTick::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<QuoteTick>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_._has_bits_);
};

void QuoteTick::clear_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.security_ != nullptr) _impl_.security_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
void QuoteTick::clear_bid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bid_ != nullptr) _impl_.bid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
void QuoteTick::clear_ask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ask_ != nullptr) _impl_.ask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008U;
}
void QuoteTick::clear_event_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.event_time_ != nullptr) _impl_.event_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010U;
}
void QuoteTick::clear_ingest_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ingest_time_ != nullptr) _impl_.ingest_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020U;
}
void QuoteTick::clear_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040U;
}
QuoteTick::QuoteTick(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, QuoteTick_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.ticks.v1.QuoteTick)
}
PROTOBUF_NDEBUG_INLINE QuoteTick::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::ticks::v1::QuoteTick& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        venue_(arena, from.venue_) {}

QuoteTick::QuoteTick(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const QuoteTick& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, QuoteTick_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  QuoteTick* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.security_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.security_)
                : nullptr;
  _impl_.bid_ = ((cached_has_bits & 0x00000004U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.bid_)
                : nullptr;
  _impl_.ask_ = ((cached_has_bits & 0x00000008U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ask_)
                : nullptr;
  _impl_.event_time_ = ((cached_has_bits & 0x00000010U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.event_time_)
                : nullptr;
  _impl_.ingest_time_ = ((cached_has_bits & 0x00000020U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ingest_time_)
                : nullptr;
  _impl_.meta_ = ((cached_has_bits & 0x00000040U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bid_size_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, bid_size_),
           offsetof(Impl_, ask_size_) -
               offsetof(Impl_, bid_size_) +
               sizeof(Impl_::ask_size_));

  // @@protoc_insertion_point(copy_constructor:ampy.ticks.v1.QuoteTick)
}
PROTOBUF_NDEBUG_INLINE QuoteTick::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        venue_(arena) {}

inline void QuoteTick::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, security_),
           0,
           offsetof(Impl_, ask_size_) -
               offsetof(Impl_, security_) +
               sizeof(Impl_::ask_size_));
}
QuoteTick::~QuoteTick() {
  // @@protoc_insertion_point(destructor:ampy.ticks.v1.QuoteTick)
  SharedDtor(*this);
}
inline void QuoteTick::SharedDtor(MessageLite& self) {
  QuoteTick& this_ = static_cast<QuoteTick&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.venue_.Destroy();
  delete this_._impl_.security_;
  delete this_._impl_.bid_;
  delete this_._impl_.ask_;
  delete this_._impl_.event_time_;
  delete this_._impl_.ingest_time_;
  delete this_._impl_.meta_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL QuoteTick::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) QuoteTick(arena);
}
constexpr auto QuoteTick::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(QuoteTick),
                                            alignof(QuoteTick));
}
constexpr auto QuoteTick::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_QuoteTick_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &QuoteTick::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<QuoteTick>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &QuoteTick::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<QuoteTick>(), &QuoteTick::ByteSizeLong,
              &QuoteTick::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_._cached_size_),
          false,
      },
      &QuoteTick::kDescriptorMethods,
      &descriptor_table_ampy_2fticks_2fv1_2fticks_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull QuoteTick_class_data_ =
        QuoteTick::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
QuoteTick::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&QuoteTick_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(QuoteTick_class_data_.tc_table);
  return QuoteTick_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 6, 45, 2>
QuoteTick::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    QuoteTick_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::ticks::v1::QuoteTick>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.security_)}},
    // .ampy.common.v1.Decimal bid = 2 [json_name = "bid"];
    {::_pbi::TcParser::FastMtS1,
     {18, 2, 1, PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.bid_)}},
    // int64 bid_size = 3 [json_name = "bidSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(QuoteTick, _impl_.bid_size_), 7>(),
     {24, 7, 0, PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.bid_size_)}},
    // .ampy.common.v1.Decimal ask = 4 [json_name = "ask"];
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 2, PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.ask_)}},
    // int64 ask_size = 5 [json_name = "askSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(QuoteTick, _impl_.ask_size_), 8>(),
     {40, 8, 0, PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.ask_size_)}},
    // string venue = 6 [json_name = "venue"];
    {::_pbi::TcParser::FastUS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.venue_)}},
    // .google.protobuf.Timestamp event_time = 7 [json_name = "eventTime"];
    {::_pbi::TcParser::FastMtS1,
     {58, 4, 3, PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.event_time_)}},
    // .google.protobuf.Timestamp ingest_time = 8 [json_name = "ingestTime"];
    {::_pbi::TcParser::FastMtS1,
     {66, 5, 4, PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.ingest_time_)}},
    // .ampy.common.v1.Meta meta = 9 [json_name = "meta"];
    {::_pbi::TcParser::FastMtS1,
     {74, 6, 5, PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.meta_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    {PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.security_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Decimal bid = 2 [json_name = "bid"];
    {PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.bid_), _Internal::kHasBitsOffset + 2, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 bid_size = 3 [json_name = "bidSize"];
    {PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.bid_size_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // .ampy.common.v1.Decimal ask = 4 [json_name = "ask"];
    {PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.ask_), _Internal::kHasBitsOffset + 3, 2, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 ask_size = 5 [json_name = "askSize"];
    {PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.ask_size_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // string venue = 6 [json_name = "venue"];
    {PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.venue_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp event_time = 7 [json_name = "eventTime"];
    {PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.event_time_), _Internal::kHasBitsOffset + 4, 3, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp ingest_time = 8 [json_name = "ingestTime"];
    {PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.ingest_time_), _Internal::kHasBitsOffset + 5, 4, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Meta meta = 9 [json_name = "meta"];
    {PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.meta_), _Internal::kHasBitsOffset + 6, 5, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::common::v1::SecurityId>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Decimal>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Decimal>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Meta>()},
  }},
  {{
    "\27\0\0\0\0\0\5\0\0\0\0\0\0\0\0\0"
    "ampy.ticks.v1.QuoteTick"
    "venue"
  }},
};
PROTOBUF_NOINLINE void QuoteTick::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.ticks.v1.QuoteTick)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.venue_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.security_ != nullptr);
      _impl_.security_->Clear();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(_impl_.bid_ != nullptr);
      _impl_.bid_->Clear();
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(_impl_.ask_ != nullptr);
      _impl_.ask_->Clear();
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      ABSL_DCHECK(_impl_.event_time_ != nullptr);
      _impl_.event_time_->Clear();
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      ABSL_DCHECK(_impl_.ingest_time_ != nullptr);
      _impl_.ingest_time_->Clear();
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      ABSL_DCHECK(_impl_.meta_ != nullptr);
      _impl_.meta_->Clear();
    }
  }
  _impl_.bid_size_ = ::int64_t{0};
  _impl_.ask_size_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL QuoteTick::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const QuoteTick& this_ = static_cast<const QuoteTick&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL QuoteTick::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const QuoteTick& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.ticks.v1.QuoteTick)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.security_, this_._impl_.security_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Decimal bid = 2 [json_name = "bid"];
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.bid_, this_._impl_.bid_->GetCachedSize(), target,
        stream);
  }

  // int64 bid_size = 3 [json_name = "bidSize"];
  if ((cached_has_bits & 0x00000080U) != 0) {
    if (this_._internal_bid_size() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
              stream, this_._internal_bid_size(), target);
    }
  }

  // .ampy.common.v1.Decimal ask = 4 [json_name = "ask"];
  if ((cached_has_bits & 0x00000008U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.ask_, this_._impl_.ask_->GetCachedSize(), target,
        stream);
  }

  // int64 ask_size = 5 [json_name = "askSize"];
  if ((cached_has_bits & 0x00000100U) != 0) {
    if (this_._internal_ask_size() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<5>(
              stream, this_._internal_ask_size(), target);
    }
  }

  // string venue = 6 [json_name = "venue"];
  if ((cached_has_bits & 0x00000001U) != 0) {
    if (!this_._internal_venue().empty()) {
      const ::std::string& _s = this_._internal_venue();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ampy.ticks.v1.QuoteTick.venue");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  // .google.protobuf.Timestamp event_time = 7 [json_name = "eventTime"];
  if ((cached_has_bits & 0x00000010U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.event_time_, this_._impl_.event_time_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Timestamp ingest_time = 8 [json_name = "ingestTime"];
  if ((cached_has_bits & 0x00000020U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.ingest_time_, this_._impl_.ingest_time_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Meta meta = 9 [json_name = "meta"];
  if ((cached_has_bits & 0x00000040U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.meta_, this_._impl_.meta_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.ticks.v1.QuoteTick)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t QuoteTick::ByteSizeLong(const MessageLite& base) {
  const QuoteTick& this_ = static_cast<const QuoteTick&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t QuoteTick::ByteSizeLong() const {
  const QuoteTick& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.ticks.v1.QuoteTick)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // string venue = 6 [json_name = "venue"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_venue().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_venue());
      }
    }
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.security_);
    }
    // .ampy.common.v1.Decimal bid = 2 [json_name = "bid"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.bid_);
    }
    // .ampy.common.v1.Decimal ask = 4 [json_name = "ask"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ask_);
    }
    // .google.protobuf.Timestamp event_time = 7 [json_name = "eventTime"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_time_);
    }
    // .google.protobuf.Timestamp ingest_time = 8 [json_name = "ingestTime"];
    if ((cached_has_bits & 0x00000020U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ingest_time_);
    }
    // .ampy.common.v1.Meta meta = 9 [json_name = "meta"];
    if ((cached_has_bits & 0x00000040U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.meta_);
    }
    // int64 bid_size = 3 [json_name = "bidSize"];
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (this_._internal_bid_size() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_bid_size());
      }
    }
  }
   {
    // int64 ask_size = 5 [json_name = "askSize"];
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (this_._internal_ask_size() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_ask_size());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void QuoteTick::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<QuoteTick*>(&to_msg);
  auto& from = static_cast<const QuoteTick&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.ticks.v1.QuoteTick)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_venue().empty()) {
        _this->_internal_set_venue(from._internal_venue());
      } else {
        if (_this->_impl_.venue_.IsDefault()) {
          _this->_internal_set_venue("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.security_ != nullptr);
      if (_this->_impl_.security_ == nullptr) {
        _this->_impl_.security_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.security_);
      } else {
        _this->_impl_.security_->MergeFrom(*from._impl_.security_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(from._impl_.bid_ != nullptr);
      if (_this->_impl_.bid_ == nullptr) {
        _this->_impl_.bid_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.bid_);
      } else {
        _this->_impl_.bid_->MergeFrom(*from._impl_.bid_);
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(from._impl_.ask_ != nullptr);
      if (_this->_impl_.ask_ == nullptr) {
        _this->_impl_.ask_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ask_);
      } else {
        _this->_impl_.ask_->MergeFrom(*from._impl_.ask_);
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      ABSL_DCHECK(from._impl_.event_time_ != nullptr);
      if (_this->_impl_.event_time_ == nullptr) {
        _this->_impl_.event_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.event_time_);
      } else {
        _this->_impl_.event_time_->MergeFrom(*from._impl_.event_time_);
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      ABSL_DCHECK(from._impl_.ingest_time_ != nullptr);
      if (_this->_impl_.ingest_time_ == nullptr) {
        _this->_impl_.ingest_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ingest_time_);
      } else {
        _this->_impl_.ingest_time_->MergeFrom(*from._impl_.ingest_time_);
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      ABSL_DCHECK(from._impl_.meta_ != nullptr);
      if (_this->_impl_.meta_ == nullptr) {
        _this->_impl_.meta_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_);
      } else {
        _this->_impl_.meta_->MergeFrom(*from._impl_.meta_);
      }
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (from._internal_bid_size() != 0) {
        _this->_impl_.bid_size_ = from._impl_.bid_size_;
      }
    }
  }
  if ((cached_has_bits & 0x00000100U) != 0) {
    if (from._internal_ask_size() != 0) {
      _this->_impl_.ask_size_ = from._impl_.ask_size_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void QuoteTick::CopyFrom(const QuoteTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.ticks.v1.QuoteTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void QuoteTick::InternalSwap(QuoteTick* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.venue_, &other->_impl_.venue_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.ask_size_)
      + sizeof(QuoteTick::_impl_.ask_size_)
      - PROTOBUF_FIELD_OFFSET(QuoteTick, _impl_.security_)>(
          reinterpret_cast<char*>(&_impl_.security_),
          reinterpret_cast<char*>(&other->_impl_.security_));
}

::google::protobuf::Metadata QuoteTick::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Tick::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::ampy::ticks::v1::Tick, _impl_._oneof_case_);
};

void Tick::set_allocated_trade(::ampy::ticks::v1::TradeTick* PROTOBUF_NULLABLE trade) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_kind();
  if (trade) {
    ::google::protobuf::Arena* submessage_arena = trade->GetArena();
    if (message_arena != submessage_arena) {
      trade = ::google::protobuf::internal::GetOwnedMessage(message_arena, trade, submessage_arena);
    }
    set_has_trade();
    _impl_.kind_.trade_ = trade;
  }
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.Tick.trade)
}
void Tick::set_allocated_quote(::ampy::ticks::v1::QuoteTick* PROTOBUF_NULLABLE quote) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_kind();
  if (quote) {
    ::google::protobuf::Arena* submessage_arena = quote->GetArena();
    if (message_arena != submessage_arena) {
      quote = ::google::protobuf::internal::GetOwnedMessage(message_arena, quote, submessage_arena);
    }
    set_has_quote();
    _impl_.kind_.quote_ = quote;
  }
  // @@protoc_insertion_point(field_set_allocated:ampy.ticks.v1.Tick.quote)
}
Tick::Tick(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Tick_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.ticks.v1.Tick)
}
PROTOBUF_NDEBUG_INLINE Tick::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::ticks::v1::Tick& from_msg)
      : kind_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Tick::Tick(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Tick& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Tick_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Tick* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (kind_case()) {
    case KIND_NOT_SET:
      break;
      case kTrade:
        _impl_.kind_.trade_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.kind_.trade_);
        break;
      case kQuote:
        _impl_.kind_.quote_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.kind_.quote_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:ampy.ticks.v1.Tick)
}
PROTOBUF_NDEBUG_INLINE Tick::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : kind_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Tick::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Tick::~Tick() {
  // @@protoc_insertion_point(destructor:ampy.ticks.v1.Tick)
  SharedDtor(*this);
}
inline void Tick::SharedDtor(MessageLite& self) {
  Tick& this_ = static_cast<Tick&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_kind()) {
    this_.clear_kind();
  }
  this_._impl_.~Impl_();
}

void Tick::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:ampy.ticks.v1.Tick)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (kind_case()) {
    case kTrade: {
      if (GetArena() == nullptr) {
        delete _impl_.kind_.trade_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.trade_);
      }
      break;
    }
    case kQuote: {
      if (GetArena() == nullptr) {
        delete _impl_.kind_.quote_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.quote_);
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


inline void* PROTOBUF_NONNULL Tick::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Tick(arena);
}
constexpr auto Tick::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Tick),
                                            alignof(Tick));
}
constexpr auto Tick::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Tick_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Tick::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Tick>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Tick::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Tick>(), &Tick::ByteSizeLong,
              &Tick::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Tick, _impl_._cached_size_),
          false,
      },
      &Tick::kDescriptorMethods,
      &descriptor_table_ampy_2fticks_2fv1_2fticks_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Tick_class_data_ =
        Tick::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Tick::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Tick_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Tick_class_data_.tc_table);
  return Tick_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2>
Tick::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Tick_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::ticks::v1::Tick>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .ampy.ticks.v1.TradeTick trade = 1 [json_name = "trade"];
    {PROTOBUF_FIELD_OFFSET(Tick, _impl_.kind_.trade_), _Internal::kOneofCaseOffset + 0, 0, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.ticks.v1.QuoteTick quote = 2 [json_name = "quote"];
    {PROTOBUF_FIELD_OFFSET(Tick, _impl_.kind_.quote_), _Internal::kOneofCaseOffset + 0, 1, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::ticks::v1::TradeTick>()},
      {::_pbi::TcParser::GetTable<::ampy::ticks::v1::QuoteTick>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Tick::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.ticks.v1.Tick)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Tick::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Tick& this_ = static_cast<const Tick&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Tick::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Tick& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.ticks.v1.Tick)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.kind_case()) {
    case kTrade: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *this_._impl_.kind_.trade_, this_._impl_.kind_.trade_->GetCachedSize(), target,
          stream);
      break;
    }
    case kQuote: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.kind_.quote_, this_._impl_.kind_.quote_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.ticks.v1.Tick)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Tick::ByteSizeLong(const MessageLite& base) {
  const Tick& this_ = static_cast<const Tick&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Tick::ByteSizeLong() const {
  const Tick& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.ticks.v1.Tick)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.kind_case()) {
    // .ampy.ticks.v1.TradeTick trade = 1 [json_name = "trade"];
    case kTrade: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kind_.trade_);
      break;
    }
    // .ampy.ticks.v1.QuoteTick quote = 2 [json_name = "quote"];
    case kQuote: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kind_.quote_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Tick::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Tick*>(&to_msg);
  auto& from = static_cast<const Tick&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.ticks.v1.Tick)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_kind();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kTrade: {
        if (oneof_needs_init) {
          _this->_impl_.kind_.trade_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.kind_.trade_);
        } else {
          _this->_impl_.kind_.trade_->MergeFrom(*from._impl_.kind_.trade_);
        }
        break;
      }
      case kQuote: {
        if (oneof_needs_init) {
          _this->_impl_.kind_.quote_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.kind_.quote_);
        } else {
          _this->_impl_.kind_.quote_->MergeFrom(*from._impl_.kind_.quote_);
        }
        break;
      }
      case KIND_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Tick::CopyFrom(const Tick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.ticks.v1.Tick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Tick::InternalSwap(Tick* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Tick::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TickBatch::_Internal {
 public:
};

TickBatch::TickBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TickBatch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.ticks.v1.TickBatch)
}
PROTOBUF_NDEBUG_INLINE TickBatch::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::ticks::v1::TickBatch& from_msg)
      : ticks_{visibility, arena, from.ticks_},
        _cached_size_{0} {}

TickBatch::TickBatch(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TickBatch& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TickBatch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TickBatch* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:ampy.ticks.v1.TickBatch)
}
PROTOBUF_NDEBUG_INLINE TickBatch::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : ticks_{visibility, arena},
        _cached_size_{0} {}

inline void TickBatch::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TickBatch::~TickBatch() {
  // @@protoc_insertion_point(destructor:ampy.ticks.v1.TickBatch)
  SharedDtor(*this);
}
inline void TickBatch::SharedDtor(MessageLite& self) {
  TickBatch& this_ = static_cast<TickBatch&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TickBatch::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TickBatch(arena);
}
constexpr auto TickBatch::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TickBatch, _impl_.ticks_) +
          decltype(TickBatch::_impl_.ticks_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(TickBatch), alignof(TickBatch), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TickBatch::PlacementNew_,
                                 sizeof(TickBatch),
                                 alignof(TickBatch));
  }
}
constexpr auto TickBatch::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TickBatch_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TickBatch::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TickBatch>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TickBatch::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TickBatch>(), &TickBatch::ByteSizeLong,
              &TickBatch::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TickBatch, _impl_._cached_size_),
          false,
      },
      &TickBatch::kDescriptorMethods,
      &descriptor_table_ampy_2fticks_2fv1_2fticks_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TickBatch_class_data_ =
        TickBatch::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TickBatch::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TickBatch_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TickBatch_class_data_.tc_table);
  return TickBatch_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
TickBatch::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TickBatch_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::ticks::v1::TickBatch>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .ampy.ticks.v1.Tick ticks = 1 [json_name = "ticks"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TickBatch, _impl_.ticks_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .ampy.ticks.v1.Tick ticks = 1 [json_name = "ticks"];
    {PROTOBUF_FIELD_OFFSET(TickBatch, _impl_.ticks_), 0, 0, (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::ticks::v1::Tick>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TickBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.ticks.v1.TickBatch)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ticks_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TickBatch::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TickBatch& this_ = static_cast<const TickBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TickBatch::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TickBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.ticks.v1.TickBatch)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .ampy.ticks.v1.Tick ticks = 1 [json_name = "ticks"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_ticks_size());
       i < n; i++) {
    const auto& repfield = this_._internal_ticks().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.ticks.v1.TickBatch)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TickBatch::ByteSizeLong(const MessageLite& base) {
  const TickBatch& this_ = static_cast<const TickBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TickBatch::ByteSizeLong() const {
  const TickBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.ticks.v1.TickBatch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .ampy.ticks.v1.Tick ticks = 1 [json_name = "ticks"];
    {
      total_size += 1UL * this_._internal_ticks_size();
      for (const auto& msg : this_._internal_ticks()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TickBatch::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TickBatch*>(&to_msg);
  auto& from = static_cast<const TickBatch&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.ticks.v1.TickBatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ticks()->MergeFrom(
      from._internal_ticks());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TickBatch::CopyFrom(const TickBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.ticks.v1.TickBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TickBatch::InternalSwap(TickBatch* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ticks_.InternalSwap(&other->_impl_.ticks_);
}

::google::protobuf::Metadata TickBatch::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace ticks
}  // namespace ampy
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_ampy_2fticks_2fv1_2fticks_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
