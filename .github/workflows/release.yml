name: Release (Tag-driven)

on:
  push:
    tags:
      - 'v*'           # e.g., v1.0.0 or v1.0.1-rc1

permissions:
  contents: write
  packages: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-python:
    name: Build Python wheel/sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: bufbuild/buf-setup-action@v1

      - name: Generate code (Go/Python/C++)
        run: buf generate proto

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build wheel + sdist
        run: |
          python -m pip install --upgrade pip build
          # Clean any existing dist directory
          rm -rf dist/
          python -m build
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: dist/*

  publish-pypi:
    name: Publish to PyPI (release tags)
    needs: build-python
    runs-on: ubuntu-latest
    if: startsWith(github.ref_name, 'v') && !contains(github.ref_name, '-rc')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: dist
      - name: Publish
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          password: ${{ secrets.PYPI_API_TOKEN }}

  publish-testpypi:
    name: Publish to TestPyPI (rc tags)
    needs: build-python
    runs-on: ubuntu-latest
    if: contains(github.ref_name, '-rc')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: dist
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  build-cpp:
    name: Build C++ static lib
    runs-on: ubuntu-latest
    env:
      PROTOBUF_TAG: v32.0
      PROTOBUF_PREFIX: /tmp/protobuf-install
    steps:
      - uses: actions/checkout@v4
      - uses: bufbuild/buf-setup-action@v1

      - name: Toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y git cmake ninja-build g++ make zlib1g-dev unzip
          # IMPORTANT: do NOT install libprotobuf-dev/protobuf-compiler from apt here

      - name: Cache Protobuf runtime (built from source)
        id: cache-protobuf
        uses: actions/cache@v4
        with:
          path: ${{ env.PROTOBUF_PREFIX }}
          key: protobuf-${{ env.PROTOBUF_TAG }}-install-linux-x86_64

      - name: Build & Install Protobuf ${{ env.PROTOBUF_TAG }}
        if: steps.cache-protobuf.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          git clone --depth 1 --branch "${PROTOBUF_TAG}" https://github.com/protocolbuffers/protobuf.git
          cd protobuf
          git submodule update --init --recursive
          cmake -S . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="${PROTOBUF_PREFIX}" \
            -Dprotobuf_BUILD_TESTS=OFF
          cmake --build build -j
          cmake --install build
          "${PROTOBUF_PREFIX}/bin/protoc" --version

      - name: Generate code (Buf remote plugins)
        run: |
          buf generate proto

      - name: Configure CMake (use our 32.0 runtime)
        run: |
          cmake -S gen/cpp -B build/cpp -G Ninja \
            -DCMAKE_PREFIX_PATH="${PROTOBUF_PREFIX}" \
            -DProtobuf_INCLUDE_DIR="${PROTOBUF_PREFIX}/include" \
            -DProtobuf_LIBRARY="${PROTOBUF_PREFIX}/lib/libprotobuf.a" || true
          # If FindProtobuf canâ€™t see it, we still pass include path in compile step below.

      - name: Build
        run: |
          cmake --build build/cpp -j

      - name: Upload C++ artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cpp-artifacts
          path: |
            build/cpp/libampy_proto.a
            gen/cpp/**/*.h




  go-smoke:
    name: Go smoke build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: bufbuild/buf-setup-action@v1
      - name: Generate code
        run: buf generate proto
      - uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      - name: Go build example
        run: go build ./examples/go/smoke

  # BSR push disabled - requires Buf Schema Registry setup
  # bsr-push:
  #   name: Push schemas to Buf (BSR)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: bufbuild/buf-setup-action@v1
  #       with:
  #         setup_bsr_credentials: true
  #         bsr_token: ${{ secrets.BUF_TOKEN }}
  #     - name: Lint & Build
  #       run: |
  #         buf lint proto
  #         buf build proto
  #     - name: Push to BSR
  #       run: buf push proto

  github-release:
    name: Create GitHub Release & attach artifacts
    needs: [build-python, build-cpp]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: dist

      - uses: actions/download-artifact@v4
        with:
          name: cpp-artifacts
          path: release_assets/cpp

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
            release_assets/cpp/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
