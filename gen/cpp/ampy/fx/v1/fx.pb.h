// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ampy/fx/v1/fx.proto
// Protobuf C++ Version: 6.32.0

#ifndef ampy_2ffx_2fv1_2ffx_2eproto_2epb_2eh
#define ampy_2ffx_2fv1_2ffx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6032000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "ampy/common/v1/common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ampy_2ffx_2fv1_2ffx_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ampy_2ffx_2fv1_2ffx_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_ampy_2ffx_2fv1_2ffx_2eproto;
}  // extern "C"
namespace ampy {
namespace fx {
namespace v1 {
class FxRate;
struct FxRateDefaultTypeInternal;
extern FxRateDefaultTypeInternal _FxRate_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull FxRate_class_data_;
class FxRateBatch;
struct FxRateBatchDefaultTypeInternal;
extern FxRateBatchDefaultTypeInternal _FxRateBatch_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull FxRateBatch_class_data_;
class Pair;
struct PairDefaultTypeInternal;
extern PairDefaultTypeInternal _Pair_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Pair_class_data_;
}  // namespace v1
}  // namespace fx
}  // namespace ampy
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ampy {
namespace fx {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Pair final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ampy.fx.v1.Pair) */ {
 public:
  inline Pair() : Pair(nullptr) {}
  ~Pair() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Pair* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Pair));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Pair(::google::protobuf::internal::ConstantInitialized);

  inline Pair(const Pair& from) : Pair(nullptr, from) {}
  inline Pair(Pair&& from) noexcept
      : Pair(nullptr, ::std::move(from)) {}
  inline Pair& operator=(const Pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pair& operator=(Pair&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pair& default_instance() {
    return *reinterpret_cast<const Pair*>(
        &_Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Pair& a, Pair& b) { a.Swap(&b); }
  inline void Swap(Pair* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pair* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pair* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Pair>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Pair& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Pair& from) { Pair::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Pair* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ampy.fx.v1.Pair"; }

 protected:
  explicit Pair(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Pair(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Pair& from);
  Pair(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Pair&& from) noexcept
      : Pair(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseFieldNumber = 1,
    kQuoteFieldNumber = 2,
  };
  // string base = 1 [json_name = "base"];
  void clear_base() ;
  const ::std::string& base() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_base(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_base();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_base();
  void set_allocated_base(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_base() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_base(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_base();

  public:
  // string quote = 2 [json_name = "quote"];
  void clear_quote() ;
  const ::std::string& quote() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_quote(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_quote();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_quote();
  void set_allocated_quote(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_quote() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_quote(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_quote();

  public:
  // @@protoc_insertion_point(class_scope:ampy.fx.v1.Pair)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 33,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Pair& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr base_;
    ::google::protobuf::internal::ArenaStringPtr quote_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ampy_2ffx_2fv1_2ffx_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Pair_class_data_;
// -------------------------------------------------------------------

class FxRate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ampy.fx.v1.FxRate) */ {
 public:
  inline FxRate() : FxRate(nullptr) {}
  ~FxRate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FxRate* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FxRate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FxRate(::google::protobuf::internal::ConstantInitialized);

  inline FxRate(const FxRate& from) : FxRate(nullptr, from) {}
  inline FxRate(FxRate&& from) noexcept
      : FxRate(nullptr, ::std::move(from)) {}
  inline FxRate& operator=(const FxRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline FxRate& operator=(FxRate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FxRate& default_instance() {
    return *reinterpret_cast<const FxRate*>(
        &_FxRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FxRate& a, FxRate& b) { a.Swap(&b); }
  inline void Swap(FxRate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FxRate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FxRate* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FxRate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FxRate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FxRate& from) { FxRate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FxRate* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ampy.fx.v1.FxRate"; }

 protected:
  explicit FxRate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  FxRate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FxRate& from);
  FxRate(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, FxRate&& from) noexcept
      : FxRate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPairFieldNumber = 1,
    kBidFieldNumber = 2,
    kAskFieldNumber = 3,
    kMidFieldNumber = 4,
    kAsOfFieldNumber = 5,
    kMetaFieldNumber = 6,
  };
  // .ampy.fx.v1.Pair pair = 1 [json_name = "pair"];
  bool has_pair() const;
  void clear_pair() ;
  const ::ampy::fx::v1::Pair& pair() const;
  [[nodiscard]] ::ampy::fx::v1::Pair* PROTOBUF_NULLABLE release_pair();
  ::ampy::fx::v1::Pair* PROTOBUF_NONNULL mutable_pair();
  void set_allocated_pair(::ampy::fx::v1::Pair* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_pair(::ampy::fx::v1::Pair* PROTOBUF_NULLABLE value);
  ::ampy::fx::v1::Pair* PROTOBUF_NULLABLE unsafe_arena_release_pair();

  private:
  const ::ampy::fx::v1::Pair& _internal_pair() const;
  ::ampy::fx::v1::Pair* PROTOBUF_NONNULL _internal_mutable_pair();

  public:
  // .ampy.common.v1.Decimal bid = 2 [json_name = "bid"];
  bool has_bid() const;
  void clear_bid() ;
  const ::ampy::common::v1::Decimal& bid() const;
  [[nodiscard]] ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE release_bid();
  ::ampy::common::v1::Decimal* PROTOBUF_NONNULL mutable_bid();
  void set_allocated_bid(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_bid(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE unsafe_arena_release_bid();

  private:
  const ::ampy::common::v1::Decimal& _internal_bid() const;
  ::ampy::common::v1::Decimal* PROTOBUF_NONNULL _internal_mutable_bid();

  public:
  // .ampy.common.v1.Decimal ask = 3 [json_name = "ask"];
  bool has_ask() const;
  void clear_ask() ;
  const ::ampy::common::v1::Decimal& ask() const;
  [[nodiscard]] ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE release_ask();
  ::ampy::common::v1::Decimal* PROTOBUF_NONNULL mutable_ask();
  void set_allocated_ask(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_ask(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE unsafe_arena_release_ask();

  private:
  const ::ampy::common::v1::Decimal& _internal_ask() const;
  ::ampy::common::v1::Decimal* PROTOBUF_NONNULL _internal_mutable_ask();

  public:
  // .ampy.common.v1.Decimal mid = 4 [json_name = "mid"];
  bool has_mid() const;
  void clear_mid() ;
  const ::ampy::common::v1::Decimal& mid() const;
  [[nodiscard]] ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE release_mid();
  ::ampy::common::v1::Decimal* PROTOBUF_NONNULL mutable_mid();
  void set_allocated_mid(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_mid(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE unsafe_arena_release_mid();

  private:
  const ::ampy::common::v1::Decimal& _internal_mid() const;
  ::ampy::common::v1::Decimal* PROTOBUF_NONNULL _internal_mutable_mid();

  public:
  // .google.protobuf.Timestamp as_of = 5 [json_name = "asOf"];
  bool has_as_of() const;
  void clear_as_of() ;
  const ::google::protobuf::Timestamp& as_of() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_as_of();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_as_of();
  void set_allocated_as_of(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_as_of(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_as_of();

  private:
  const ::google::protobuf::Timestamp& _internal_as_of() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_as_of();

  public:
  // .ampy.common.v1.Meta meta = 6 [json_name = "meta"];
  bool has_meta() const;
  void clear_meta() ;
  const ::ampy::common::v1::Meta& meta() const;
  [[nodiscard]] ::ampy::common::v1::Meta* PROTOBUF_NULLABLE release_meta();
  ::ampy::common::v1::Meta* PROTOBUF_NONNULL mutable_meta();
  void set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::Meta* PROTOBUF_NULLABLE unsafe_arena_release_meta();

  private:
  const ::ampy::common::v1::Meta& _internal_meta() const;
  ::ampy::common::v1::Meta* PROTOBUF_NONNULL _internal_mutable_meta();

  public:
  // @@protoc_insertion_point(class_scope:ampy.fx.v1.FxRate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   6, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const FxRate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::ampy::fx::v1::Pair* PROTOBUF_NULLABLE pair_;
    ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE bid_;
    ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE ask_;
    ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE mid_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE as_of_;
    ::ampy::common::v1::Meta* PROTOBUF_NULLABLE meta_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ampy_2ffx_2fv1_2ffx_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull FxRate_class_data_;
// -------------------------------------------------------------------

class FxRateBatch final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ampy.fx.v1.FxRateBatch) */ {
 public:
  inline FxRateBatch() : FxRateBatch(nullptr) {}
  ~FxRateBatch() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FxRateBatch* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FxRateBatch));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FxRateBatch(::google::protobuf::internal::ConstantInitialized);

  inline FxRateBatch(const FxRateBatch& from) : FxRateBatch(nullptr, from) {}
  inline FxRateBatch(FxRateBatch&& from) noexcept
      : FxRateBatch(nullptr, ::std::move(from)) {}
  inline FxRateBatch& operator=(const FxRateBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline FxRateBatch& operator=(FxRateBatch&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FxRateBatch& default_instance() {
    return *reinterpret_cast<const FxRateBatch*>(
        &_FxRateBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(FxRateBatch& a, FxRateBatch& b) { a.Swap(&b); }
  inline void Swap(FxRateBatch* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FxRateBatch* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FxRateBatch* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FxRateBatch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FxRateBatch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FxRateBatch& from) { FxRateBatch::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FxRateBatch* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ampy.fx.v1.FxRateBatch"; }

 protected:
  explicit FxRateBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  FxRateBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FxRateBatch& from);
  FxRateBatch(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, FxRateBatch&& from) noexcept
      : FxRateBatch(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRatesFieldNumber = 1,
  };
  // repeated .ampy.fx.v1.FxRate rates = 1 [json_name = "rates"];
  int rates_size() const;
  private:
  int _internal_rates_size() const;

  public:
  void clear_rates() ;
  ::ampy::fx::v1::FxRate* PROTOBUF_NONNULL mutable_rates(int index);
  ::google::protobuf::RepeatedPtrField<::ampy::fx::v1::FxRate>* PROTOBUF_NONNULL mutable_rates();

  private:
  const ::google::protobuf::RepeatedPtrField<::ampy::fx::v1::FxRate>& _internal_rates() const;
  ::google::protobuf::RepeatedPtrField<::ampy::fx::v1::FxRate>* PROTOBUF_NONNULL _internal_mutable_rates();
  public:
  const ::ampy::fx::v1::FxRate& rates(int index) const;
  ::ampy::fx::v1::FxRate* PROTOBUF_NONNULL add_rates();
  const ::google::protobuf::RepeatedPtrField<::ampy::fx::v1::FxRate>& rates() const;
  // @@protoc_insertion_point(class_scope:ampy.fx.v1.FxRateBatch)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const FxRateBatch& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ampy::fx::v1::FxRate > rates_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ampy_2ffx_2fv1_2ffx_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull FxRateBatch_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Pair

// string base = 1 [json_name = "base"];
inline void Pair::clear_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& Pair::base() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.fx.v1.Pair.base)
  return _internal_base();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Pair::set_base(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.base_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ampy.fx.v1.Pair.base)
}
inline ::std::string* PROTOBUF_NONNULL Pair::mutable_base()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:ampy.fx.v1.Pair.base)
  return _s;
}
inline const ::std::string& Pair::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_.Get();
}
inline void Pair::_internal_set_base(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.base_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Pair::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.base_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Pair::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.fx.v1.Pair.base)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.base_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.base_.Set("", GetArena());
  }
  return released;
}
inline void Pair::set_allocated_base(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.base_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.base_.IsDefault()) {
    _impl_.base_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ampy.fx.v1.Pair.base)
}

// string quote = 2 [json_name = "quote"];
inline void Pair::clear_quote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quote_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline const ::std::string& Pair::quote() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.fx.v1.Pair.quote)
  return _internal_quote();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Pair::set_quote(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  _impl_.quote_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ampy.fx.v1.Pair.quote)
}
inline ::std::string* PROTOBUF_NONNULL Pair::mutable_quote()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_quote();
  // @@protoc_insertion_point(field_mutable:ampy.fx.v1.Pair.quote)
  return _s;
}
inline const ::std::string& Pair::_internal_quote() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quote_.Get();
}
inline void Pair::_internal_set_quote(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  _impl_.quote_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Pair::_internal_mutable_quote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  return _impl_.quote_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Pair::release_quote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.fx.v1.Pair.quote)
  if ((_impl_._has_bits_[0] & 0x00000002U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002U;
  auto* released = _impl_.quote_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.quote_.Set("", GetArena());
  }
  return released;
}
inline void Pair::set_allocated_quote(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  _impl_.quote_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.quote_.IsDefault()) {
    _impl_.quote_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ampy.fx.v1.Pair.quote)
}

// -------------------------------------------------------------------

// FxRate

// .ampy.fx.v1.Pair pair = 1 [json_name = "pair"];
inline bool FxRate::has_pair() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pair_ != nullptr);
  return value;
}
inline void FxRate::clear_pair() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pair_ != nullptr) _impl_.pair_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::ampy::fx::v1::Pair& FxRate::_internal_pair() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::fx::v1::Pair* p = _impl_.pair_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::fx::v1::Pair&>(::ampy::fx::v1::_Pair_default_instance_);
}
inline const ::ampy::fx::v1::Pair& FxRate::pair() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.fx.v1.FxRate.pair)
  return _internal_pair();
}
inline void FxRate::unsafe_arena_set_allocated_pair(
    ::ampy::fx::v1::Pair* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pair_);
  }
  _impl_.pair_ = reinterpret_cast<::ampy::fx::v1::Pair*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.fx.v1.FxRate.pair)
}
inline ::ampy::fx::v1::Pair* PROTOBUF_NULLABLE FxRate::release_pair() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001U;
  ::ampy::fx::v1::Pair* released = _impl_.pair_;
  _impl_.pair_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::fx::v1::Pair* PROTOBUF_NULLABLE FxRate::unsafe_arena_release_pair() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.fx.v1.FxRate.pair)

  _impl_._has_bits_[0] &= ~0x00000001U;
  ::ampy::fx::v1::Pair* temp = _impl_.pair_;
  _impl_.pair_ = nullptr;
  return temp;
}
inline ::ampy::fx::v1::Pair* PROTOBUF_NONNULL FxRate::_internal_mutable_pair() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pair_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::fx::v1::Pair>(GetArena());
    _impl_.pair_ = reinterpret_cast<::ampy::fx::v1::Pair*>(p);
  }
  return _impl_.pair_;
}
inline ::ampy::fx::v1::Pair* PROTOBUF_NONNULL FxRate::mutable_pair()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001U;
  ::ampy::fx::v1::Pair* _msg = _internal_mutable_pair();
  // @@protoc_insertion_point(field_mutable:ampy.fx.v1.FxRate.pair)
  return _msg;
}
inline void FxRate::set_allocated_pair(::ampy::fx::v1::Pair* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pair_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }

  _impl_.pair_ = reinterpret_cast<::ampy::fx::v1::Pair*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.fx.v1.FxRate.pair)
}

// .ampy.common.v1.Decimal bid = 2 [json_name = "bid"];
inline bool FxRate::has_bid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bid_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::Decimal& FxRate::_internal_bid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::Decimal* p = _impl_.bid_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::Decimal&>(::ampy::common::v1::_Decimal_default_instance_);
}
inline const ::ampy::common::v1::Decimal& FxRate::bid() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.fx.v1.FxRate.bid)
  return _internal_bid();
}
inline void FxRate::unsafe_arena_set_allocated_bid(
    ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bid_);
  }
  _impl_.bid_ = reinterpret_cast<::ampy::common::v1::Decimal*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.fx.v1.FxRate.bid)
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE FxRate::release_bid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::ampy::common::v1::Decimal* released = _impl_.bid_;
  _impl_.bid_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE FxRate::unsafe_arena_release_bid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.fx.v1.FxRate.bid)

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::ampy::common::v1::Decimal* temp = _impl_.bid_;
  _impl_.bid_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NONNULL FxRate::_internal_mutable_bid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bid_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::Decimal>(GetArena());
    _impl_.bid_ = reinterpret_cast<::ampy::common::v1::Decimal*>(p);
  }
  return _impl_.bid_;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NONNULL FxRate::mutable_bid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002U;
  ::ampy::common::v1::Decimal* _msg = _internal_mutable_bid();
  // @@protoc_insertion_point(field_mutable:ampy.fx.v1.FxRate.bid)
  return _msg;
}
inline void FxRate::set_allocated_bid(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bid_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }

  _impl_.bid_ = reinterpret_cast<::ampy::common::v1::Decimal*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.fx.v1.FxRate.bid)
}

// .ampy.common.v1.Decimal ask = 3 [json_name = "ask"];
inline bool FxRate::has_ask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ask_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::Decimal& FxRate::_internal_ask() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::Decimal* p = _impl_.ask_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::Decimal&>(::ampy::common::v1::_Decimal_default_instance_);
}
inline const ::ampy::common::v1::Decimal& FxRate::ask() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.fx.v1.FxRate.ask)
  return _internal_ask();
}
inline void FxRate::unsafe_arena_set_allocated_ask(
    ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ask_);
  }
  _impl_.ask_ = reinterpret_cast<::ampy::common::v1::Decimal*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.fx.v1.FxRate.ask)
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE FxRate::release_ask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004U;
  ::ampy::common::v1::Decimal* released = _impl_.ask_;
  _impl_.ask_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE FxRate::unsafe_arena_release_ask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.fx.v1.FxRate.ask)

  _impl_._has_bits_[0] &= ~0x00000004U;
  ::ampy::common::v1::Decimal* temp = _impl_.ask_;
  _impl_.ask_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NONNULL FxRate::_internal_mutable_ask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ask_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::Decimal>(GetArena());
    _impl_.ask_ = reinterpret_cast<::ampy::common::v1::Decimal*>(p);
  }
  return _impl_.ask_;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NONNULL FxRate::mutable_ask()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004U;
  ::ampy::common::v1::Decimal* _msg = _internal_mutable_ask();
  // @@protoc_insertion_point(field_mutable:ampy.fx.v1.FxRate.ask)
  return _msg;
}
inline void FxRate::set_allocated_ask(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ask_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }

  _impl_.ask_ = reinterpret_cast<::ampy::common::v1::Decimal*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.fx.v1.FxRate.ask)
}

// .ampy.common.v1.Decimal mid = 4 [json_name = "mid"];
inline bool FxRate::has_mid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mid_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::Decimal& FxRate::_internal_mid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::Decimal* p = _impl_.mid_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::Decimal&>(::ampy::common::v1::_Decimal_default_instance_);
}
inline const ::ampy::common::v1::Decimal& FxRate::mid() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.fx.v1.FxRate.mid)
  return _internal_mid();
}
inline void FxRate::unsafe_arena_set_allocated_mid(
    ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mid_);
  }
  _impl_.mid_ = reinterpret_cast<::ampy::common::v1::Decimal*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.fx.v1.FxRate.mid)
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE FxRate::release_mid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008U;
  ::ampy::common::v1::Decimal* released = _impl_.mid_;
  _impl_.mid_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NULLABLE FxRate::unsafe_arena_release_mid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.fx.v1.FxRate.mid)

  _impl_._has_bits_[0] &= ~0x00000008U;
  ::ampy::common::v1::Decimal* temp = _impl_.mid_;
  _impl_.mid_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NONNULL FxRate::_internal_mutable_mid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mid_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::Decimal>(GetArena());
    _impl_.mid_ = reinterpret_cast<::ampy::common::v1::Decimal*>(p);
  }
  return _impl_.mid_;
}
inline ::ampy::common::v1::Decimal* PROTOBUF_NONNULL FxRate::mutable_mid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008U;
  ::ampy::common::v1::Decimal* _msg = _internal_mutable_mid();
  // @@protoc_insertion_point(field_mutable:ampy.fx.v1.FxRate.mid)
  return _msg;
}
inline void FxRate::set_allocated_mid(::ampy::common::v1::Decimal* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mid_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008U;
  }

  _impl_.mid_ = reinterpret_cast<::ampy::common::v1::Decimal*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.fx.v1.FxRate.mid)
}

// .google.protobuf.Timestamp as_of = 5 [json_name = "asOf"];
inline bool FxRate::has_as_of() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.as_of_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& FxRate::_internal_as_of() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.as_of_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& FxRate::as_of() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.fx.v1.FxRate.as_of)
  return _internal_as_of();
}
inline void FxRate::unsafe_arena_set_allocated_as_of(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.as_of_);
  }
  _impl_.as_of_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.fx.v1.FxRate.as_of)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE FxRate::release_as_of() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010U;
  ::google::protobuf::Timestamp* released = _impl_.as_of_;
  _impl_.as_of_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE FxRate::unsafe_arena_release_as_of() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.fx.v1.FxRate.as_of)

  _impl_._has_bits_[0] &= ~0x00000010U;
  ::google::protobuf::Timestamp* temp = _impl_.as_of_;
  _impl_.as_of_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL FxRate::_internal_mutable_as_of() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.as_of_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.as_of_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.as_of_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL FxRate::mutable_as_of()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010U;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_as_of();
  // @@protoc_insertion_point(field_mutable:ampy.fx.v1.FxRate.as_of)
  return _msg;
}
inline void FxRate::set_allocated_as_of(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.as_of_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010U;
  }

  _impl_.as_of_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.fx.v1.FxRate.as_of)
}

// .ampy.common.v1.Meta meta = 6 [json_name = "meta"];
inline bool FxRate::has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::Meta& FxRate::_internal_meta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::Meta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::Meta&>(::ampy::common::v1::_Meta_default_instance_);
}
inline const ::ampy::common::v1::Meta& FxRate::meta() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.fx.v1.FxRate.meta)
  return _internal_meta();
}
inline void FxRate::unsafe_arena_set_allocated_meta(
    ::ampy::common::v1::Meta* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.fx.v1.FxRate.meta)
}
inline ::ampy::common::v1::Meta* PROTOBUF_NULLABLE FxRate::release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020U;
  ::ampy::common::v1::Meta* released = _impl_.meta_;
  _impl_.meta_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NULLABLE FxRate::unsafe_arena_release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.fx.v1.FxRate.meta)

  _impl_._has_bits_[0] &= ~0x00000020U;
  ::ampy::common::v1::Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NONNULL FxRate::_internal_mutable_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::Meta>(GetArena());
    _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(p);
  }
  return _impl_.meta_;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NONNULL FxRate::mutable_meta()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020U;
  ::ampy::common::v1::Meta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:ampy.fx.v1.FxRate.meta)
  return _msg;
}
inline void FxRate::set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020U;
  }

  _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.fx.v1.FxRate.meta)
}

// -------------------------------------------------------------------

// FxRateBatch

// repeated .ampy.fx.v1.FxRate rates = 1 [json_name = "rates"];
inline int FxRateBatch::_internal_rates_size() const {
  return _internal_rates().size();
}
inline int FxRateBatch::rates_size() const {
  return _internal_rates_size();
}
inline void FxRateBatch::clear_rates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rates_.Clear();
}
inline ::ampy::fx::v1::FxRate* PROTOBUF_NONNULL FxRateBatch::mutable_rates(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ampy.fx.v1.FxRateBatch.rates)
  return _internal_mutable_rates()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ampy::fx::v1::FxRate>* PROTOBUF_NONNULL FxRateBatch::mutable_rates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ampy.fx.v1.FxRateBatch.rates)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rates();
}
inline const ::ampy::fx::v1::FxRate& FxRateBatch::rates(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.fx.v1.FxRateBatch.rates)
  return _internal_rates().Get(index);
}
inline ::ampy::fx::v1::FxRate* PROTOBUF_NONNULL FxRateBatch::add_rates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ampy::fx::v1::FxRate* _add = _internal_mutable_rates()->Add();
  // @@protoc_insertion_point(field_add:ampy.fx.v1.FxRateBatch.rates)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ampy::fx::v1::FxRate>& FxRateBatch::rates() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ampy.fx.v1.FxRateBatch.rates)
  return _internal_rates();
}
inline const ::google::protobuf::RepeatedPtrField<::ampy::fx::v1::FxRate>&
FxRateBatch::_internal_rates() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rates_;
}
inline ::google::protobuf::RepeatedPtrField<::ampy::fx::v1::FxRate>* PROTOBUF_NONNULL
FxRateBatch::_internal_mutable_rates() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rates_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace fx
}  // namespace ampy


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ampy_2ffx_2fv1_2ffx_2eproto_2epb_2eh
