// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: ampy/ticks/v1/ticks.proto

package ticksv1

import (
	v1 "github.com/AmpyFin/ampy-proto/v2/gen/go/ampy/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Trade tick for executions.
type TradeTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Security   *v1.SecurityId         `protobuf:"bytes,1,opt,name=security,proto3" json:"security,omitempty"`
	Price      *v1.Decimal            `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	Size       int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`  // shares/contracts; allow zero only if explicitly permitted by feed
	Venue      string                 `protobuf:"bytes,4,opt,name=venue,proto3" json:"venue,omitempty"` // MIC or venue code
	EventTime  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	IngestTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ingest_time,json=ingestTime,proto3" json:"ingest_time,omitempty"`
	Meta       *v1.Meta               `protobuf:"bytes,7,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *TradeTick) Reset() {
	*x = TradeTick{}
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeTick) ProtoMessage() {}

func (x *TradeTick) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeTick.ProtoReflect.Descriptor instead.
func (*TradeTick) Descriptor() ([]byte, []int) {
	return file_ampy_ticks_v1_ticks_proto_rawDescGZIP(), []int{0}
}

func (x *TradeTick) GetSecurity() *v1.SecurityId {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *TradeTick) GetPrice() *v1.Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *TradeTick) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TradeTick) GetVenue() string {
	if x != nil {
		return x.Venue
	}
	return ""
}

func (x *TradeTick) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *TradeTick) GetIngestTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IngestTime
	}
	return nil
}

func (x *TradeTick) GetMeta() *v1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// Quote tick for bid/ask updates.
type QuoteTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Security   *v1.SecurityId         `protobuf:"bytes,1,opt,name=security,proto3" json:"security,omitempty"`
	Bid        *v1.Decimal            `protobuf:"bytes,2,opt,name=bid,proto3" json:"bid,omitempty"`
	BidSize    int64                  `protobuf:"varint,3,opt,name=bid_size,json=bidSize,proto3" json:"bid_size,omitempty"`
	Ask        *v1.Decimal            `protobuf:"bytes,4,opt,name=ask,proto3" json:"ask,omitempty"`
	AskSize    int64                  `protobuf:"varint,5,opt,name=ask_size,json=askSize,proto3" json:"ask_size,omitempty"`
	Venue      string                 `protobuf:"bytes,6,opt,name=venue,proto3" json:"venue,omitempty"` // e.g., NBBO consolidator or venue code
	EventTime  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	IngestTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=ingest_time,json=ingestTime,proto3" json:"ingest_time,omitempty"`
	Meta       *v1.Meta               `protobuf:"bytes,9,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *QuoteTick) Reset() {
	*x = QuoteTick{}
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuoteTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteTick) ProtoMessage() {}

func (x *QuoteTick) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteTick.ProtoReflect.Descriptor instead.
func (*QuoteTick) Descriptor() ([]byte, []int) {
	return file_ampy_ticks_v1_ticks_proto_rawDescGZIP(), []int{1}
}

func (x *QuoteTick) GetSecurity() *v1.SecurityId {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *QuoteTick) GetBid() *v1.Decimal {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *QuoteTick) GetBidSize() int64 {
	if x != nil {
		return x.BidSize
	}
	return 0
}

func (x *QuoteTick) GetAsk() *v1.Decimal {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *QuoteTick) GetAskSize() int64 {
	if x != nil {
		return x.AskSize
	}
	return 0
}

func (x *QuoteTick) GetVenue() string {
	if x != nil {
		return x.Venue
	}
	return ""
}

func (x *QuoteTick) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *QuoteTick) GetIngestTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IngestTime
	}
	return nil
}

func (x *QuoteTick) GetMeta() *v1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// Unified tick with a oneof to ensure only one variant is set.
type Tick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Tick_Trade
	//	*Tick_Quote
	Kind isTick_Kind `protobuf_oneof:"kind"`
}

func (x *Tick) Reset() {
	*x = Tick{}
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tick) ProtoMessage() {}

func (x *Tick) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tick.ProtoReflect.Descriptor instead.
func (*Tick) Descriptor() ([]byte, []int) {
	return file_ampy_ticks_v1_ticks_proto_rawDescGZIP(), []int{2}
}

func (m *Tick) GetKind() isTick_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Tick) GetTrade() *TradeTick {
	if x, ok := x.GetKind().(*Tick_Trade); ok {
		return x.Trade
	}
	return nil
}

func (x *Tick) GetQuote() *QuoteTick {
	if x, ok := x.GetKind().(*Tick_Quote); ok {
		return x.Quote
	}
	return nil
}

type isTick_Kind interface {
	isTick_Kind()
}

type Tick_Trade struct {
	Trade *TradeTick `protobuf:"bytes,1,opt,name=trade,proto3,oneof"`
}

type Tick_Quote struct {
	Quote *QuoteTick `protobuf:"bytes,2,opt,name=quote,proto3,oneof"`
}

func (*Tick_Trade) isTick_Kind() {}

func (*Tick_Quote) isTick_Kind() {}

type TickBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticks []*Tick `protobuf:"bytes,1,rep,name=ticks,proto3" json:"ticks,omitempty"`
}

func (x *TickBatch) Reset() {
	*x = TickBatch{}
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TickBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickBatch) ProtoMessage() {}

func (x *TickBatch) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickBatch.ProtoReflect.Descriptor instead.
func (*TickBatch) Descriptor() ([]byte, []int) {
	return file_ampy_ticks_v1_ticks_proto_rawDescGZIP(), []int{3}
}

func (x *TickBatch) GetTicks() []*Tick {
	if x != nil {
		return x.Ticks
	}
	return nil
}

var File_ampy_ticks_v1_ticks_proto protoreflect.FileDescriptor

var file_ampy_ticks_v1_ticks_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x6d, 0x70, 0x79, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x6d, 0x70,
	0x79, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x6d, 0x70,
	0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x02, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2d,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x6d, 0x70, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x6d, 0x70, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x87, 0x03, 0x0a, 0x09, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x70, 0x79,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x29, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x6d, 0x70, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69,
	0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x69,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x03, 0x61, 0x73, 0x6b,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x22, 0x72, 0x0a, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x05, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x70,
	0x79, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x6d, 0x70, 0x79, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x36, 0x0a, 0x09, 0x54, 0x69, 0x63, 0x6b, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x05, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x42,
	0xb4, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x74, 0x69, 0x63,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x41, 0x6d, 0x70, 0x79, 0x46, 0x69, 0x6e, 0x2f, 0x61, 0x6d, 0x70, 0x79, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x6d, 0x70,
	0x79, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x69, 0x63, 0x6b, 0x73,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x54, 0x58, 0xaa, 0x02, 0x0d, 0x41, 0x6d, 0x70, 0x79, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x41, 0x6d, 0x70, 0x79, 0x5c,
	0x54, 0x69, 0x63, 0x6b, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x41, 0x6d, 0x70, 0x79, 0x5c,
	0x54, 0x69, 0x63, 0x6b, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x41, 0x6d, 0x70, 0x79, 0x3a, 0x3a, 0x54, 0x69, 0x63,
	0x6b, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ampy_ticks_v1_ticks_proto_rawDescOnce sync.Once
	file_ampy_ticks_v1_ticks_proto_rawDescData = file_ampy_ticks_v1_ticks_proto_rawDesc
)

func file_ampy_ticks_v1_ticks_proto_rawDescGZIP() []byte {
	file_ampy_ticks_v1_ticks_proto_rawDescOnce.Do(func() {
		file_ampy_ticks_v1_ticks_proto_rawDescData = protoimpl.X.CompressGZIP(file_ampy_ticks_v1_ticks_proto_rawDescData)
	})
	return file_ampy_ticks_v1_ticks_proto_rawDescData
}

var file_ampy_ticks_v1_ticks_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ampy_ticks_v1_ticks_proto_goTypes = []any{
	(*TradeTick)(nil),             // 0: ampy.ticks.v1.TradeTick
	(*QuoteTick)(nil),             // 1: ampy.ticks.v1.QuoteTick
	(*Tick)(nil),                  // 2: ampy.ticks.v1.Tick
	(*TickBatch)(nil),             // 3: ampy.ticks.v1.TickBatch
	(*v1.SecurityId)(nil),         // 4: ampy.common.v1.SecurityId
	(*v1.Decimal)(nil),            // 5: ampy.common.v1.Decimal
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
	(*v1.Meta)(nil),               // 7: ampy.common.v1.Meta
}
var file_ampy_ticks_v1_ticks_proto_depIdxs = []int32{
	4,  // 0: ampy.ticks.v1.TradeTick.security:type_name -> ampy.common.v1.SecurityId
	5,  // 1: ampy.ticks.v1.TradeTick.price:type_name -> ampy.common.v1.Decimal
	6,  // 2: ampy.ticks.v1.TradeTick.event_time:type_name -> google.protobuf.Timestamp
	6,  // 3: ampy.ticks.v1.TradeTick.ingest_time:type_name -> google.protobuf.Timestamp
	7,  // 4: ampy.ticks.v1.TradeTick.meta:type_name -> ampy.common.v1.Meta
	4,  // 5: ampy.ticks.v1.QuoteTick.security:type_name -> ampy.common.v1.SecurityId
	5,  // 6: ampy.ticks.v1.QuoteTick.bid:type_name -> ampy.common.v1.Decimal
	5,  // 7: ampy.ticks.v1.QuoteTick.ask:type_name -> ampy.common.v1.Decimal
	6,  // 8: ampy.ticks.v1.QuoteTick.event_time:type_name -> google.protobuf.Timestamp
	6,  // 9: ampy.ticks.v1.QuoteTick.ingest_time:type_name -> google.protobuf.Timestamp
	7,  // 10: ampy.ticks.v1.QuoteTick.meta:type_name -> ampy.common.v1.Meta
	0,  // 11: ampy.ticks.v1.Tick.trade:type_name -> ampy.ticks.v1.TradeTick
	1,  // 12: ampy.ticks.v1.Tick.quote:type_name -> ampy.ticks.v1.QuoteTick
	2,  // 13: ampy.ticks.v1.TickBatch.ticks:type_name -> ampy.ticks.v1.Tick
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_ampy_ticks_v1_ticks_proto_init() }
func file_ampy_ticks_v1_ticks_proto_init() {
	if File_ampy_ticks_v1_ticks_proto != nil {
		return
	}
	file_ampy_ticks_v1_ticks_proto_msgTypes[2].OneofWrappers = []any{
		(*Tick_Trade)(nil),
		(*Tick_Quote)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ampy_ticks_v1_ticks_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ampy_ticks_v1_ticks_proto_goTypes,
		DependencyIndexes: file_ampy_ticks_v1_ticks_proto_depIdxs,
		MessageInfos:      file_ampy_ticks_v1_ticks_proto_msgTypes,
	}.Build()
	File_ampy_ticks_v1_ticks_proto = out.File
	file_ampy_ticks_v1_ticks_proto_rawDesc = nil
	file_ampy_ticks_v1_ticks_proto_goTypes = nil
	file_ampy_ticks_v1_ticks_proto_depIdxs = nil
}
