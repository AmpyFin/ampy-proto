// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: ampy/ticks/v1/ticks.proto

package ticksv1

import (
	v1 "github.com/AmpyFin/ampy-proto/v2/gen/go/ampy/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Trade tick for executions.
type TradeTick struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Security      *v1.SecurityId         `protobuf:"bytes,1,opt,name=security,proto3" json:"security,omitempty"`
	Price         *v1.Decimal            `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	Size          int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`  // shares/contracts; allow zero only if explicitly permitted by feed
	Venue         string                 `protobuf:"bytes,4,opt,name=venue,proto3" json:"venue,omitempty"` // MIC or venue code
	EventTime     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	IngestTime    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ingest_time,json=ingestTime,proto3" json:"ingest_time,omitempty"`
	Meta          *v1.Meta               `protobuf:"bytes,7,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradeTick) Reset() {
	*x = TradeTick{}
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeTick) ProtoMessage() {}

func (x *TradeTick) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeTick.ProtoReflect.Descriptor instead.
func (*TradeTick) Descriptor() ([]byte, []int) {
	return file_ampy_ticks_v1_ticks_proto_rawDescGZIP(), []int{0}
}

func (x *TradeTick) GetSecurity() *v1.SecurityId {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *TradeTick) GetPrice() *v1.Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *TradeTick) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TradeTick) GetVenue() string {
	if x != nil {
		return x.Venue
	}
	return ""
}

func (x *TradeTick) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *TradeTick) GetIngestTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IngestTime
	}
	return nil
}

func (x *TradeTick) GetMeta() *v1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// Quote tick for bid/ask updates.
type QuoteTick struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Security      *v1.SecurityId         `protobuf:"bytes,1,opt,name=security,proto3" json:"security,omitempty"`
	Bid           *v1.Decimal            `protobuf:"bytes,2,opt,name=bid,proto3" json:"bid,omitempty"`
	BidSize       int64                  `protobuf:"varint,3,opt,name=bid_size,json=bidSize,proto3" json:"bid_size,omitempty"`
	Ask           *v1.Decimal            `protobuf:"bytes,4,opt,name=ask,proto3" json:"ask,omitempty"`
	AskSize       int64                  `protobuf:"varint,5,opt,name=ask_size,json=askSize,proto3" json:"ask_size,omitempty"`
	Venue         string                 `protobuf:"bytes,6,opt,name=venue,proto3" json:"venue,omitempty"` // e.g., NBBO consolidator or venue code
	EventTime     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	IngestTime    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=ingest_time,json=ingestTime,proto3" json:"ingest_time,omitempty"`
	Meta          *v1.Meta               `protobuf:"bytes,9,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuoteTick) Reset() {
	*x = QuoteTick{}
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuoteTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteTick) ProtoMessage() {}

func (x *QuoteTick) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteTick.ProtoReflect.Descriptor instead.
func (*QuoteTick) Descriptor() ([]byte, []int) {
	return file_ampy_ticks_v1_ticks_proto_rawDescGZIP(), []int{1}
}

func (x *QuoteTick) GetSecurity() *v1.SecurityId {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *QuoteTick) GetBid() *v1.Decimal {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *QuoteTick) GetBidSize() int64 {
	if x != nil {
		return x.BidSize
	}
	return 0
}

func (x *QuoteTick) GetAsk() *v1.Decimal {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *QuoteTick) GetAskSize() int64 {
	if x != nil {
		return x.AskSize
	}
	return 0
}

func (x *QuoteTick) GetVenue() string {
	if x != nil {
		return x.Venue
	}
	return ""
}

func (x *QuoteTick) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *QuoteTick) GetIngestTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IngestTime
	}
	return nil
}

func (x *QuoteTick) GetMeta() *v1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// Unified tick with a oneof to ensure only one variant is set.
type Tick struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*Tick_Trade
	//	*Tick_Quote
	Kind          isTick_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tick) Reset() {
	*x = Tick{}
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tick) ProtoMessage() {}

func (x *Tick) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tick.ProtoReflect.Descriptor instead.
func (*Tick) Descriptor() ([]byte, []int) {
	return file_ampy_ticks_v1_ticks_proto_rawDescGZIP(), []int{2}
}

func (x *Tick) GetKind() isTick_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Tick) GetTrade() *TradeTick {
	if x != nil {
		if x, ok := x.Kind.(*Tick_Trade); ok {
			return x.Trade
		}
	}
	return nil
}

func (x *Tick) GetQuote() *QuoteTick {
	if x != nil {
		if x, ok := x.Kind.(*Tick_Quote); ok {
			return x.Quote
		}
	}
	return nil
}

type isTick_Kind interface {
	isTick_Kind()
}

type Tick_Trade struct {
	Trade *TradeTick `protobuf:"bytes,1,opt,name=trade,proto3,oneof"`
}

type Tick_Quote struct {
	Quote *QuoteTick `protobuf:"bytes,2,opt,name=quote,proto3,oneof"`
}

func (*Tick_Trade) isTick_Kind() {}

func (*Tick_Quote) isTick_Kind() {}

type TickBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ticks         []*Tick                `protobuf:"bytes,1,rep,name=ticks,proto3" json:"ticks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TickBatch) Reset() {
	*x = TickBatch{}
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TickBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickBatch) ProtoMessage() {}

func (x *TickBatch) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_ticks_v1_ticks_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickBatch.ProtoReflect.Descriptor instead.
func (*TickBatch) Descriptor() ([]byte, []int) {
	return file_ampy_ticks_v1_ticks_proto_rawDescGZIP(), []int{3}
}

func (x *TickBatch) GetTicks() []*Tick {
	if x != nil {
		return x.Ticks
	}
	return nil
}

var File_ampy_ticks_v1_ticks_proto protoreflect.FileDescriptor

const file_ampy_ticks_v1_ticks_proto_rawDesc = "" +
	"\n" +
	"\x19ampy/ticks/v1/ticks.proto\x12\rampy.ticks.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bampy/common/v1/common.proto\"\xbe\x02\n" +
	"\tTradeTick\x126\n" +
	"\bsecurity\x18\x01 \x01(\v2\x1a.ampy.common.v1.SecurityIdR\bsecurity\x12-\n" +
	"\x05price\x18\x02 \x01(\v2\x17.ampy.common.v1.DecimalR\x05price\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04size\x12\x14\n" +
	"\x05venue\x18\x04 \x01(\tR\x05venue\x129\n" +
	"\n" +
	"event_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\teventTime\x12;\n" +
	"\vingest_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"ingestTime\x12(\n" +
	"\x04meta\x18\a \x01(\v2\x14.ampy.common.v1.MetaR\x04meta\"\x87\x03\n" +
	"\tQuoteTick\x126\n" +
	"\bsecurity\x18\x01 \x01(\v2\x1a.ampy.common.v1.SecurityIdR\bsecurity\x12)\n" +
	"\x03bid\x18\x02 \x01(\v2\x17.ampy.common.v1.DecimalR\x03bid\x12\x19\n" +
	"\bbid_size\x18\x03 \x01(\x03R\abidSize\x12)\n" +
	"\x03ask\x18\x04 \x01(\v2\x17.ampy.common.v1.DecimalR\x03ask\x12\x19\n" +
	"\bask_size\x18\x05 \x01(\x03R\aaskSize\x12\x14\n" +
	"\x05venue\x18\x06 \x01(\tR\x05venue\x129\n" +
	"\n" +
	"event_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\teventTime\x12;\n" +
	"\vingest_time\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"ingestTime\x12(\n" +
	"\x04meta\x18\t \x01(\v2\x14.ampy.common.v1.MetaR\x04meta\"r\n" +
	"\x04Tick\x120\n" +
	"\x05trade\x18\x01 \x01(\v2\x18.ampy.ticks.v1.TradeTickH\x00R\x05trade\x120\n" +
	"\x05quote\x18\x02 \x01(\v2\x18.ampy.ticks.v1.QuoteTickH\x00R\x05quoteB\x06\n" +
	"\x04kind\"6\n" +
	"\tTickBatch\x12)\n" +
	"\x05ticks\x18\x01 \x03(\v2\x13.ampy.ticks.v1.TickR\x05ticksB\xb4\x01\n" +
	"\x11com.ampy.ticks.v1B\n" +
	"TicksProtoP\x01Z=github.com/AmpyFin/ampy-proto/v2/gen/go/ampy/ticks/v1;ticksv1\xa2\x02\x03ATX\xaa\x02\rAmpy.Ticks.V1\xca\x02\rAmpy\\Ticks\\V1\xe2\x02\x19Ampy\\Ticks\\V1\\GPBMetadata\xea\x02\x0fAmpy::Ticks::V1b\x06proto3"

var (
	file_ampy_ticks_v1_ticks_proto_rawDescOnce sync.Once
	file_ampy_ticks_v1_ticks_proto_rawDescData []byte
)

func file_ampy_ticks_v1_ticks_proto_rawDescGZIP() []byte {
	file_ampy_ticks_v1_ticks_proto_rawDescOnce.Do(func() {
		file_ampy_ticks_v1_ticks_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ampy_ticks_v1_ticks_proto_rawDesc), len(file_ampy_ticks_v1_ticks_proto_rawDesc)))
	})
	return file_ampy_ticks_v1_ticks_proto_rawDescData
}

var file_ampy_ticks_v1_ticks_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ampy_ticks_v1_ticks_proto_goTypes = []any{
	(*TradeTick)(nil),             // 0: ampy.ticks.v1.TradeTick
	(*QuoteTick)(nil),             // 1: ampy.ticks.v1.QuoteTick
	(*Tick)(nil),                  // 2: ampy.ticks.v1.Tick
	(*TickBatch)(nil),             // 3: ampy.ticks.v1.TickBatch
	(*v1.SecurityId)(nil),         // 4: ampy.common.v1.SecurityId
	(*v1.Decimal)(nil),            // 5: ampy.common.v1.Decimal
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
	(*v1.Meta)(nil),               // 7: ampy.common.v1.Meta
}
var file_ampy_ticks_v1_ticks_proto_depIdxs = []int32{
	4,  // 0: ampy.ticks.v1.TradeTick.security:type_name -> ampy.common.v1.SecurityId
	5,  // 1: ampy.ticks.v1.TradeTick.price:type_name -> ampy.common.v1.Decimal
	6,  // 2: ampy.ticks.v1.TradeTick.event_time:type_name -> google.protobuf.Timestamp
	6,  // 3: ampy.ticks.v1.TradeTick.ingest_time:type_name -> google.protobuf.Timestamp
	7,  // 4: ampy.ticks.v1.TradeTick.meta:type_name -> ampy.common.v1.Meta
	4,  // 5: ampy.ticks.v1.QuoteTick.security:type_name -> ampy.common.v1.SecurityId
	5,  // 6: ampy.ticks.v1.QuoteTick.bid:type_name -> ampy.common.v1.Decimal
	5,  // 7: ampy.ticks.v1.QuoteTick.ask:type_name -> ampy.common.v1.Decimal
	6,  // 8: ampy.ticks.v1.QuoteTick.event_time:type_name -> google.protobuf.Timestamp
	6,  // 9: ampy.ticks.v1.QuoteTick.ingest_time:type_name -> google.protobuf.Timestamp
	7,  // 10: ampy.ticks.v1.QuoteTick.meta:type_name -> ampy.common.v1.Meta
	0,  // 11: ampy.ticks.v1.Tick.trade:type_name -> ampy.ticks.v1.TradeTick
	1,  // 12: ampy.ticks.v1.Tick.quote:type_name -> ampy.ticks.v1.QuoteTick
	2,  // 13: ampy.ticks.v1.TickBatch.ticks:type_name -> ampy.ticks.v1.Tick
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_ampy_ticks_v1_ticks_proto_init() }
func file_ampy_ticks_v1_ticks_proto_init() {
	if File_ampy_ticks_v1_ticks_proto != nil {
		return
	}
	file_ampy_ticks_v1_ticks_proto_msgTypes[2].OneofWrappers = []any{
		(*Tick_Trade)(nil),
		(*Tick_Quote)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ampy_ticks_v1_ticks_proto_rawDesc), len(file_ampy_ticks_v1_ticks_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ampy_ticks_v1_ticks_proto_goTypes,
		DependencyIndexes: file_ampy_ticks_v1_ticks_proto_depIdxs,
		MessageInfos:      file_ampy_ticks_v1_ticks_proto_msgTypes,
	}.Build()
	File_ampy_ticks_v1_ticks_proto = out.File
	file_ampy_ticks_v1_ticks_proto_goTypes = nil
	file_ampy_ticks_v1_ticks_proto_depIdxs = nil
}
