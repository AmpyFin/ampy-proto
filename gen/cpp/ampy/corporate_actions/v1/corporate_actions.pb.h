// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ampy/corporate_actions/v1/corporate_actions.proto
// Protobuf C++ Version: 6.32.0

#ifndef ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto_2epb_2eh
#define ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6032000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "ampy/common/v1/common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto;
}  // extern "C"
namespace ampy {
namespace corporate_actions {
namespace v1 {
class CorporateAction;
struct CorporateActionDefaultTypeInternal;
extern CorporateActionDefaultTypeInternal _CorporateAction_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CorporateAction_class_data_;
class CorporateActionBatch;
struct CorporateActionBatchDefaultTypeInternal;
extern CorporateActionBatchDefaultTypeInternal _CorporateActionBatch_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CorporateActionBatch_class_data_;
class DividendAction;
struct DividendActionDefaultTypeInternal;
extern DividendActionDefaultTypeInternal _DividendAction_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DividendAction_class_data_;
class SplitAction;
struct SplitActionDefaultTypeInternal;
extern SplitActionDefaultTypeInternal _SplitAction_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SplitAction_class_data_;
}  // namespace v1
}  // namespace corporate_actions
}  // namespace ampy
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ampy {
namespace corporate_actions {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class SplitAction final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ampy.corporate_actions.v1.SplitAction) */ {
 public:
  inline SplitAction() : SplitAction(nullptr) {}
  ~SplitAction() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SplitAction* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SplitAction));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SplitAction(::google::protobuf::internal::ConstantInitialized);

  inline SplitAction(const SplitAction& from) : SplitAction(nullptr, from) {}
  inline SplitAction(SplitAction&& from) noexcept
      : SplitAction(nullptr, ::std::move(from)) {}
  inline SplitAction& operator=(const SplitAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitAction& operator=(SplitAction&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SplitAction& default_instance() {
    return *reinterpret_cast<const SplitAction*>(
        &_SplitAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SplitAction& a, SplitAction& b) { a.Swap(&b); }
  inline void Swap(SplitAction* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitAction* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SplitAction* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SplitAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SplitAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SplitAction& from) { SplitAction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SplitAction* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ampy.corporate_actions.v1.SplitAction"; }

 protected:
  explicit SplitAction(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SplitAction(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SplitAction& from);
  SplitAction(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SplitAction&& from) noexcept
      : SplitAction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSecurityFieldNumber = 1,
    kExDateFieldNumber = 4,
    kMetaFieldNumber = 5,
    kRatioNumeratorFieldNumber = 2,
    kRatioDenominatorFieldNumber = 3,
  };
  // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
  bool has_security() const;
  void clear_security() ;
  const ::ampy::common::v1::SecurityId& security() const;
  [[nodiscard]] ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE release_security();
  ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL mutable_security();
  void set_allocated_security(::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_security(::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE unsafe_arena_release_security();

  private:
  const ::ampy::common::v1::SecurityId& _internal_security() const;
  ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL _internal_mutable_security();

  public:
  // .google.protobuf.Timestamp ex_date = 4 [json_name = "exDate"];
  bool has_ex_date() const;
  void clear_ex_date() ;
  const ::google::protobuf::Timestamp& ex_date() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_ex_date();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_ex_date();
  void set_allocated_ex_date(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_ex_date(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_ex_date();

  private:
  const ::google::protobuf::Timestamp& _internal_ex_date() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_ex_date();

  public:
  // .ampy.common.v1.Meta meta = 5 [json_name = "meta"];
  bool has_meta() const;
  void clear_meta() ;
  const ::ampy::common::v1::Meta& meta() const;
  [[nodiscard]] ::ampy::common::v1::Meta* PROTOBUF_NULLABLE release_meta();
  ::ampy::common::v1::Meta* PROTOBUF_NONNULL mutable_meta();
  void set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::Meta* PROTOBUF_NULLABLE unsafe_arena_release_meta();

  private:
  const ::ampy::common::v1::Meta& _internal_meta() const;
  ::ampy::common::v1::Meta* PROTOBUF_NONNULL _internal_mutable_meta();

  public:
  // int32 ratio_numerator = 2 [json_name = "ratioNumerator"];
  void clear_ratio_numerator() ;
  ::int32_t ratio_numerator() const;
  void set_ratio_numerator(::int32_t value);

  private:
  ::int32_t _internal_ratio_numerator() const;
  void _internal_set_ratio_numerator(::int32_t value);

  public:
  // int32 ratio_denominator = 3 [json_name = "ratioDenominator"];
  void clear_ratio_denominator() ;
  ::int32_t ratio_denominator() const;
  void set_ratio_denominator(::int32_t value);

  private:
  ::int32_t _internal_ratio_denominator() const;
  void _internal_set_ratio_denominator(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ampy.corporate_actions.v1.SplitAction)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SplitAction& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE security_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE ex_date_;
    ::ampy::common::v1::Meta* PROTOBUF_NULLABLE meta_;
    ::int32_t ratio_numerator_;
    ::int32_t ratio_denominator_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SplitAction_class_data_;
// -------------------------------------------------------------------

class DividendAction final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ampy.corporate_actions.v1.DividendAction) */ {
 public:
  inline DividendAction() : DividendAction(nullptr) {}
  ~DividendAction() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DividendAction* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DividendAction));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DividendAction(::google::protobuf::internal::ConstantInitialized);

  inline DividendAction(const DividendAction& from) : DividendAction(nullptr, from) {}
  inline DividendAction(DividendAction&& from) noexcept
      : DividendAction(nullptr, ::std::move(from)) {}
  inline DividendAction& operator=(const DividendAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline DividendAction& operator=(DividendAction&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DividendAction& default_instance() {
    return *reinterpret_cast<const DividendAction*>(
        &_DividendAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(DividendAction& a, DividendAction& b) { a.Swap(&b); }
  inline void Swap(DividendAction* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DividendAction* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DividendAction* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DividendAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DividendAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DividendAction& from) { DividendAction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DividendAction* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ampy.corporate_actions.v1.DividendAction"; }

 protected:
  explicit DividendAction(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DividendAction(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DividendAction& from);
  DividendAction(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DividendAction&& from) noexcept
      : DividendAction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSecurityFieldNumber = 1,
    kCashAmountFieldNumber = 2,
    kExDateFieldNumber = 3,
    kPayDateFieldNumber = 4,
    kMetaFieldNumber = 5,
  };
  // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
  bool has_security() const;
  void clear_security() ;
  const ::ampy::common::v1::SecurityId& security() const;
  [[nodiscard]] ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE release_security();
  ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL mutable_security();
  void set_allocated_security(::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_security(::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE unsafe_arena_release_security();

  private:
  const ::ampy::common::v1::SecurityId& _internal_security() const;
  ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL _internal_mutable_security();

  public:
  // .ampy.common.v1.Money cash_amount = 2 [json_name = "cashAmount"];
  bool has_cash_amount() const;
  void clear_cash_amount() ;
  const ::ampy::common::v1::Money& cash_amount() const;
  [[nodiscard]] ::ampy::common::v1::Money* PROTOBUF_NULLABLE release_cash_amount();
  ::ampy::common::v1::Money* PROTOBUF_NONNULL mutable_cash_amount();
  void set_allocated_cash_amount(::ampy::common::v1::Money* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_cash_amount(::ampy::common::v1::Money* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::Money* PROTOBUF_NULLABLE unsafe_arena_release_cash_amount();

  private:
  const ::ampy::common::v1::Money& _internal_cash_amount() const;
  ::ampy::common::v1::Money* PROTOBUF_NONNULL _internal_mutable_cash_amount();

  public:
  // .google.protobuf.Timestamp ex_date = 3 [json_name = "exDate"];
  bool has_ex_date() const;
  void clear_ex_date() ;
  const ::google::protobuf::Timestamp& ex_date() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_ex_date();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_ex_date();
  void set_allocated_ex_date(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_ex_date(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_ex_date();

  private:
  const ::google::protobuf::Timestamp& _internal_ex_date() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_ex_date();

  public:
  // .google.protobuf.Timestamp pay_date = 4 [json_name = "payDate"];
  bool has_pay_date() const;
  void clear_pay_date() ;
  const ::google::protobuf::Timestamp& pay_date() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_pay_date();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_pay_date();
  void set_allocated_pay_date(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_pay_date(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_pay_date();

  private:
  const ::google::protobuf::Timestamp& _internal_pay_date() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_pay_date();

  public:
  // .ampy.common.v1.Meta meta = 5 [json_name = "meta"];
  bool has_meta() const;
  void clear_meta() ;
  const ::ampy::common::v1::Meta& meta() const;
  [[nodiscard]] ::ampy::common::v1::Meta* PROTOBUF_NULLABLE release_meta();
  ::ampy::common::v1::Meta* PROTOBUF_NONNULL mutable_meta();
  void set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value);
  ::ampy::common::v1::Meta* PROTOBUF_NULLABLE unsafe_arena_release_meta();

  private:
  const ::ampy::common::v1::Meta& _internal_meta() const;
  ::ampy::common::v1::Meta* PROTOBUF_NONNULL _internal_mutable_meta();

  public:
  // @@protoc_insertion_point(class_scope:ampy.corporate_actions.v1.DividendAction)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   5, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DividendAction& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE security_;
    ::ampy::common::v1::Money* PROTOBUF_NULLABLE cash_amount_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE ex_date_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE pay_date_;
    ::ampy::common::v1::Meta* PROTOBUF_NULLABLE meta_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DividendAction_class_data_;
// -------------------------------------------------------------------

class CorporateAction final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ampy.corporate_actions.v1.CorporateAction) */ {
 public:
  inline CorporateAction() : CorporateAction(nullptr) {}
  ~CorporateAction() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CorporateAction* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CorporateAction));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CorporateAction(::google::protobuf::internal::ConstantInitialized);

  inline CorporateAction(const CorporateAction& from) : CorporateAction(nullptr, from) {}
  inline CorporateAction(CorporateAction&& from) noexcept
      : CorporateAction(nullptr, ::std::move(from)) {}
  inline CorporateAction& operator=(const CorporateAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CorporateAction& operator=(CorporateAction&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CorporateAction& default_instance() {
    return *reinterpret_cast<const CorporateAction*>(
        &_CorporateAction_default_instance_);
  }
  enum ActionCase {
    kSplit = 1,
    kDividend = 2,
    ACTION_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CorporateAction& a, CorporateAction& b) { a.Swap(&b); }
  inline void Swap(CorporateAction* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CorporateAction* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CorporateAction* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CorporateAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CorporateAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CorporateAction& from) { CorporateAction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CorporateAction* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ampy.corporate_actions.v1.CorporateAction"; }

 protected:
  explicit CorporateAction(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CorporateAction(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CorporateAction& from);
  CorporateAction(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CorporateAction&& from) noexcept
      : CorporateAction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSplitFieldNumber = 1,
    kDividendFieldNumber = 2,
  };
  // .ampy.corporate_actions.v1.SplitAction split = 1 [json_name = "split"];
  bool has_split() const;
  private:
  bool _internal_has_split() const;

  public:
  void clear_split() ;
  const ::ampy::corporate_actions::v1::SplitAction& split() const;
  [[nodiscard]] ::ampy::corporate_actions::v1::SplitAction* PROTOBUF_NULLABLE release_split();
  ::ampy::corporate_actions::v1::SplitAction* PROTOBUF_NONNULL mutable_split();
  void set_allocated_split(::ampy::corporate_actions::v1::SplitAction* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_split(::ampy::corporate_actions::v1::SplitAction* PROTOBUF_NULLABLE value);
  ::ampy::corporate_actions::v1::SplitAction* PROTOBUF_NULLABLE unsafe_arena_release_split();

  private:
  const ::ampy::corporate_actions::v1::SplitAction& _internal_split() const;
  ::ampy::corporate_actions::v1::SplitAction* PROTOBUF_NONNULL _internal_mutable_split();

  public:
  // .ampy.corporate_actions.v1.DividendAction dividend = 2 [json_name = "dividend"];
  bool has_dividend() const;
  private:
  bool _internal_has_dividend() const;

  public:
  void clear_dividend() ;
  const ::ampy::corporate_actions::v1::DividendAction& dividend() const;
  [[nodiscard]] ::ampy::corporate_actions::v1::DividendAction* PROTOBUF_NULLABLE release_dividend();
  ::ampy::corporate_actions::v1::DividendAction* PROTOBUF_NONNULL mutable_dividend();
  void set_allocated_dividend(::ampy::corporate_actions::v1::DividendAction* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_dividend(::ampy::corporate_actions::v1::DividendAction* PROTOBUF_NULLABLE value);
  ::ampy::corporate_actions::v1::DividendAction* PROTOBUF_NULLABLE unsafe_arena_release_dividend();

  private:
  const ::ampy::corporate_actions::v1::DividendAction& _internal_dividend() const;
  ::ampy::corporate_actions::v1::DividendAction* PROTOBUF_NONNULL _internal_mutable_dividend();

  public:
  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:ampy.corporate_actions.v1.CorporateAction)
 private:
  class _Internal;
  void set_has_split();
  void set_has_dividend();
  inline bool has_action() const;
  inline void clear_has_action();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CorporateAction& from_msg);
    union ActionUnion {
      constexpr ActionUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::ampy::corporate_actions::v1::SplitAction* PROTOBUF_NULLABLE split_;
      ::ampy::corporate_actions::v1::DividendAction* PROTOBUF_NULLABLE dividend_;
    } action_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CorporateAction_class_data_;
// -------------------------------------------------------------------

class CorporateActionBatch final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ampy.corporate_actions.v1.CorporateActionBatch) */ {
 public:
  inline CorporateActionBatch() : CorporateActionBatch(nullptr) {}
  ~CorporateActionBatch() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CorporateActionBatch* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CorporateActionBatch));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CorporateActionBatch(::google::protobuf::internal::ConstantInitialized);

  inline CorporateActionBatch(const CorporateActionBatch& from) : CorporateActionBatch(nullptr, from) {}
  inline CorporateActionBatch(CorporateActionBatch&& from) noexcept
      : CorporateActionBatch(nullptr, ::std::move(from)) {}
  inline CorporateActionBatch& operator=(const CorporateActionBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CorporateActionBatch& operator=(CorporateActionBatch&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CorporateActionBatch& default_instance() {
    return *reinterpret_cast<const CorporateActionBatch*>(
        &_CorporateActionBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CorporateActionBatch& a, CorporateActionBatch& b) { a.Swap(&b); }
  inline void Swap(CorporateActionBatch* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CorporateActionBatch* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CorporateActionBatch* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CorporateActionBatch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CorporateActionBatch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CorporateActionBatch& from) { CorporateActionBatch::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CorporateActionBatch* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ampy.corporate_actions.v1.CorporateActionBatch"; }

 protected:
  explicit CorporateActionBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CorporateActionBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CorporateActionBatch& from);
  CorporateActionBatch(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CorporateActionBatch&& from) noexcept
      : CorporateActionBatch(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kActionsFieldNumber = 1,
  };
  // repeated .ampy.corporate_actions.v1.CorporateAction actions = 1 [json_name = "actions"];
  int actions_size() const;
  private:
  int _internal_actions_size() const;

  public:
  void clear_actions() ;
  ::ampy::corporate_actions::v1::CorporateAction* PROTOBUF_NONNULL mutable_actions(int index);
  ::google::protobuf::RepeatedPtrField<::ampy::corporate_actions::v1::CorporateAction>* PROTOBUF_NONNULL mutable_actions();

  private:
  const ::google::protobuf::RepeatedPtrField<::ampy::corporate_actions::v1::CorporateAction>& _internal_actions() const;
  ::google::protobuf::RepeatedPtrField<::ampy::corporate_actions::v1::CorporateAction>* PROTOBUF_NONNULL _internal_mutable_actions();
  public:
  const ::ampy::corporate_actions::v1::CorporateAction& actions(int index) const;
  ::ampy::corporate_actions::v1::CorporateAction* PROTOBUF_NONNULL add_actions();
  const ::google::protobuf::RepeatedPtrField<::ampy::corporate_actions::v1::CorporateAction>& actions() const;
  // @@protoc_insertion_point(class_scope:ampy.corporate_actions.v1.CorporateActionBatch)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CorporateActionBatch& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ampy::corporate_actions::v1::CorporateAction > actions_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CorporateActionBatch_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SplitAction

// .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
inline bool SplitAction::has_security() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.security_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::SecurityId& SplitAction::_internal_security() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::SecurityId* p = _impl_.security_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::SecurityId&>(::ampy::common::v1::_SecurityId_default_instance_);
}
inline const ::ampy::common::v1::SecurityId& SplitAction::security() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.corporate_actions.v1.SplitAction.security)
  return _internal_security();
}
inline void SplitAction::unsafe_arena_set_allocated_security(
    ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.security_);
  }
  _impl_.security_ = reinterpret_cast<::ampy::common::v1::SecurityId*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.corporate_actions.v1.SplitAction.security)
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE SplitAction::release_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001U;
  ::ampy::common::v1::SecurityId* released = _impl_.security_;
  _impl_.security_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE SplitAction::unsafe_arena_release_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.corporate_actions.v1.SplitAction.security)

  _impl_._has_bits_[0] &= ~0x00000001U;
  ::ampy::common::v1::SecurityId* temp = _impl_.security_;
  _impl_.security_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL SplitAction::_internal_mutable_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.security_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::SecurityId>(GetArena());
    _impl_.security_ = reinterpret_cast<::ampy::common::v1::SecurityId*>(p);
  }
  return _impl_.security_;
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL SplitAction::mutable_security()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001U;
  ::ampy::common::v1::SecurityId* _msg = _internal_mutable_security();
  // @@protoc_insertion_point(field_mutable:ampy.corporate_actions.v1.SplitAction.security)
  return _msg;
}
inline void SplitAction::set_allocated_security(::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.security_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }

  _impl_.security_ = reinterpret_cast<::ampy::common::v1::SecurityId*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.corporate_actions.v1.SplitAction.security)
}

// int32 ratio_numerator = 2 [json_name = "ratioNumerator"];
inline void SplitAction::clear_ratio_numerator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ratio_numerator_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008U;
}
inline ::int32_t SplitAction::ratio_numerator() const {
  // @@protoc_insertion_point(field_get:ampy.corporate_actions.v1.SplitAction.ratio_numerator)
  return _internal_ratio_numerator();
}
inline void SplitAction::set_ratio_numerator(::int32_t value) {
  _internal_set_ratio_numerator(value);
  _impl_._has_bits_[0] |= 0x00000008U;
  // @@protoc_insertion_point(field_set:ampy.corporate_actions.v1.SplitAction.ratio_numerator)
}
inline ::int32_t SplitAction::_internal_ratio_numerator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ratio_numerator_;
}
inline void SplitAction::_internal_set_ratio_numerator(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ratio_numerator_ = value;
}

// int32 ratio_denominator = 3 [json_name = "ratioDenominator"];
inline void SplitAction::clear_ratio_denominator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ratio_denominator_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010U;
}
inline ::int32_t SplitAction::ratio_denominator() const {
  // @@protoc_insertion_point(field_get:ampy.corporate_actions.v1.SplitAction.ratio_denominator)
  return _internal_ratio_denominator();
}
inline void SplitAction::set_ratio_denominator(::int32_t value) {
  _internal_set_ratio_denominator(value);
  _impl_._has_bits_[0] |= 0x00000010U;
  // @@protoc_insertion_point(field_set:ampy.corporate_actions.v1.SplitAction.ratio_denominator)
}
inline ::int32_t SplitAction::_internal_ratio_denominator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ratio_denominator_;
}
inline void SplitAction::_internal_set_ratio_denominator(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ratio_denominator_ = value;
}

// .google.protobuf.Timestamp ex_date = 4 [json_name = "exDate"];
inline bool SplitAction::has_ex_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ex_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& SplitAction::_internal_ex_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.ex_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& SplitAction::ex_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.corporate_actions.v1.SplitAction.ex_date)
  return _internal_ex_date();
}
inline void SplitAction::unsafe_arena_set_allocated_ex_date(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ex_date_);
  }
  _impl_.ex_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.corporate_actions.v1.SplitAction.ex_date)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE SplitAction::release_ex_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::google::protobuf::Timestamp* released = _impl_.ex_date_;
  _impl_.ex_date_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE SplitAction::unsafe_arena_release_ex_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.corporate_actions.v1.SplitAction.ex_date)

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::google::protobuf::Timestamp* temp = _impl_.ex_date_;
  _impl_.ex_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL SplitAction::_internal_mutable_ex_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ex_date_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.ex_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.ex_date_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL SplitAction::mutable_ex_date()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002U;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_ex_date();
  // @@protoc_insertion_point(field_mutable:ampy.corporate_actions.v1.SplitAction.ex_date)
  return _msg;
}
inline void SplitAction::set_allocated_ex_date(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ex_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }

  _impl_.ex_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.corporate_actions.v1.SplitAction.ex_date)
}

// .ampy.common.v1.Meta meta = 5 [json_name = "meta"];
inline bool SplitAction::has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::Meta& SplitAction::_internal_meta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::Meta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::Meta&>(::ampy::common::v1::_Meta_default_instance_);
}
inline const ::ampy::common::v1::Meta& SplitAction::meta() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.corporate_actions.v1.SplitAction.meta)
  return _internal_meta();
}
inline void SplitAction::unsafe_arena_set_allocated_meta(
    ::ampy::common::v1::Meta* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.corporate_actions.v1.SplitAction.meta)
}
inline ::ampy::common::v1::Meta* PROTOBUF_NULLABLE SplitAction::release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004U;
  ::ampy::common::v1::Meta* released = _impl_.meta_;
  _impl_.meta_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NULLABLE SplitAction::unsafe_arena_release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.corporate_actions.v1.SplitAction.meta)

  _impl_._has_bits_[0] &= ~0x00000004U;
  ::ampy::common::v1::Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NONNULL SplitAction::_internal_mutable_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::Meta>(GetArena());
    _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(p);
  }
  return _impl_.meta_;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NONNULL SplitAction::mutable_meta()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004U;
  ::ampy::common::v1::Meta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:ampy.corporate_actions.v1.SplitAction.meta)
  return _msg;
}
inline void SplitAction::set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }

  _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.corporate_actions.v1.SplitAction.meta)
}

// -------------------------------------------------------------------

// DividendAction

// .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
inline bool DividendAction::has_security() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.security_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::SecurityId& DividendAction::_internal_security() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::SecurityId* p = _impl_.security_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::SecurityId&>(::ampy::common::v1::_SecurityId_default_instance_);
}
inline const ::ampy::common::v1::SecurityId& DividendAction::security() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.corporate_actions.v1.DividendAction.security)
  return _internal_security();
}
inline void DividendAction::unsafe_arena_set_allocated_security(
    ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.security_);
  }
  _impl_.security_ = reinterpret_cast<::ampy::common::v1::SecurityId*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.corporate_actions.v1.DividendAction.security)
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE DividendAction::release_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001U;
  ::ampy::common::v1::SecurityId* released = _impl_.security_;
  _impl_.security_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE DividendAction::unsafe_arena_release_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.corporate_actions.v1.DividendAction.security)

  _impl_._has_bits_[0] &= ~0x00000001U;
  ::ampy::common::v1::SecurityId* temp = _impl_.security_;
  _impl_.security_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL DividendAction::_internal_mutable_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.security_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::SecurityId>(GetArena());
    _impl_.security_ = reinterpret_cast<::ampy::common::v1::SecurityId*>(p);
  }
  return _impl_.security_;
}
inline ::ampy::common::v1::SecurityId* PROTOBUF_NONNULL DividendAction::mutable_security()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001U;
  ::ampy::common::v1::SecurityId* _msg = _internal_mutable_security();
  // @@protoc_insertion_point(field_mutable:ampy.corporate_actions.v1.DividendAction.security)
  return _msg;
}
inline void DividendAction::set_allocated_security(::ampy::common::v1::SecurityId* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.security_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }

  _impl_.security_ = reinterpret_cast<::ampy::common::v1::SecurityId*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.corporate_actions.v1.DividendAction.security)
}

// .ampy.common.v1.Money cash_amount = 2 [json_name = "cashAmount"];
inline bool DividendAction::has_cash_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cash_amount_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::Money& DividendAction::_internal_cash_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::Money* p = _impl_.cash_amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::Money&>(::ampy::common::v1::_Money_default_instance_);
}
inline const ::ampy::common::v1::Money& DividendAction::cash_amount() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.corporate_actions.v1.DividendAction.cash_amount)
  return _internal_cash_amount();
}
inline void DividendAction::unsafe_arena_set_allocated_cash_amount(
    ::ampy::common::v1::Money* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cash_amount_);
  }
  _impl_.cash_amount_ = reinterpret_cast<::ampy::common::v1::Money*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.corporate_actions.v1.DividendAction.cash_amount)
}
inline ::ampy::common::v1::Money* PROTOBUF_NULLABLE DividendAction::release_cash_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::ampy::common::v1::Money* released = _impl_.cash_amount_;
  _impl_.cash_amount_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::Money* PROTOBUF_NULLABLE DividendAction::unsafe_arena_release_cash_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.corporate_actions.v1.DividendAction.cash_amount)

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::ampy::common::v1::Money* temp = _impl_.cash_amount_;
  _impl_.cash_amount_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::Money* PROTOBUF_NONNULL DividendAction::_internal_mutable_cash_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cash_amount_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::Money>(GetArena());
    _impl_.cash_amount_ = reinterpret_cast<::ampy::common::v1::Money*>(p);
  }
  return _impl_.cash_amount_;
}
inline ::ampy::common::v1::Money* PROTOBUF_NONNULL DividendAction::mutable_cash_amount()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002U;
  ::ampy::common::v1::Money* _msg = _internal_mutable_cash_amount();
  // @@protoc_insertion_point(field_mutable:ampy.corporate_actions.v1.DividendAction.cash_amount)
  return _msg;
}
inline void DividendAction::set_allocated_cash_amount(::ampy::common::v1::Money* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cash_amount_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }

  _impl_.cash_amount_ = reinterpret_cast<::ampy::common::v1::Money*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.corporate_actions.v1.DividendAction.cash_amount)
}

// .google.protobuf.Timestamp ex_date = 3 [json_name = "exDate"];
inline bool DividendAction::has_ex_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ex_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& DividendAction::_internal_ex_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.ex_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& DividendAction::ex_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.corporate_actions.v1.DividendAction.ex_date)
  return _internal_ex_date();
}
inline void DividendAction::unsafe_arena_set_allocated_ex_date(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ex_date_);
  }
  _impl_.ex_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.corporate_actions.v1.DividendAction.ex_date)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE DividendAction::release_ex_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004U;
  ::google::protobuf::Timestamp* released = _impl_.ex_date_;
  _impl_.ex_date_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE DividendAction::unsafe_arena_release_ex_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.corporate_actions.v1.DividendAction.ex_date)

  _impl_._has_bits_[0] &= ~0x00000004U;
  ::google::protobuf::Timestamp* temp = _impl_.ex_date_;
  _impl_.ex_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL DividendAction::_internal_mutable_ex_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ex_date_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.ex_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.ex_date_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL DividendAction::mutable_ex_date()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004U;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_ex_date();
  // @@protoc_insertion_point(field_mutable:ampy.corporate_actions.v1.DividendAction.ex_date)
  return _msg;
}
inline void DividendAction::set_allocated_ex_date(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ex_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }

  _impl_.ex_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.corporate_actions.v1.DividendAction.ex_date)
}

// .google.protobuf.Timestamp pay_date = 4 [json_name = "payDate"];
inline bool DividendAction::has_pay_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pay_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& DividendAction::_internal_pay_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.pay_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& DividendAction::pay_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.corporate_actions.v1.DividendAction.pay_date)
  return _internal_pay_date();
}
inline void DividendAction::unsafe_arena_set_allocated_pay_date(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pay_date_);
  }
  _impl_.pay_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.corporate_actions.v1.DividendAction.pay_date)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE DividendAction::release_pay_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008U;
  ::google::protobuf::Timestamp* released = _impl_.pay_date_;
  _impl_.pay_date_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE DividendAction::unsafe_arena_release_pay_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.corporate_actions.v1.DividendAction.pay_date)

  _impl_._has_bits_[0] &= ~0x00000008U;
  ::google::protobuf::Timestamp* temp = _impl_.pay_date_;
  _impl_.pay_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL DividendAction::_internal_mutable_pay_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pay_date_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.pay_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.pay_date_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL DividendAction::mutable_pay_date()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008U;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_pay_date();
  // @@protoc_insertion_point(field_mutable:ampy.corporate_actions.v1.DividendAction.pay_date)
  return _msg;
}
inline void DividendAction::set_allocated_pay_date(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pay_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008U;
  }

  _impl_.pay_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.corporate_actions.v1.DividendAction.pay_date)
}

// .ampy.common.v1.Meta meta = 5 [json_name = "meta"];
inline bool DividendAction::has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline const ::ampy::common::v1::Meta& DividendAction::_internal_meta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ampy::common::v1::Meta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::ampy::common::v1::Meta&>(::ampy::common::v1::_Meta_default_instance_);
}
inline const ::ampy::common::v1::Meta& DividendAction::meta() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.corporate_actions.v1.DividendAction.meta)
  return _internal_meta();
}
inline void DividendAction::unsafe_arena_set_allocated_meta(
    ::ampy::common::v1::Meta* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.corporate_actions.v1.DividendAction.meta)
}
inline ::ampy::common::v1::Meta* PROTOBUF_NULLABLE DividendAction::release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010U;
  ::ampy::common::v1::Meta* released = _impl_.meta_;
  _impl_.meta_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NULLABLE DividendAction::unsafe_arena_release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ampy.corporate_actions.v1.DividendAction.meta)

  _impl_._has_bits_[0] &= ~0x00000010U;
  ::ampy::common::v1::Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NONNULL DividendAction::_internal_mutable_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ampy::common::v1::Meta>(GetArena());
    _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(p);
  }
  return _impl_.meta_;
}
inline ::ampy::common::v1::Meta* PROTOBUF_NONNULL DividendAction::mutable_meta()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010U;
  ::ampy::common::v1::Meta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:ampy.corporate_actions.v1.DividendAction.meta)
  return _msg;
}
inline void DividendAction::set_allocated_meta(::ampy::common::v1::Meta* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010U;
  }

  _impl_.meta_ = reinterpret_cast<::ampy::common::v1::Meta*>(value);
  // @@protoc_insertion_point(field_set_allocated:ampy.corporate_actions.v1.DividendAction.meta)
}

// -------------------------------------------------------------------

// CorporateAction

// .ampy.corporate_actions.v1.SplitAction split = 1 [json_name = "split"];
inline bool CorporateAction::has_split() const {
  return action_case() == kSplit;
}
inline bool CorporateAction::_internal_has_split() const {
  return action_case() == kSplit;
}
inline void CorporateAction::set_has_split() {
  _impl_._oneof_case_[0] = kSplit;
}
inline void CorporateAction::clear_split() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (action_case() == kSplit) {
    if (GetArena() == nullptr) {
      delete _impl_.action_.split_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.split_);
    }
    clear_has_action();
  }
}
inline ::ampy::corporate_actions::v1::SplitAction* PROTOBUF_NULLABLE CorporateAction::release_split() {
  // @@protoc_insertion_point(field_release:ampy.corporate_actions.v1.CorporateAction.split)
  if (action_case() == kSplit) {
    clear_has_action();
    auto* temp = _impl_.action_.split_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_.split_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ampy::corporate_actions::v1::SplitAction& CorporateAction::_internal_split() const {
  return action_case() == kSplit ? *_impl_.action_.split_ : reinterpret_cast<::ampy::corporate_actions::v1::SplitAction&>(::ampy::corporate_actions::v1::_SplitAction_default_instance_);
}
inline const ::ampy::corporate_actions::v1::SplitAction& CorporateAction::split() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.corporate_actions.v1.CorporateAction.split)
  return _internal_split();
}
inline ::ampy::corporate_actions::v1::SplitAction* PROTOBUF_NULLABLE CorporateAction::unsafe_arena_release_split() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ampy.corporate_actions.v1.CorporateAction.split)
  if (action_case() == kSplit) {
    clear_has_action();
    auto* temp = _impl_.action_.split_;
    _impl_.action_.split_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CorporateAction::unsafe_arena_set_allocated_split(
    ::ampy::corporate_actions::v1::SplitAction* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action();
  if (value) {
    set_has_split();
    _impl_.action_.split_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.corporate_actions.v1.CorporateAction.split)
}
inline ::ampy::corporate_actions::v1::SplitAction* PROTOBUF_NONNULL CorporateAction::_internal_mutable_split() {
  if (action_case() != kSplit) {
    clear_action();
    set_has_split();
    _impl_.action_.split_ = 
        ::google::protobuf::Message::DefaultConstruct<::ampy::corporate_actions::v1::SplitAction>(GetArena());
  }
  return _impl_.action_.split_;
}
inline ::ampy::corporate_actions::v1::SplitAction* PROTOBUF_NONNULL CorporateAction::mutable_split()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ampy::corporate_actions::v1::SplitAction* _msg = _internal_mutable_split();
  // @@protoc_insertion_point(field_mutable:ampy.corporate_actions.v1.CorporateAction.split)
  return _msg;
}

// .ampy.corporate_actions.v1.DividendAction dividend = 2 [json_name = "dividend"];
inline bool CorporateAction::has_dividend() const {
  return action_case() == kDividend;
}
inline bool CorporateAction::_internal_has_dividend() const {
  return action_case() == kDividend;
}
inline void CorporateAction::set_has_dividend() {
  _impl_._oneof_case_[0] = kDividend;
}
inline void CorporateAction::clear_dividend() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (action_case() == kDividend) {
    if (GetArena() == nullptr) {
      delete _impl_.action_.dividend_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.dividend_);
    }
    clear_has_action();
  }
}
inline ::ampy::corporate_actions::v1::DividendAction* PROTOBUF_NULLABLE CorporateAction::release_dividend() {
  // @@protoc_insertion_point(field_release:ampy.corporate_actions.v1.CorporateAction.dividend)
  if (action_case() == kDividend) {
    clear_has_action();
    auto* temp = _impl_.action_.dividend_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_.dividend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ampy::corporate_actions::v1::DividendAction& CorporateAction::_internal_dividend() const {
  return action_case() == kDividend ? *_impl_.action_.dividend_ : reinterpret_cast<::ampy::corporate_actions::v1::DividendAction&>(::ampy::corporate_actions::v1::_DividendAction_default_instance_);
}
inline const ::ampy::corporate_actions::v1::DividendAction& CorporateAction::dividend() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.corporate_actions.v1.CorporateAction.dividend)
  return _internal_dividend();
}
inline ::ampy::corporate_actions::v1::DividendAction* PROTOBUF_NULLABLE CorporateAction::unsafe_arena_release_dividend() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ampy.corporate_actions.v1.CorporateAction.dividend)
  if (action_case() == kDividend) {
    clear_has_action();
    auto* temp = _impl_.action_.dividend_;
    _impl_.action_.dividend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CorporateAction::unsafe_arena_set_allocated_dividend(
    ::ampy::corporate_actions::v1::DividendAction* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action();
  if (value) {
    set_has_dividend();
    _impl_.action_.dividend_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ampy.corporate_actions.v1.CorporateAction.dividend)
}
inline ::ampy::corporate_actions::v1::DividendAction* PROTOBUF_NONNULL CorporateAction::_internal_mutable_dividend() {
  if (action_case() != kDividend) {
    clear_action();
    set_has_dividend();
    _impl_.action_.dividend_ = 
        ::google::protobuf::Message::DefaultConstruct<::ampy::corporate_actions::v1::DividendAction>(GetArena());
  }
  return _impl_.action_.dividend_;
}
inline ::ampy::corporate_actions::v1::DividendAction* PROTOBUF_NONNULL CorporateAction::mutable_dividend()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ampy::corporate_actions::v1::DividendAction* _msg = _internal_mutable_dividend();
  // @@protoc_insertion_point(field_mutable:ampy.corporate_actions.v1.CorporateAction.dividend)
  return _msg;
}

inline bool CorporateAction::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void CorporateAction::clear_has_action() {
  _impl_._oneof_case_[0] = ACTION_NOT_SET;
}
inline CorporateAction::ActionCase CorporateAction::action_case() const {
  return CorporateAction::ActionCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CorporateActionBatch

// repeated .ampy.corporate_actions.v1.CorporateAction actions = 1 [json_name = "actions"];
inline int CorporateActionBatch::_internal_actions_size() const {
  return _internal_actions().size();
}
inline int CorporateActionBatch::actions_size() const {
  return _internal_actions_size();
}
inline void CorporateActionBatch::clear_actions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.actions_.Clear();
}
inline ::ampy::corporate_actions::v1::CorporateAction* PROTOBUF_NONNULL CorporateActionBatch::mutable_actions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ampy.corporate_actions.v1.CorporateActionBatch.actions)
  return _internal_mutable_actions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ampy::corporate_actions::v1::CorporateAction>* PROTOBUF_NONNULL CorporateActionBatch::mutable_actions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ampy.corporate_actions.v1.CorporateActionBatch.actions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_actions();
}
inline const ::ampy::corporate_actions::v1::CorporateAction& CorporateActionBatch::actions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ampy.corporate_actions.v1.CorporateActionBatch.actions)
  return _internal_actions().Get(index);
}
inline ::ampy::corporate_actions::v1::CorporateAction* PROTOBUF_NONNULL CorporateActionBatch::add_actions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ampy::corporate_actions::v1::CorporateAction* _add = _internal_mutable_actions()->Add();
  // @@protoc_insertion_point(field_add:ampy.corporate_actions.v1.CorporateActionBatch.actions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ampy::corporate_actions::v1::CorporateAction>& CorporateActionBatch::actions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ampy.corporate_actions.v1.CorporateActionBatch.actions)
  return _internal_actions();
}
inline const ::google::protobuf::RepeatedPtrField<::ampy::corporate_actions::v1::CorporateAction>&
CorporateActionBatch::_internal_actions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.actions_;
}
inline ::google::protobuf::RepeatedPtrField<::ampy::corporate_actions::v1::CorporateAction>* PROTOBUF_NONNULL
CorporateActionBatch::_internal_mutable_actions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.actions_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace corporate_actions
}  // namespace ampy


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto_2epb_2eh
