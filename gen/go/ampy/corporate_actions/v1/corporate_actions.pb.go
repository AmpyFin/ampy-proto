// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: ampy/corporate_actions/v1/corporate_actions.proto

package corporate_actionsv1

import (
	v1 "github.com/AmpyFin/ampy-proto/v2/gen/go/ampy/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SplitAction struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Security         *v1.SecurityId         `protobuf:"bytes,1,opt,name=security,proto3" json:"security,omitempty"`
	RatioNumerator   int32                  `protobuf:"varint,2,opt,name=ratio_numerator,json=ratioNumerator,proto3" json:"ratio_numerator,omitempty"`
	RatioDenominator int32                  `protobuf:"varint,3,opt,name=ratio_denominator,json=ratioDenominator,proto3" json:"ratio_denominator,omitempty"`
	ExDate           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ex_date,json=exDate,proto3" json:"ex_date,omitempty"`
	Meta             *v1.Meta               `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SplitAction) Reset() {
	*x = SplitAction{}
	mi := &file_ampy_corporate_actions_v1_corporate_actions_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitAction) ProtoMessage() {}

func (x *SplitAction) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_corporate_actions_v1_corporate_actions_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitAction.ProtoReflect.Descriptor instead.
func (*SplitAction) Descriptor() ([]byte, []int) {
	return file_ampy_corporate_actions_v1_corporate_actions_proto_rawDescGZIP(), []int{0}
}

func (x *SplitAction) GetSecurity() *v1.SecurityId {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *SplitAction) GetRatioNumerator() int32 {
	if x != nil {
		return x.RatioNumerator
	}
	return 0
}

func (x *SplitAction) GetRatioDenominator() int32 {
	if x != nil {
		return x.RatioDenominator
	}
	return 0
}

func (x *SplitAction) GetExDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExDate
	}
	return nil
}

func (x *SplitAction) GetMeta() *v1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type DividendAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Security      *v1.SecurityId         `protobuf:"bytes,1,opt,name=security,proto3" json:"security,omitempty"`
	CashAmount    *v1.Money              `protobuf:"bytes,2,opt,name=cash_amount,json=cashAmount,proto3" json:"cash_amount,omitempty"`
	ExDate        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ex_date,json=exDate,proto3" json:"ex_date,omitempty"`
	PayDate       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=pay_date,json=payDate,proto3" json:"pay_date,omitempty"`
	Meta          *v1.Meta               `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DividendAction) Reset() {
	*x = DividendAction{}
	mi := &file_ampy_corporate_actions_v1_corporate_actions_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DividendAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DividendAction) ProtoMessage() {}

func (x *DividendAction) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_corporate_actions_v1_corporate_actions_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DividendAction.ProtoReflect.Descriptor instead.
func (*DividendAction) Descriptor() ([]byte, []int) {
	return file_ampy_corporate_actions_v1_corporate_actions_proto_rawDescGZIP(), []int{1}
}

func (x *DividendAction) GetSecurity() *v1.SecurityId {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *DividendAction) GetCashAmount() *v1.Money {
	if x != nil {
		return x.CashAmount
	}
	return nil
}

func (x *DividendAction) GetExDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExDate
	}
	return nil
}

func (x *DividendAction) GetPayDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PayDate
	}
	return nil
}

func (x *DividendAction) GetMeta() *v1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type CorporateAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Action:
	//
	//	*CorporateAction_Split
	//	*CorporateAction_Dividend
	Action        isCorporateAction_Action `protobuf_oneof:"action"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CorporateAction) Reset() {
	*x = CorporateAction{}
	mi := &file_ampy_corporate_actions_v1_corporate_actions_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CorporateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorporateAction) ProtoMessage() {}

func (x *CorporateAction) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_corporate_actions_v1_corporate_actions_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorporateAction.ProtoReflect.Descriptor instead.
func (*CorporateAction) Descriptor() ([]byte, []int) {
	return file_ampy_corporate_actions_v1_corporate_actions_proto_rawDescGZIP(), []int{2}
}

func (x *CorporateAction) GetAction() isCorporateAction_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *CorporateAction) GetSplit() *SplitAction {
	if x != nil {
		if x, ok := x.Action.(*CorporateAction_Split); ok {
			return x.Split
		}
	}
	return nil
}

func (x *CorporateAction) GetDividend() *DividendAction {
	if x != nil {
		if x, ok := x.Action.(*CorporateAction_Dividend); ok {
			return x.Dividend
		}
	}
	return nil
}

type isCorporateAction_Action interface {
	isCorporateAction_Action()
}

type CorporateAction_Split struct {
	Split *SplitAction `protobuf:"bytes,1,opt,name=split,proto3,oneof"`
}

type CorporateAction_Dividend struct {
	Dividend *DividendAction `protobuf:"bytes,2,opt,name=dividend,proto3,oneof"`
}

func (*CorporateAction_Split) isCorporateAction_Action() {}

func (*CorporateAction_Dividend) isCorporateAction_Action() {}

type CorporateActionBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Actions       []*CorporateAction     `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CorporateActionBatch) Reset() {
	*x = CorporateActionBatch{}
	mi := &file_ampy_corporate_actions_v1_corporate_actions_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CorporateActionBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorporateActionBatch) ProtoMessage() {}

func (x *CorporateActionBatch) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_corporate_actions_v1_corporate_actions_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorporateActionBatch.ProtoReflect.Descriptor instead.
func (*CorporateActionBatch) Descriptor() ([]byte, []int) {
	return file_ampy_corporate_actions_v1_corporate_actions_proto_rawDescGZIP(), []int{3}
}

func (x *CorporateActionBatch) GetActions() []*CorporateAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

var File_ampy_corporate_actions_v1_corporate_actions_proto protoreflect.FileDescriptor

const file_ampy_corporate_actions_v1_corporate_actions_proto_rawDesc = "" +
	"\n" +
	"1ampy/corporate_actions/v1/corporate_actions.proto\x12\x19ampy.corporate_actions.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bampy/common/v1/common.proto\"\xfa\x01\n" +
	"\vSplitAction\x126\n" +
	"\bsecurity\x18\x01 \x01(\v2\x1a.ampy.common.v1.SecurityIdR\bsecurity\x12'\n" +
	"\x0fratio_numerator\x18\x02 \x01(\x05R\x0eratioNumerator\x12+\n" +
	"\x11ratio_denominator\x18\x03 \x01(\x05R\x10ratioDenominator\x123\n" +
	"\aex_date\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x06exDate\x12(\n" +
	"\x04meta\x18\x05 \x01(\v2\x14.ampy.common.v1.MetaR\x04meta\"\x96\x02\n" +
	"\x0eDividendAction\x126\n" +
	"\bsecurity\x18\x01 \x01(\v2\x1a.ampy.common.v1.SecurityIdR\bsecurity\x126\n" +
	"\vcash_amount\x18\x02 \x01(\v2\x15.ampy.common.v1.MoneyR\n" +
	"cashAmount\x123\n" +
	"\aex_date\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x06exDate\x125\n" +
	"\bpay_date\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\apayDate\x12(\n" +
	"\x04meta\x18\x05 \x01(\v2\x14.ampy.common.v1.MetaR\x04meta\"\xa4\x01\n" +
	"\x0fCorporateAction\x12>\n" +
	"\x05split\x18\x01 \x01(\v2&.ampy.corporate_actions.v1.SplitActionH\x00R\x05split\x12G\n" +
	"\bdividend\x18\x02 \x01(\v2).ampy.corporate_actions.v1.DividendActionH\x00R\bdividendB\b\n" +
	"\x06action\"\\\n" +
	"\x14CorporateActionBatch\x12D\n" +
	"\aactions\x18\x01 \x03(\v2*.ampy.corporate_actions.v1.CorporateActionR\aactionsB\x8c\x02\n" +
	"\x1dcom.ampy.corporate_actions.v1B\x15CorporateActionsProtoP\x01ZRgithub.com/AmpyFin/ampy-proto/v2/gen/go/ampy/corporate_actions/v1;corporate_actionsv1\xa2\x02\x03ACX\xaa\x02\x18Ampy.CorporateActions.V1\xca\x02\x18Ampy\\CorporateActions\\V1\xe2\x02$Ampy\\CorporateActions\\V1\\GPBMetadata\xea\x02\x1aAmpy::CorporateActions::V1b\x06proto3"

var (
	file_ampy_corporate_actions_v1_corporate_actions_proto_rawDescOnce sync.Once
	file_ampy_corporate_actions_v1_corporate_actions_proto_rawDescData []byte
)

func file_ampy_corporate_actions_v1_corporate_actions_proto_rawDescGZIP() []byte {
	file_ampy_corporate_actions_v1_corporate_actions_proto_rawDescOnce.Do(func() {
		file_ampy_corporate_actions_v1_corporate_actions_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ampy_corporate_actions_v1_corporate_actions_proto_rawDesc), len(file_ampy_corporate_actions_v1_corporate_actions_proto_rawDesc)))
	})
	return file_ampy_corporate_actions_v1_corporate_actions_proto_rawDescData
}

var file_ampy_corporate_actions_v1_corporate_actions_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ampy_corporate_actions_v1_corporate_actions_proto_goTypes = []any{
	(*SplitAction)(nil),           // 0: ampy.corporate_actions.v1.SplitAction
	(*DividendAction)(nil),        // 1: ampy.corporate_actions.v1.DividendAction
	(*CorporateAction)(nil),       // 2: ampy.corporate_actions.v1.CorporateAction
	(*CorporateActionBatch)(nil),  // 3: ampy.corporate_actions.v1.CorporateActionBatch
	(*v1.SecurityId)(nil),         // 4: ampy.common.v1.SecurityId
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(*v1.Meta)(nil),               // 6: ampy.common.v1.Meta
	(*v1.Money)(nil),              // 7: ampy.common.v1.Money
}
var file_ampy_corporate_actions_v1_corporate_actions_proto_depIdxs = []int32{
	4,  // 0: ampy.corporate_actions.v1.SplitAction.security:type_name -> ampy.common.v1.SecurityId
	5,  // 1: ampy.corporate_actions.v1.SplitAction.ex_date:type_name -> google.protobuf.Timestamp
	6,  // 2: ampy.corporate_actions.v1.SplitAction.meta:type_name -> ampy.common.v1.Meta
	4,  // 3: ampy.corporate_actions.v1.DividendAction.security:type_name -> ampy.common.v1.SecurityId
	7,  // 4: ampy.corporate_actions.v1.DividendAction.cash_amount:type_name -> ampy.common.v1.Money
	5,  // 5: ampy.corporate_actions.v1.DividendAction.ex_date:type_name -> google.protobuf.Timestamp
	5,  // 6: ampy.corporate_actions.v1.DividendAction.pay_date:type_name -> google.protobuf.Timestamp
	6,  // 7: ampy.corporate_actions.v1.DividendAction.meta:type_name -> ampy.common.v1.Meta
	0,  // 8: ampy.corporate_actions.v1.CorporateAction.split:type_name -> ampy.corporate_actions.v1.SplitAction
	1,  // 9: ampy.corporate_actions.v1.CorporateAction.dividend:type_name -> ampy.corporate_actions.v1.DividendAction
	2,  // 10: ampy.corporate_actions.v1.CorporateActionBatch.actions:type_name -> ampy.corporate_actions.v1.CorporateAction
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_ampy_corporate_actions_v1_corporate_actions_proto_init() }
func file_ampy_corporate_actions_v1_corporate_actions_proto_init() {
	if File_ampy_corporate_actions_v1_corporate_actions_proto != nil {
		return
	}
	file_ampy_corporate_actions_v1_corporate_actions_proto_msgTypes[2].OneofWrappers = []any{
		(*CorporateAction_Split)(nil),
		(*CorporateAction_Dividend)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ampy_corporate_actions_v1_corporate_actions_proto_rawDesc), len(file_ampy_corporate_actions_v1_corporate_actions_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ampy_corporate_actions_v1_corporate_actions_proto_goTypes,
		DependencyIndexes: file_ampy_corporate_actions_v1_corporate_actions_proto_depIdxs,
		MessageInfos:      file_ampy_corporate_actions_v1_corporate_actions_proto_msgTypes,
	}.Build()
	File_ampy_corporate_actions_v1_corporate_actions_proto = out.File
	file_ampy_corporate_actions_v1_corporate_actions_proto_goTypes = nil
	file_ampy_corporate_actions_v1_corporate_actions_proto_depIdxs = nil
}
