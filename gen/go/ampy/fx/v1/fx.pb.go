// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: ampy/fx/v1/fx.proto

package fxv1

import (
	v1 "github.com/AmpyFin/ampy-proto/v2/gen/go/ampy/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base  string `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`   // e.g., "USD"
	Quote string `protobuf:"bytes,2,opt,name=quote,proto3" json:"quote,omitempty"` // e.g., "JPY"
}

func (x *Pair) Reset() {
	*x = Pair{}
	mi := &file_ampy_fx_v1_fx_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_fx_v1_fx_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_ampy_fx_v1_fx_proto_rawDescGZIP(), []int{0}
}

func (x *Pair) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *Pair) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

type FxRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair *Pair                  `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Bid  *v1.Decimal            `protobuf:"bytes,2,opt,name=bid,proto3" json:"bid,omitempty"`
	Ask  *v1.Decimal            `protobuf:"bytes,3,opt,name=ask,proto3" json:"ask,omitempty"`
	Mid  *v1.Decimal            `protobuf:"bytes,4,opt,name=mid,proto3" json:"mid,omitempty"`
	AsOf *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=as_of,json=asOf,proto3" json:"as_of,omitempty"`
	Meta *v1.Meta               `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *FxRate) Reset() {
	*x = FxRate{}
	mi := &file_ampy_fx_v1_fx_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FxRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxRate) ProtoMessage() {}

func (x *FxRate) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_fx_v1_fx_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxRate.ProtoReflect.Descriptor instead.
func (*FxRate) Descriptor() ([]byte, []int) {
	return file_ampy_fx_v1_fx_proto_rawDescGZIP(), []int{1}
}

func (x *FxRate) GetPair() *Pair {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *FxRate) GetBid() *v1.Decimal {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *FxRate) GetAsk() *v1.Decimal {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *FxRate) GetMid() *v1.Decimal {
	if x != nil {
		return x.Mid
	}
	return nil
}

func (x *FxRate) GetAsOf() *timestamppb.Timestamp {
	if x != nil {
		return x.AsOf
	}
	return nil
}

func (x *FxRate) GetMeta() *v1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type FxRateBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rates []*FxRate `protobuf:"bytes,1,rep,name=rates,proto3" json:"rates,omitempty"`
}

func (x *FxRateBatch) Reset() {
	*x = FxRateBatch{}
	mi := &file_ampy_fx_v1_fx_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FxRateBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxRateBatch) ProtoMessage() {}

func (x *FxRateBatch) ProtoReflect() protoreflect.Message {
	mi := &file_ampy_fx_v1_fx_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxRateBatch.ProtoReflect.Descriptor instead.
func (*FxRateBatch) Descriptor() ([]byte, []int) {
	return file_ampy_fx_v1_fx_proto_rawDescGZIP(), []int{2}
}

func (x *FxRateBatch) GetRates() []*FxRate {
	if x != nil {
		return x.Rates
	}
	return nil
}

var File_ampy_fx_v1_fx_proto protoreflect.FileDescriptor

var file_ampy_fx_v1_fx_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x6d, 0x70, 0x79, 0x2f, 0x66, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x78, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x66, 0x78, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x6d, 0x70, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x30, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x22, 0x8a, 0x02, 0x0a, 0x06, 0x46, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x04,
	0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x6d, 0x70,
	0x79, 0x2e, 0x66, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61,
	0x69, 0x72, 0x12, 0x29, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x03, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6d, 0x70,
	0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x03,
	0x6d, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x61, 0x73, 0x5f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x61, 0x73, 0x4f, 0x66, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6d, 0x70, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x37,
	0x0a, 0x0b, 0x46, 0x78, 0x52, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a,
	0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x6d, 0x70, 0x79, 0x2e, 0x66, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x78, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x42, 0x9c, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6d, 0x70, 0x79, 0x2e, 0x66, 0x78, 0x2e, 0x76, 0x31, 0x42, 0x07, 0x46, 0x78, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x41, 0x6d, 0x70, 0x79, 0x46, 0x69, 0x6e, 0x2f, 0x61, 0x6d, 0x70, 0x79, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x61,
	0x6d, 0x70, 0x79, 0x2f, 0x66, 0x78, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x78, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x41, 0x46, 0x58, 0xaa, 0x02, 0x0a, 0x41, 0x6d, 0x70, 0x79, 0x2e, 0x46, 0x78, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x0a, 0x41, 0x6d, 0x70, 0x79, 0x5c, 0x46, 0x78, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x16, 0x41, 0x6d, 0x70, 0x79, 0x5c, 0x46, 0x78, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x41, 0x6d, 0x70, 0x79, 0x3a, 0x3a,
	0x46, 0x78, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ampy_fx_v1_fx_proto_rawDescOnce sync.Once
	file_ampy_fx_v1_fx_proto_rawDescData = file_ampy_fx_v1_fx_proto_rawDesc
)

func file_ampy_fx_v1_fx_proto_rawDescGZIP() []byte {
	file_ampy_fx_v1_fx_proto_rawDescOnce.Do(func() {
		file_ampy_fx_v1_fx_proto_rawDescData = protoimpl.X.CompressGZIP(file_ampy_fx_v1_fx_proto_rawDescData)
	})
	return file_ampy_fx_v1_fx_proto_rawDescData
}

var file_ampy_fx_v1_fx_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ampy_fx_v1_fx_proto_goTypes = []any{
	(*Pair)(nil),                  // 0: ampy.fx.v1.Pair
	(*FxRate)(nil),                // 1: ampy.fx.v1.FxRate
	(*FxRateBatch)(nil),           // 2: ampy.fx.v1.FxRateBatch
	(*v1.Decimal)(nil),            // 3: ampy.common.v1.Decimal
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*v1.Meta)(nil),               // 5: ampy.common.v1.Meta
}
var file_ampy_fx_v1_fx_proto_depIdxs = []int32{
	0, // 0: ampy.fx.v1.FxRate.pair:type_name -> ampy.fx.v1.Pair
	3, // 1: ampy.fx.v1.FxRate.bid:type_name -> ampy.common.v1.Decimal
	3, // 2: ampy.fx.v1.FxRate.ask:type_name -> ampy.common.v1.Decimal
	3, // 3: ampy.fx.v1.FxRate.mid:type_name -> ampy.common.v1.Decimal
	4, // 4: ampy.fx.v1.FxRate.as_of:type_name -> google.protobuf.Timestamp
	5, // 5: ampy.fx.v1.FxRate.meta:type_name -> ampy.common.v1.Meta
	1, // 6: ampy.fx.v1.FxRateBatch.rates:type_name -> ampy.fx.v1.FxRate
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_ampy_fx_v1_fx_proto_init() }
func file_ampy_fx_v1_fx_proto_init() {
	if File_ampy_fx_v1_fx_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ampy_fx_v1_fx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ampy_fx_v1_fx_proto_goTypes,
		DependencyIndexes: file_ampy_fx_v1_fx_proto_depIdxs,
		MessageInfos:      file_ampy_fx_v1_fx_proto_msgTypes,
	}.Build()
	File_ampy_fx_v1_fx_proto = out.File
	file_ampy_fx_v1_fx_proto_rawDesc = nil
	file_ampy_fx_v1_fx_proto_goTypes = nil
	file_ampy_fx_v1_fx_proto_depIdxs = nil
}
