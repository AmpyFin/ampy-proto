// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ampy/corporate_actions/v1/corporate_actions.proto
// Protobuf C++ Version: 6.32.0

#include "ampy/corporate_actions/v1/corporate_actions.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ampy {
namespace corporate_actions {
namespace v1 {

inline constexpr SplitAction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        security_{nullptr},
        ex_date_{nullptr},
        meta_{nullptr},
        ratio_numerator_{0},
        ratio_denominator_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SplitAction::SplitAction(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SplitAction_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SplitActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SplitActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SplitActionDefaultTypeInternal() {}
  union {
    SplitAction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SplitActionDefaultTypeInternal _SplitAction_default_instance_;

inline constexpr DividendAction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        security_{nullptr},
        cash_amount_{nullptr},
        ex_date_{nullptr},
        pay_date_{nullptr},
        meta_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DividendAction::DividendAction(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DividendAction_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DividendActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DividendActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DividendActionDefaultTypeInternal() {}
  union {
    DividendAction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DividendActionDefaultTypeInternal _DividendAction_default_instance_;

inline constexpr CorporateAction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : action_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR CorporateAction::CorporateAction(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CorporateAction_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CorporateActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CorporateActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CorporateActionDefaultTypeInternal() {}
  union {
    CorporateAction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CorporateActionDefaultTypeInternal _CorporateAction_default_instance_;

inline constexpr CorporateActionBatch::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : actions_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CorporateActionBatch::CorporateActionBatch(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CorporateActionBatch_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CorporateActionBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CorporateActionBatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CorporateActionBatchDefaultTypeInternal() {}
  union {
    CorporateActionBatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CorporateActionBatchDefaultTypeInternal _CorporateActionBatch_default_instance_;
}  // namespace v1
}  // namespace corporate_actions
}  // namespace ampy
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto = nullptr;
const ::uint32_t
    TableStruct_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::SplitAction, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::SplitAction, _impl_.security_),
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::SplitAction, _impl_.ratio_numerator_),
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::SplitAction, _impl_.ratio_denominator_),
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::SplitAction, _impl_.ex_date_),
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::SplitAction, _impl_.meta_),
        0,
        3,
        4,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::DividendAction, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::DividendAction, _impl_.security_),
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::DividendAction, _impl_.cash_amount_),
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::DividendAction, _impl_.ex_date_),
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::DividendAction, _impl_.pay_date_),
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::DividendAction, _impl_.meta_),
        0,
        1,
        2,
        3,
        4,
        0x004, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::CorporateAction, _impl_._oneof_case_[0]),
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::CorporateAction, _impl_.action_),
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::CorporateAction, _impl_.action_),
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::CorporateAction, _impl_.action_),
        0x000, // bitmap
        PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::CorporateActionBatch, _impl_.actions_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::ampy::corporate_actions::v1::SplitAction)},
        {13, sizeof(::ampy::corporate_actions::v1::DividendAction)},
        {26, sizeof(::ampy::corporate_actions::v1::CorporateAction)},
        {31, sizeof(::ampy::corporate_actions::v1::CorporateActionBatch)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::ampy::corporate_actions::v1::_SplitAction_default_instance_._instance,
    &::ampy::corporate_actions::v1::_DividendAction_default_instance_._instance,
    &::ampy::corporate_actions::v1::_CorporateAction_default_instance_._instance,
    &::ampy::corporate_actions::v1::_CorporateActionBatch_default_instance_._instance,
};
const char descriptor_table_protodef_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n1ampy/corporate_actions/v1/corporate_ac"
    "tions.proto\022\031ampy.corporate_actions.v1\032\037"
    "google/protobuf/timestamp.proto\032\033ampy/co"
    "mmon/v1/common.proto\"\372\001\n\013SplitAction\0226\n\010"
    "security\030\001 \001(\0132\032.ampy.common.v1.Security"
    "IdR\010security\022\'\n\017ratio_numerator\030\002 \001(\005R\016r"
    "atioNumerator\022+\n\021ratio_denominator\030\003 \001(\005"
    "R\020ratioDenominator\0223\n\007ex_date\030\004 \001(\0132\032.go"
    "ogle.protobuf.TimestampR\006exDate\022(\n\004meta\030"
    "\005 \001(\0132\024.ampy.common.v1.MetaR\004meta\"\226\002\n\016Di"
    "videndAction\0226\n\010security\030\001 \001(\0132\032.ampy.co"
    "mmon.v1.SecurityIdR\010security\0226\n\013cash_amo"
    "unt\030\002 \001(\0132\025.ampy.common.v1.MoneyR\ncashAm"
    "ount\0223\n\007ex_date\030\003 \001(\0132\032.google.protobuf."
    "TimestampR\006exDate\0225\n\010pay_date\030\004 \001(\0132\032.go"
    "ogle.protobuf.TimestampR\007payDate\022(\n\004meta"
    "\030\005 \001(\0132\024.ampy.common.v1.MetaR\004meta\"\244\001\n\017C"
    "orporateAction\022>\n\005split\030\001 \001(\0132&.ampy.cor"
    "porate_actions.v1.SplitActionH\000R\005split\022G"
    "\n\010dividend\030\002 \001(\0132).ampy.corporate_action"
    "s.v1.DividendActionH\000R\010dividendB\010\n\006actio"
    "n\"\\\n\024CorporateActionBatch\022D\n\007actions\030\001 \003"
    "(\0132*.ampy.corporate_actions.v1.Corporate"
    "ActionR\007actionsB\220\002\n\035com.ampy.corporate_a"
    "ctions.v1B\025CorporateActionsProtoP\001ZVgith"
    "ub.com/yeonholee50/ampy-proto/gen/go/amp"
    "y/corporate_actions/v1;corporate_actions"
    "v1\242\002\003ACX\252\002\030Ampy.CorporateActions.V1\312\002\030Am"
    "py\\CorporateActions\\V1\342\002$Ampy\\CorporateA"
    "ctions\\V1\\GPBMetadata\352\002\032Ampy::CorporateA"
    "ctions::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto_deps[2] = {
        &::descriptor_table_ampy_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto = {
    false,
    false,
    1218,
    descriptor_table_protodef_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto,
    "ampy/corporate_actions/v1/corporate_actions.proto",
    &descriptor_table_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto_once,
    descriptor_table_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto::offsets,
    file_level_enum_descriptors_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto,
    file_level_service_descriptors_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto,
};
namespace ampy {
namespace corporate_actions {
namespace v1 {
// ===================================================================

class SplitAction::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SplitAction>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SplitAction, _impl_._has_bits_);
};

void SplitAction::clear_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.security_ != nullptr) _impl_.security_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
void SplitAction::clear_ex_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ex_date_ != nullptr) _impl_.ex_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
void SplitAction::clear_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
SplitAction::SplitAction(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SplitAction_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.corporate_actions.v1.SplitAction)
}
PROTOBUF_NDEBUG_INLINE SplitAction::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::corporate_actions::v1::SplitAction& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SplitAction::SplitAction(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SplitAction& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SplitAction_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SplitAction* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.security_ = ((cached_has_bits & 0x00000001U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.security_)
                : nullptr;
  _impl_.ex_date_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ex_date_)
                : nullptr;
  _impl_.meta_ = ((cached_has_bits & 0x00000004U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ratio_numerator_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, ratio_numerator_),
           offsetof(Impl_, ratio_denominator_) -
               offsetof(Impl_, ratio_numerator_) +
               sizeof(Impl_::ratio_denominator_));

  // @@protoc_insertion_point(copy_constructor:ampy.corporate_actions.v1.SplitAction)
}
PROTOBUF_NDEBUG_INLINE SplitAction::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SplitAction::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, security_),
           0,
           offsetof(Impl_, ratio_denominator_) -
               offsetof(Impl_, security_) +
               sizeof(Impl_::ratio_denominator_));
}
SplitAction::~SplitAction() {
  // @@protoc_insertion_point(destructor:ampy.corporate_actions.v1.SplitAction)
  SharedDtor(*this);
}
inline void SplitAction::SharedDtor(MessageLite& self) {
  SplitAction& this_ = static_cast<SplitAction&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.security_;
  delete this_._impl_.ex_date_;
  delete this_._impl_.meta_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SplitAction::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SplitAction(arena);
}
constexpr auto SplitAction::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SplitAction),
                                            alignof(SplitAction));
}
constexpr auto SplitAction::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SplitAction_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SplitAction::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SplitAction>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SplitAction::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SplitAction>(), &SplitAction::ByteSizeLong,
              &SplitAction::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SplitAction, _impl_._cached_size_),
          false,
      },
      &SplitAction::kDescriptorMethods,
      &descriptor_table_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SplitAction_class_data_ =
        SplitAction::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SplitAction::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SplitAction_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SplitAction_class_data_.tc_table);
  return SplitAction_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2>
SplitAction::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SplitAction, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SplitAction_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::corporate_actions::v1::SplitAction>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SplitAction, _impl_.security_)}},
    // int32 ratio_numerator = 2 [json_name = "ratioNumerator"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SplitAction, _impl_.ratio_numerator_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(SplitAction, _impl_.ratio_numerator_)}},
    // int32 ratio_denominator = 3 [json_name = "ratioDenominator"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SplitAction, _impl_.ratio_denominator_), 4>(),
     {24, 4, 0, PROTOBUF_FIELD_OFFSET(SplitAction, _impl_.ratio_denominator_)}},
    // .google.protobuf.Timestamp ex_date = 4 [json_name = "exDate"];
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(SplitAction, _impl_.ex_date_)}},
    // .ampy.common.v1.Meta meta = 5 [json_name = "meta"];
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(SplitAction, _impl_.meta_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    {PROTOBUF_FIELD_OFFSET(SplitAction, _impl_.security_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 ratio_numerator = 2 [json_name = "ratioNumerator"];
    {PROTOBUF_FIELD_OFFSET(SplitAction, _impl_.ratio_numerator_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 ratio_denominator = 3 [json_name = "ratioDenominator"];
    {PROTOBUF_FIELD_OFFSET(SplitAction, _impl_.ratio_denominator_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .google.protobuf.Timestamp ex_date = 4 [json_name = "exDate"];
    {PROTOBUF_FIELD_OFFSET(SplitAction, _impl_.ex_date_), _Internal::kHasBitsOffset + 1, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Meta meta = 5 [json_name = "meta"];
    {PROTOBUF_FIELD_OFFSET(SplitAction, _impl_.meta_), _Internal::kHasBitsOffset + 2, 2, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::common::v1::SecurityId>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Meta>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SplitAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.corporate_actions.v1.SplitAction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      ABSL_DCHECK(_impl_.security_ != nullptr);
      _impl_.security_->Clear();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.ex_date_ != nullptr);
      _impl_.ex_date_->Clear();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(_impl_.meta_ != nullptr);
      _impl_.meta_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000018U) != 0) {
    ::memset(&_impl_.ratio_numerator_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ratio_denominator_) -
        reinterpret_cast<char*>(&_impl_.ratio_numerator_)) + sizeof(_impl_.ratio_denominator_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SplitAction::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SplitAction& this_ = static_cast<const SplitAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SplitAction::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SplitAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.corporate_actions.v1.SplitAction)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
  if ((cached_has_bits & 0x00000001U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.security_, this_._impl_.security_->GetCachedSize(), target,
        stream);
  }

  // int32 ratio_numerator = 2 [json_name = "ratioNumerator"];
  if ((cached_has_bits & 0x00000008U) != 0) {
    if (this_._internal_ratio_numerator() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_ratio_numerator(), target);
    }
  }

  // int32 ratio_denominator = 3 [json_name = "ratioDenominator"];
  if ((cached_has_bits & 0x00000010U) != 0) {
    if (this_._internal_ratio_denominator() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_ratio_denominator(), target);
    }
  }

  // .google.protobuf.Timestamp ex_date = 4 [json_name = "exDate"];
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.ex_date_, this_._impl_.ex_date_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Meta meta = 5 [json_name = "meta"];
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.meta_, this_._impl_.meta_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.corporate_actions.v1.SplitAction)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SplitAction::ByteSizeLong(const MessageLite& base) {
  const SplitAction& this_ = static_cast<const SplitAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SplitAction::ByteSizeLong() const {
  const SplitAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.corporate_actions.v1.SplitAction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.security_);
    }
    // .google.protobuf.Timestamp ex_date = 4 [json_name = "exDate"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ex_date_);
    }
    // .ampy.common.v1.Meta meta = 5 [json_name = "meta"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.meta_);
    }
    // int32 ratio_numerator = 2 [json_name = "ratioNumerator"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_ratio_numerator() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_ratio_numerator());
      }
    }
    // int32 ratio_denominator = 3 [json_name = "ratioDenominator"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_ratio_denominator() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_ratio_denominator());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SplitAction::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SplitAction*>(&to_msg);
  auto& from = static_cast<const SplitAction&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.corporate_actions.v1.SplitAction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      ABSL_DCHECK(from._impl_.security_ != nullptr);
      if (_this->_impl_.security_ == nullptr) {
        _this->_impl_.security_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.security_);
      } else {
        _this->_impl_.security_->MergeFrom(*from._impl_.security_);
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.ex_date_ != nullptr);
      if (_this->_impl_.ex_date_ == nullptr) {
        _this->_impl_.ex_date_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ex_date_);
      } else {
        _this->_impl_.ex_date_->MergeFrom(*from._impl_.ex_date_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(from._impl_.meta_ != nullptr);
      if (_this->_impl_.meta_ == nullptr) {
        _this->_impl_.meta_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_);
      } else {
        _this->_impl_.meta_->MergeFrom(*from._impl_.meta_);
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_ratio_numerator() != 0) {
        _this->_impl_.ratio_numerator_ = from._impl_.ratio_numerator_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_ratio_denominator() != 0) {
        _this->_impl_.ratio_denominator_ = from._impl_.ratio_denominator_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SplitAction::CopyFrom(const SplitAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.corporate_actions.v1.SplitAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SplitAction::InternalSwap(SplitAction* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SplitAction, _impl_.ratio_denominator_)
      + sizeof(SplitAction::_impl_.ratio_denominator_)
      - PROTOBUF_FIELD_OFFSET(SplitAction, _impl_.security_)>(
          reinterpret_cast<char*>(&_impl_.security_),
          reinterpret_cast<char*>(&other->_impl_.security_));
}

::google::protobuf::Metadata SplitAction::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DividendAction::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<DividendAction>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DividendAction, _impl_._has_bits_);
};

void DividendAction::clear_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.security_ != nullptr) _impl_.security_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
void DividendAction::clear_cash_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cash_amount_ != nullptr) _impl_.cash_amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
void DividendAction::clear_ex_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ex_date_ != nullptr) _impl_.ex_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
void DividendAction::clear_pay_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pay_date_ != nullptr) _impl_.pay_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008U;
}
void DividendAction::clear_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010U;
}
DividendAction::DividendAction(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DividendAction_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.corporate_actions.v1.DividendAction)
}
PROTOBUF_NDEBUG_INLINE DividendAction::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::corporate_actions::v1::DividendAction& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DividendAction::DividendAction(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DividendAction& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DividendAction_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DividendAction* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.security_ = ((cached_has_bits & 0x00000001U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.security_)
                : nullptr;
  _impl_.cash_amount_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cash_amount_)
                : nullptr;
  _impl_.ex_date_ = ((cached_has_bits & 0x00000004U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ex_date_)
                : nullptr;
  _impl_.pay_date_ = ((cached_has_bits & 0x00000008U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.pay_date_)
                : nullptr;
  _impl_.meta_ = ((cached_has_bits & 0x00000010U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:ampy.corporate_actions.v1.DividendAction)
}
PROTOBUF_NDEBUG_INLINE DividendAction::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void DividendAction::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, security_),
           0,
           offsetof(Impl_, meta_) -
               offsetof(Impl_, security_) +
               sizeof(Impl_::meta_));
}
DividendAction::~DividendAction() {
  // @@protoc_insertion_point(destructor:ampy.corporate_actions.v1.DividendAction)
  SharedDtor(*this);
}
inline void DividendAction::SharedDtor(MessageLite& self) {
  DividendAction& this_ = static_cast<DividendAction&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.security_;
  delete this_._impl_.cash_amount_;
  delete this_._impl_.ex_date_;
  delete this_._impl_.pay_date_;
  delete this_._impl_.meta_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DividendAction::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DividendAction(arena);
}
constexpr auto DividendAction::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DividendAction),
                                            alignof(DividendAction));
}
constexpr auto DividendAction::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DividendAction_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DividendAction::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DividendAction>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DividendAction::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DividendAction>(), &DividendAction::ByteSizeLong,
              &DividendAction::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DividendAction, _impl_._cached_size_),
          false,
      },
      &DividendAction::kDescriptorMethods,
      &descriptor_table_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull DividendAction_class_data_ =
        DividendAction::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
DividendAction::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DividendAction_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DividendAction_class_data_.tc_table);
  return DividendAction_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 5, 0, 2>
DividendAction::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DividendAction, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    DividendAction_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::corporate_actions::v1::DividendAction>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DividendAction, _impl_.security_)}},
    // .ampy.common.v1.Money cash_amount = 2 [json_name = "cashAmount"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(DividendAction, _impl_.cash_amount_)}},
    // .google.protobuf.Timestamp ex_date = 3 [json_name = "exDate"];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(DividendAction, _impl_.ex_date_)}},
    // .google.protobuf.Timestamp pay_date = 4 [json_name = "payDate"];
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(DividendAction, _impl_.pay_date_)}},
    // .ampy.common.v1.Meta meta = 5 [json_name = "meta"];
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(DividendAction, _impl_.meta_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    {PROTOBUF_FIELD_OFFSET(DividendAction, _impl_.security_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Money cash_amount = 2 [json_name = "cashAmount"];
    {PROTOBUF_FIELD_OFFSET(DividendAction, _impl_.cash_amount_), _Internal::kHasBitsOffset + 1, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp ex_date = 3 [json_name = "exDate"];
    {PROTOBUF_FIELD_OFFSET(DividendAction, _impl_.ex_date_), _Internal::kHasBitsOffset + 2, 2, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp pay_date = 4 [json_name = "payDate"];
    {PROTOBUF_FIELD_OFFSET(DividendAction, _impl_.pay_date_), _Internal::kHasBitsOffset + 3, 3, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.common.v1.Meta meta = 5 [json_name = "meta"];
    {PROTOBUF_FIELD_OFFSET(DividendAction, _impl_.meta_), _Internal::kHasBitsOffset + 4, 4, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::common::v1::SecurityId>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Money>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::ampy::common::v1::Meta>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void DividendAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.corporate_actions.v1.DividendAction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      ABSL_DCHECK(_impl_.security_ != nullptr);
      _impl_.security_->Clear();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.cash_amount_ != nullptr);
      _impl_.cash_amount_->Clear();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(_impl_.ex_date_ != nullptr);
      _impl_.ex_date_->Clear();
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(_impl_.pay_date_ != nullptr);
      _impl_.pay_date_->Clear();
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      ABSL_DCHECK(_impl_.meta_ != nullptr);
      _impl_.meta_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DividendAction::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DividendAction& this_ = static_cast<const DividendAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DividendAction::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DividendAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.corporate_actions.v1.DividendAction)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
  if ((cached_has_bits & 0x00000001U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.security_, this_._impl_.security_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Money cash_amount = 2 [json_name = "cashAmount"];
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.cash_amount_, this_._impl_.cash_amount_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Timestamp ex_date = 3 [json_name = "exDate"];
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.ex_date_, this_._impl_.ex_date_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Timestamp pay_date = 4 [json_name = "payDate"];
  if ((cached_has_bits & 0x00000008U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.pay_date_, this_._impl_.pay_date_->GetCachedSize(), target,
        stream);
  }

  // .ampy.common.v1.Meta meta = 5 [json_name = "meta"];
  if ((cached_has_bits & 0x00000010U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.meta_, this_._impl_.meta_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.corporate_actions.v1.DividendAction)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DividendAction::ByteSizeLong(const MessageLite& base) {
  const DividendAction& this_ = static_cast<const DividendAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DividendAction::ByteSizeLong() const {
  const DividendAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.corporate_actions.v1.DividendAction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    // .ampy.common.v1.SecurityId security = 1 [json_name = "security"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.security_);
    }
    // .ampy.common.v1.Money cash_amount = 2 [json_name = "cashAmount"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cash_amount_);
    }
    // .google.protobuf.Timestamp ex_date = 3 [json_name = "exDate"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ex_date_);
    }
    // .google.protobuf.Timestamp pay_date = 4 [json_name = "payDate"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pay_date_);
    }
    // .ampy.common.v1.Meta meta = 5 [json_name = "meta"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.meta_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DividendAction::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DividendAction*>(&to_msg);
  auto& from = static_cast<const DividendAction&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.corporate_actions.v1.DividendAction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      ABSL_DCHECK(from._impl_.security_ != nullptr);
      if (_this->_impl_.security_ == nullptr) {
        _this->_impl_.security_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.security_);
      } else {
        _this->_impl_.security_->MergeFrom(*from._impl_.security_);
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.cash_amount_ != nullptr);
      if (_this->_impl_.cash_amount_ == nullptr) {
        _this->_impl_.cash_amount_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cash_amount_);
      } else {
        _this->_impl_.cash_amount_->MergeFrom(*from._impl_.cash_amount_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(from._impl_.ex_date_ != nullptr);
      if (_this->_impl_.ex_date_ == nullptr) {
        _this->_impl_.ex_date_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ex_date_);
      } else {
        _this->_impl_.ex_date_->MergeFrom(*from._impl_.ex_date_);
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(from._impl_.pay_date_ != nullptr);
      if (_this->_impl_.pay_date_ == nullptr) {
        _this->_impl_.pay_date_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.pay_date_);
      } else {
        _this->_impl_.pay_date_->MergeFrom(*from._impl_.pay_date_);
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      ABSL_DCHECK(from._impl_.meta_ != nullptr);
      if (_this->_impl_.meta_ == nullptr) {
        _this->_impl_.meta_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meta_);
      } else {
        _this->_impl_.meta_->MergeFrom(*from._impl_.meta_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DividendAction::CopyFrom(const DividendAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.corporate_actions.v1.DividendAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DividendAction::InternalSwap(DividendAction* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DividendAction, _impl_.meta_)
      + sizeof(DividendAction::_impl_.meta_)
      - PROTOBUF_FIELD_OFFSET(DividendAction, _impl_.security_)>(
          reinterpret_cast<char*>(&_impl_.security_),
          reinterpret_cast<char*>(&other->_impl_.security_));
}

::google::protobuf::Metadata DividendAction::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CorporateAction::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::ampy::corporate_actions::v1::CorporateAction, _impl_._oneof_case_);
};

void CorporateAction::set_allocated_split(::ampy::corporate_actions::v1::SplitAction* PROTOBUF_NULLABLE split) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (split) {
    ::google::protobuf::Arena* submessage_arena = split->GetArena();
    if (message_arena != submessage_arena) {
      split = ::google::protobuf::internal::GetOwnedMessage(message_arena, split, submessage_arena);
    }
    set_has_split();
    _impl_.action_.split_ = split;
  }
  // @@protoc_insertion_point(field_set_allocated:ampy.corporate_actions.v1.CorporateAction.split)
}
void CorporateAction::set_allocated_dividend(::ampy::corporate_actions::v1::DividendAction* PROTOBUF_NULLABLE dividend) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (dividend) {
    ::google::protobuf::Arena* submessage_arena = dividend->GetArena();
    if (message_arena != submessage_arena) {
      dividend = ::google::protobuf::internal::GetOwnedMessage(message_arena, dividend, submessage_arena);
    }
    set_has_dividend();
    _impl_.action_.dividend_ = dividend;
  }
  // @@protoc_insertion_point(field_set_allocated:ampy.corporate_actions.v1.CorporateAction.dividend)
}
CorporateAction::CorporateAction(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CorporateAction_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.corporate_actions.v1.CorporateAction)
}
PROTOBUF_NDEBUG_INLINE CorporateAction::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::corporate_actions::v1::CorporateAction& from_msg)
      : action_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

CorporateAction::CorporateAction(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CorporateAction& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CorporateAction_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CorporateAction* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (action_case()) {
    case ACTION_NOT_SET:
      break;
      case kSplit:
        _impl_.action_.split_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.action_.split_);
        break;
      case kDividend:
        _impl_.action_.dividend_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.action_.dividend_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:ampy.corporate_actions.v1.CorporateAction)
}
PROTOBUF_NDEBUG_INLINE CorporateAction::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : action_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void CorporateAction::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CorporateAction::~CorporateAction() {
  // @@protoc_insertion_point(destructor:ampy.corporate_actions.v1.CorporateAction)
  SharedDtor(*this);
}
inline void CorporateAction::SharedDtor(MessageLite& self) {
  CorporateAction& this_ = static_cast<CorporateAction&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_action()) {
    this_.clear_action();
  }
  this_._impl_.~Impl_();
}

void CorporateAction::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:ampy.corporate_actions.v1.CorporateAction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (action_case()) {
    case kSplit: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.split_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.split_);
      }
      break;
    }
    case kDividend: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.dividend_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.dividend_);
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ACTION_NOT_SET;
}


inline void* PROTOBUF_NONNULL CorporateAction::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CorporateAction(arena);
}
constexpr auto CorporateAction::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CorporateAction),
                                            alignof(CorporateAction));
}
constexpr auto CorporateAction::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CorporateAction_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CorporateAction::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CorporateAction>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CorporateAction::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CorporateAction>(), &CorporateAction::ByteSizeLong,
              &CorporateAction::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CorporateAction, _impl_._cached_size_),
          false,
      },
      &CorporateAction::kDescriptorMethods,
      &descriptor_table_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull CorporateAction_class_data_ =
        CorporateAction::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
CorporateAction::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CorporateAction_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CorporateAction_class_data_.tc_table);
  return CorporateAction_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2>
CorporateAction::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CorporateAction_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::corporate_actions::v1::CorporateAction>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .ampy.corporate_actions.v1.SplitAction split = 1 [json_name = "split"];
    {PROTOBUF_FIELD_OFFSET(CorporateAction, _impl_.action_.split_), _Internal::kOneofCaseOffset + 0, 0, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ampy.corporate_actions.v1.DividendAction dividend = 2 [json_name = "dividend"];
    {PROTOBUF_FIELD_OFFSET(CorporateAction, _impl_.action_.dividend_), _Internal::kOneofCaseOffset + 0, 1, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::corporate_actions::v1::SplitAction>()},
      {::_pbi::TcParser::GetTable<::ampy::corporate_actions::v1::DividendAction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CorporateAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.corporate_actions.v1.CorporateAction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CorporateAction::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CorporateAction& this_ = static_cast<const CorporateAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CorporateAction::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CorporateAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.corporate_actions.v1.CorporateAction)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.action_case()) {
    case kSplit: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *this_._impl_.action_.split_, this_._impl_.action_.split_->GetCachedSize(), target,
          stream);
      break;
    }
    case kDividend: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.action_.dividend_, this_._impl_.action_.dividend_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.corporate_actions.v1.CorporateAction)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CorporateAction::ByteSizeLong(const MessageLite& base) {
  const CorporateAction& this_ = static_cast<const CorporateAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CorporateAction::ByteSizeLong() const {
  const CorporateAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.corporate_actions.v1.CorporateAction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.action_case()) {
    // .ampy.corporate_actions.v1.SplitAction split = 1 [json_name = "split"];
    case kSplit: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.split_);
      break;
    }
    // .ampy.corporate_actions.v1.DividendAction dividend = 2 [json_name = "dividend"];
    case kDividend: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.dividend_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CorporateAction::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CorporateAction*>(&to_msg);
  auto& from = static_cast<const CorporateAction&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.corporate_actions.v1.CorporateAction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_action();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kSplit: {
        if (oneof_needs_init) {
          _this->_impl_.action_.split_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.action_.split_);
        } else {
          _this->_impl_.action_.split_->MergeFrom(*from._impl_.action_.split_);
        }
        break;
      }
      case kDividend: {
        if (oneof_needs_init) {
          _this->_impl_.action_.dividend_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.action_.dividend_);
        } else {
          _this->_impl_.action_.dividend_->MergeFrom(*from._impl_.action_.dividend_);
        }
        break;
      }
      case ACTION_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CorporateAction::CopyFrom(const CorporateAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.corporate_actions.v1.CorporateAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CorporateAction::InternalSwap(CorporateAction* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.action_, other->_impl_.action_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata CorporateAction::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CorporateActionBatch::_Internal {
 public:
};

CorporateActionBatch::CorporateActionBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CorporateActionBatch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ampy.corporate_actions.v1.CorporateActionBatch)
}
PROTOBUF_NDEBUG_INLINE CorporateActionBatch::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ampy::corporate_actions::v1::CorporateActionBatch& from_msg)
      : actions_{visibility, arena, from.actions_},
        _cached_size_{0} {}

CorporateActionBatch::CorporateActionBatch(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CorporateActionBatch& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CorporateActionBatch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CorporateActionBatch* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:ampy.corporate_actions.v1.CorporateActionBatch)
}
PROTOBUF_NDEBUG_INLINE CorporateActionBatch::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : actions_{visibility, arena},
        _cached_size_{0} {}

inline void CorporateActionBatch::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CorporateActionBatch::~CorporateActionBatch() {
  // @@protoc_insertion_point(destructor:ampy.corporate_actions.v1.CorporateActionBatch)
  SharedDtor(*this);
}
inline void CorporateActionBatch::SharedDtor(MessageLite& self) {
  CorporateActionBatch& this_ = static_cast<CorporateActionBatch&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CorporateActionBatch::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CorporateActionBatch(arena);
}
constexpr auto CorporateActionBatch::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CorporateActionBatch, _impl_.actions_) +
          decltype(CorporateActionBatch::_impl_.actions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(CorporateActionBatch), alignof(CorporateActionBatch), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CorporateActionBatch::PlacementNew_,
                                 sizeof(CorporateActionBatch),
                                 alignof(CorporateActionBatch));
  }
}
constexpr auto CorporateActionBatch::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CorporateActionBatch_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CorporateActionBatch::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CorporateActionBatch>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CorporateActionBatch::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CorporateActionBatch>(), &CorporateActionBatch::ByteSizeLong,
              &CorporateActionBatch::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CorporateActionBatch, _impl_._cached_size_),
          false,
      },
      &CorporateActionBatch::kDescriptorMethods,
      &descriptor_table_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull CorporateActionBatch_class_data_ =
        CorporateActionBatch::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
CorporateActionBatch::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CorporateActionBatch_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CorporateActionBatch_class_data_.tc_table);
  return CorporateActionBatch_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
CorporateActionBatch::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CorporateActionBatch_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ampy::corporate_actions::v1::CorporateActionBatch>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .ampy.corporate_actions.v1.CorporateAction actions = 1 [json_name = "actions"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CorporateActionBatch, _impl_.actions_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .ampy.corporate_actions.v1.CorporateAction actions = 1 [json_name = "actions"];
    {PROTOBUF_FIELD_OFFSET(CorporateActionBatch, _impl_.actions_), 0, 0, (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ampy::corporate_actions::v1::CorporateAction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CorporateActionBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:ampy.corporate_actions.v1.CorporateActionBatch)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actions_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CorporateActionBatch::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CorporateActionBatch& this_ = static_cast<const CorporateActionBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CorporateActionBatch::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CorporateActionBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ampy.corporate_actions.v1.CorporateActionBatch)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .ampy.corporate_actions.v1.CorporateAction actions = 1 [json_name = "actions"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_actions_size());
       i < n; i++) {
    const auto& repfield = this_._internal_actions().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ampy.corporate_actions.v1.CorporateActionBatch)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CorporateActionBatch::ByteSizeLong(const MessageLite& base) {
  const CorporateActionBatch& this_ = static_cast<const CorporateActionBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CorporateActionBatch::ByteSizeLong() const {
  const CorporateActionBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ampy.corporate_actions.v1.CorporateActionBatch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .ampy.corporate_actions.v1.CorporateAction actions = 1 [json_name = "actions"];
    {
      total_size += 1UL * this_._internal_actions_size();
      for (const auto& msg : this_._internal_actions()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CorporateActionBatch::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CorporateActionBatch*>(&to_msg);
  auto& from = static_cast<const CorporateActionBatch&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:ampy.corporate_actions.v1.CorporateActionBatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actions()->MergeFrom(
      from._internal_actions());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CorporateActionBatch::CopyFrom(const CorporateActionBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ampy.corporate_actions.v1.CorporateActionBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CorporateActionBatch::InternalSwap(CorporateActionBatch* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actions_.InternalSwap(&other->_impl_.actions_);
}

::google::protobuf::Metadata CorporateActionBatch::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace corporate_actions
}  // namespace ampy
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_ampy_2fcorporate_5factions_2fv1_2fcorporate_5factions_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
